// Action script...

// [Action in Frame 1]
function Center(MC)
{
    MC._x = Stage.width / 2 - MC._width / 2;
    MC._y = Stage.height / 2 - MC._height / 2;
} // End of the function
function toggleFullScreen()
{
    if (Stage.displayState == "normal")
    {
        Stage.displayState = "fullScreen";
    }
    else
    {
        Stage.displayState = "normal";
    } // end else if
} // End of the function
function goWalfas()
{
    getURL("http://www.walfas.org/", "_blank");
} // End of the function
function addCMItem(S, F)
{
    var _loc1 = new ContextMenuItem(S, F);
    myContextMenu.customItems.push(_loc1);
} // End of the function
Stage.scaleMode = "noScale";
Stage.align = "TL";
_root.attachMovie("Preloader", "preloader", 10);
preloader.onEnterFrame = function ()
{
    if (_root.getBytesLoaded() == _root.getBytesTotal())
    {
        gotoAndStop(3);
    }
    else
    {
        var _loc2 = Math.floor(_root.getBytesLoaded() / _root.getBytesTotal() * 100);
        preloader.percent.text = String(_loc2) + "%";
        preloader.loaderBar._xscale = _loc2;
    } // end else if
};
var myContextMenu = new ContextMenu();
myContextMenu.builtInItems.play = false;
myContextMenu.builtInItems.rewind = false;
myContextMenu.builtInItems.forward_back = false;
myContextMenu.builtInItems.loop = false;
myContextMenu.builtInItems.print = false;
addCMItem("Full Screen Mode!", toggleFullScreen);
addCMItem("http://www.walfas.org", goWalfas);
_root.menu = myContextMenu;
stop ();

// [Action in Frame 3]
function newKey(n, c, chk)
{
    GameData.Keys.Buttons[n] = new Object();
    GameData.Keys.Buttons[n].Code = c;
    GameData.Keys.Buttons[n].Pressed = false;
    if (chk)
    {
        GameData.Keys.Buttons[n].Check = chk;
    } // end if
} // End of the function
function SaveCurrentScene()
{
    var _loc5 = GameData.CurrentScene.CurrentAct;
    if (!GameData.SavedSceneData[GameData.CurrentScene.Name])
    {
        GameData.SavedScenes.push(GameData.CurrentScene.Name);
        GameData.SavedScenes.sort();
        makeListMenu(Interface.SavedSceneMenu, "SavedScenes", 100, 100);
        PositionMenu(Interface.SavedSceneMenu, "C", "C", 117, -238, Interface.MainMenu, Interface.MainMenu);
        GameData.SavedSceneData[GameData.CurrentScene.Name] = new Object();
        GameData.SavedSceneData[GameData.CurrentScene.Name].Acts = new Array();
        GameData.SavedSceneData[GameData.CurrentScene.Name].ActID = 0;
        var _loc2 = "Act" + GameData.SavedSceneData[GameData.CurrentScene.Name].ActID++;
        GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.push(_loc2);
        GameData.CurrentScene.CurrentAct = 0;
    }
    else if (GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SavedSceneData[GameData.CurrentScene.Name].Acts[_loc5]])
    {
        _loc2 = GameData.SavedSceneData[GameData.CurrentScene.Name].Acts[_loc5];
        GameData.CurrentScene.CurrentAct = _loc5;
    }
    else
    {
        _loc2 = "Act" + GameData.SavedSceneData[GameData.CurrentScene.Name].ActID++;
        GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.push(_loc2);
        GameData.CurrentScene.CurrentAct = GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.length - 1;
    } // end else if
    GameData.SavedSceneData[GameData.CurrentScene.Name].Ver = GameData.Version;
    GameData.SavedSceneData[GameData.CurrentScene.Name].Prev = GameData.CurrentScene.Prev;
    GameData.SavedSceneData[GameData.CurrentScene.Name].Next = GameData.CurrentScene.Next;
    GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2] = new Array();
    GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2].push(["Background", GameData.BG, bg._x + ":" + bg._y + ":" + bg._xscale + ":" + bg._yscale + ":" + bg._rotation + ":" + Dimmer._alpha + ":" + GameData.Friction + ":" + GameData.BGAutoScale + ":" + bg.Anim._currentframe]);
    for (i = GameData.Depths.StageList.length - 1; i >= 0; i--)
    {
        var _loc1 = GameData.Depths.StageList[i].Name;
        if (GameData.Depths.StageList[i].Type == "Characters")
        {
            GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2].push(["Character", getDNA(GameData.Characters[_loc1]), stage[_loc1]._x + ":" + stage[_loc1]._y + ":" + stage[_loc1]._rotation + ":" + stage[_loc1].XFace + ":" + stage[_loc1].YFace]);
            continue;
        } // end if
        if (GameData.Depths.StageList[i].Type == "Objects")
        {
            GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2].push(["Object", GameData.Objects[_loc1].Type, stage[_loc1]._x + ":" + stage[_loc1]._y + ":" + stage[_loc1].XFace + ":" + stage[_loc1].YFace + ":" + GameData.Objects[_loc1].Name + ":" + GameData.Objects[_loc1].Scale + ":" + stage[_loc1].Obj._currentframe + ":" + stage[_loc1]._rotation]);
            continue;
        } // end if
        if (GameData.Depths.StageList[i].Type == "Clusters")
        {
            GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2].push(["Cluster", GameData.Clusters[_loc1].Type, stage[_loc1]._x + ":" + stage[_loc1]._y + ":" + stage[_loc1].XFace + ":" + stage[_loc1].YFace + ":" + GameData.Clusters[_loc1].cFrame + ":" + GameData.Clusters[_loc1].Name + ":" + GameData.Clusters[_loc1].Rows + ":" + GameData.Clusters[_loc1].Cols + ":" + GameData.Clusters[_loc1].Spread + ":" + GameData.Clusters[_loc1].Distance + ":" + GameData.Clusters[_loc1].StartDist + ":" + GameData.Clusters[_loc1].Px + ":" + GameData.Clusters[_loc1].Py + ":" + GameData.Clusters[_loc1].Dir + ":" + GameData.Clusters[_loc1].Scale + ":" + GameData.Clusters[_loc1].Spiral + ":" + GameData.Clusters[_loc1].RMod + ":" + stage[_loc1]._rotation]);
            continue;
        } // end if
        if (GameData.Depths.StageList[i].Type == "SpeechBubbles")
        {
            var _loc3 = stage[_loc1].D.text.split(":");
            var _loc4 = _loc3.join("//cln//");
            GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2].push(["Bubble", GameData.SpeechBubbles[_loc1].Type, GameData.SpeechBubbles[_loc1].Name + ":" + GameData.SpeechBubbles[_loc1].Scale + ":" + GameData.SpeechBubbles[_loc1].XScale + ":" + GameData.SpeechBubbles[_loc1].YScale + ":" + GameData.SpeechBubbles[_loc1].FontColor + ":" + stage[_loc1]._x + ":" + stage[_loc1]._y + ":" + stage[_loc1]._rotation + ":" + stage[_loc1].Bubble.XFace + ":" + stage[_loc1].Bubble.YFace + ":" + stage[_loc1].Bubble._x + ":" + stage[_loc1].Bubble._y + ":" + stage[_loc1].Bubble._rotation + ":" + stage[_loc1].D._x + ":" + stage[_loc1].D._y + ":" + stage[_loc1].D._rotation + ":" + _loc4 + ":" + stage[_loc1].FontType]);
            continue;
        } // end if
        if (GameData.Depths.StageList[i].Type == "Image")
        {
            trace (GameData.Screenshots[_loc1].Scale);
            GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2].push(["Image", GameData.Screenshots[_loc1].Src, stage[_loc1]._x + ":" + stage[_loc1]._y + ":" + stage[_loc1].XFace + ":" + stage[_loc1].YFace + ":" + GameData.Screenshots[_loc1].Name + ":" + GameData.Screenshots[_loc1].Scale + ":" + stage[_loc1]._rotation + ":" + GameData.Screenshots[_loc1].ColorMode + ":" + GameData.Screenshots[_loc1].Blur + ":" + GameData.Screenshots[_loc1].BlurSettings.X + ":" + GameData.Screenshots[_loc1].BlurSettings.Y + ":" + GameData.Screenshots[_loc1].BlurSettings.Q]);
            continue;
        } // end if
        if (GameData.Depths.StageList[i].Type == "Rain")
        {
            GameData.SavedSceneData[GameData.CurrentScene.Name][_loc2].push(["Rain", GameData.Rain[_loc1].Type, stage[_loc1]._x + ":" + stage[_loc1]._y + ":" + stage[_loc1].XFace + ":" + stage[_loc1].YFace + ":" + GameData.Rain[_loc1].Name + ":" + GameData.Rain[_loc1].Scale + ":" + GameData.Rain[_loc1].Qty + ":" + GameData.Rain[_loc1].Rmin + ":" + GameData.Rain[_loc1].Rmax + ":" + GameData.Rain[_loc1].Xmin + ":" + GameData.Rain[_loc1].Xmax + ":" + GameData.Rain[_loc1].Ymin + ":" + GameData.Rain[_loc1].Ymax + ":" + GameData.Rain[_loc1].Px + ":" + GameData.Rain[_loc1].Py + ":" + GameData.Rain[_loc1].cFrame]);
        } // end if
    } // end of for
    Interface.SceneFrame.bName.text = GameData.CurrentScene.Name + " : Part " + (GameData.CurrentScene.CurrentAct + 1);
    RefreshActList();
} // End of the function
function applyFilters(tS)
{
    if (!tS)
    {
        tS = GameData.Target._name;
    } // end if
    var _loc1 = [];
    if (GameData.Screenshots[tS].ColorMode == "greyscale")
    {
        _loc1.push(grayfilter);
    }
    else if (GameData.Screenshots[tS].ColorMode == "inverse")
    {
        _loc1.push(inversefilter);
    }
    else
    {
        _loc1.push(colorfilter);
    } // end else if
    if (GameData.Screenshots[tS].Blur)
    {
        var _loc3 = GameData.Screenshots[tS].BlurSettings;
        var _loc4 = new flash.filters.BlurFilter(_loc3.X, _loc3.Y, _loc3.Q);
        _loc1.push(_loc4);
    } // end if
    stage[tS].pic.filters = _loc1;
} // End of the function
function addButton(W, N, X, Y, T, A)
{
    GameData.Frames[W][N] = new Object();
    GameData.Frames[W][N].Type = "Button";
    GameData.Frames[W][N].X = X;
    GameData.Frames[W][N].Y = Y;
    GameData.Frames[W][N].Text = T;
    GameData.Frames[W][N].Action = A;
} // End of the function
function addWindow(N, H, W, T)
{
    GameData.Frames[N] = new Object();
    GameData.Frames[N].Height = H;
    GameData.Frames[N].Width = W;
    GameData.Frames[N].Title = new Object();
    GameData.Frames[N].Title.Type = "Text";
    GameData.Frames[N].Title.Format = "Header";
    GameData.Frames[N].Title.Text = T;
    GameData.Frames[N].Title.X = 10;
    GameData.Frames[N].Title.Y = 10;
    GameData.Frames[N].Title.Width = 280;
    GameData.Frames[N].Title.Height = 28;
    GameData.Frames[N].Line = new Object();
    GameData.Frames[N].Line.Type = "Line";
    GameData.Frames[N].Line.X = 10;
    GameData.Frames[N].Line.Y = 38;
    GameData.Frames[N].Line.Size = 280;
} // End of the function
function addTextInput(W, N, X, Y, Lt, It, H, Lw, Iw)
{
    GameData.Frames[W][N + "L"] = new Object();
    GameData.Frames[W][N + "L"].Type = "Text";
    GameData.Frames[W][N + "L"].Format = "Base";
    GameData.Frames[W][N + "L"].Text = Lt;
    GameData.Frames[W][N + "L"].X = X;
    GameData.Frames[W][N + "L"].Y = Y;
    GameData.Frames[W][N + "L"].Width = Lw;
    GameData.Frames[W][N + "L"].Height = H;
    GameData.Frames[W][N + "I"] = new Object();
    GameData.Frames[W][N + "I"].Type = "Text";
    GameData.Frames[W][N + "I"].Input = true;
    GameData.Frames[W][N + "I"].Format = "Base";
    GameData.Frames[W][N + "I"].Text = It;
    GameData.Frames[W][N + "I"].X = X + GameData.Frames[W][N + "L"].Width;
    GameData.Frames[W][N + "I"].Y = Y;
    GameData.Frames[W][N + "I"].Width = Iw;
    GameData.Frames[W][N + "I"].Height = H;
} // End of the function
function addText(W, N, X, Y, Lt, H, Lw)
{
    GameData.Frames[W][N + "L"] = new Object();
    GameData.Frames[W][N + "L"].Type = "Text";
    GameData.Frames[W][N + "L"].Format = "Base";
    GameData.Frames[W][N + "L"].Text = Lt;
    GameData.Frames[W][N + "L"].X = X;
    GameData.Frames[W][N + "L"].Y = Y;
    GameData.Frames[W][N + "L"].Width = Lw;
    GameData.Frames[W][N + "L"].Height = H;
} // End of the function
function addCheckBox(W, N, X, Y, Lt, H, Lw, Is, cbid)
{
    GameData.Frames[W][N + "L"] = new Object();
    GameData.Frames[W][N + "L"].Type = "Text";
    GameData.Frames[W][N + "L"].Format = "Base";
    GameData.Frames[W][N + "L"].Text = Lt;
    GameData.Frames[W][N + "L"].X = X;
    GameData.Frames[W][N + "L"].Y = Y;
    GameData.Frames[W][N + "L"].Width = Lw;
    GameData.Frames[W][N + "L"].Height = H;
    GameData.Frames[W][N + "I"] = new Object();
    GameData.Frames[W][N + "I"].Type = "Checkbox";
    GameData.Frames[W][N + "I"].ID = cbid;
    GameData.Frames[W][N + "I"].X = X + GameData.Frames[W][N + "L"].Width;
    GameData.Frames[W][N + "I"].Y = Y;
    GameData.Frames[W][N + "I"].Scale = Is;
} // End of the function
function makeFrame(F)
{
    var _loc3 = 0;
    Interface.createEmptyMovieClip(F, GameData.Menus.DMax++);
    Interface[F].attachMovie("BGBox", "BG", _loc3++);
    Interface[F].BG._alpha = GameData.Buttons.Opacity;
    setBGDrag(Interface[F].BG);
    for (i in GameData.Frames[F])
    {
        if (i == "Height")
        {
            Interface[F].BG._height = GameData.Frames[F][i];
            continue;
        } // end if
        if (i == "Width")
        {
            Interface[F].BG._width = GameData.Frames[F][i];
            continue;
        } // end if
        if (GameData.Frames[F][i].Type == "Text")
        {
            Interface[F].createTextField(i, _loc3++, GameData.Frames[F][i].X, GameData.Frames[F][i].Y, GameData.Frames[F][i].Width, GameData.Frames[F][i].Height);
            Interface[F][i].embedFonts = true;
            Interface[F][i].setNewTextFormat(GameData.TextFormats[GameData.Frames[F][i].Format]);
            if (GameData.Frames[F][i].Input)
            {
                Interface[F][i].type = "input";
                Interface[F][i].border = true;
                setFocusHandler(Interface[F][i], GameData.Frames[F][i].Text);
                setOnLoadHandler(Interface[F], i, GameData.Frames[F][i].Text);
            }
            else
            {
                Interface[F][i].selectable = false;
            } // end else if
            Interface[F][i].text = GameData.Frames[F][i].Text;
            continue;
        } // end if
        if (GameData.Frames[F][i].Type == "Line")
        {
            Interface[F].attachMovie("BlackLine", i, _loc3++);
            Interface[F][i]._x = GameData.Frames[F][i].X;
            Interface[F][i]._y = GameData.Frames[F][i].Y;
            Interface[F][i]._width = GameData.Frames[F][i].Size;
            continue;
        } // end if
        if (GameData.Frames[F][i].Type == "Button")
        {
            makeButton(Interface[F], i, GameData.Frames[F][i].Text, _loc3++);
            if (GameData.Frames[F][i].Text == "isClusterDir")
            {
                setOnLoadHandler(Interface[F], i, GameData.Frames[F][i].Text);
            } // end if
            Interface[F][i]._x = GameData.Frames[F][i].X;
            Interface[F][i]._y = GameData.Frames[F][i].Y;
            Interface[F][i].Action = GameData.Frames[F][i].Action;
            Interface[F][i].onRelease = function ()
            {
                CallFunction(this);
                SwapColor(this.BG, "Buttons", 1);
            };
            continue;
        } // end if
        if (GameData.Frames[F][i].Type == "Checkbox")
        {
            Interface[F].attachMovie("Checkbox", i, _loc3++);
            Interface[F][i]._x = GameData.Frames[F][i].X + 10;
            Interface[F][i]._y = GameData.Frames[F][i].Y + 8;
            Interface[F][i]._xscale = GameData.Frames[F][i].Scale;
            Interface[F][i]._yscale = GameData.Frames[F][i].Scale;
            Interface[F][i].ID = GameData.Frames[F][i].ID;
            Interface[F][i].onRelease = function ()
            {
                Toggle(this, this.ID);
            };
            setOnLoadHandler(Interface[F], i, GameData.Frames[F][i].ID);
        } // end if
    } // end of for...in
    Interface[F]._visible = false;
    ICenter(Interface[F]);
} // End of the function
function getArray()
{
    if (GameData.TargetType == "Character")
    {
        return ("Characters");
    }
    else if (GameData.TargetType == "Rain")
    {
        return ("Rain");
    }
    else if (GameData.TargetType == "Object")
    {
        return ("Objects");
    }
    else if (GameData.TargetType == "Screenshot")
    {
        return ("Screenshots");
    }
    else if (GameData.TargetType == "SpeechBubble")
    {
        return ("SpeechBubbles");
    }
    else if (GameData.TargetType == "Cluster")
    {
        return ("Clusters");
    } // end else if
    trace ("Unknown Object");
    return ("Unknown");
} // End of the function
function OnLoadHandler(MC)
{
    for (i = 0; i < MC.OnLoad.length; i++)
    {
        if (GameData.Menus.OnLoad[MC.OnLoad[i][1]])
        {
            GameData.Menus.OnLoad[MC.OnLoad[i][1]](MC, i);
        } // end if
    } // end of for
} // End of the function
function Toggle(MC, T)
{
    if (T == "ClusterPoint")
    {
        if (GameData.Clusters[GameData.Target._name].TowardsPoint)
        {
            GameData.Clusters[GameData.Target._name].TowardsPoint = false;
            MC.gotoAndStop(1);
        }
        else
        {
            GameData.Clusters[GameData.Target._name].TowardsPoint = true;
            MC.gotoAndStop(2);
        } // end else if
        fixClusterShotAngle(GameData.Target, GameData.Clusters[GameData.Target._name].Qt);
    } // end if
} // End of the function
function setOnLoadHandler(MC, T, A)
{
    if (!MC.OnLoad)
    {
        MC.OnLoad = new Array();
    } // end if
    MC.OnLoad.push([T, A]);
} // End of the function
function setFocusHandler(T, H)
{
    T.onSetFocus = function ()
    {
        GameData.KeyLock = true;
    };
    if (GameData.Menus.OnSetFocus[H])
    {
        GameData.Menus.OnSetFocus[H](T);
    }
    else
    {
        T.onKillFocus = function ()
        {
            GameData.KeyLock = false;
        };
    } // end else if
} // End of the function
function DevPositioner(MC)
{
    if (GameData.DevMode)
    {
        MC.onPress = function ()
        {
            this.startDrag();
        };
        MC.onRelease = function ()
        {
            this.stopDrag();
            trace ("X: " + this._x + " Y: " + this._y);
        };
    } // end if
} // End of the function
function getStageList()
{
    for (s = GameData.Depths.StageList.length - 1; s >= 0; s--)
    {
        trace (GameData.Depths.StageList[s].Name + ": " + GameData.Depths.StageList[s].Depth);
    } // end of for
} // End of the function
function Find(MC)
{
    if (GameData.DevMode)
    {
        if (MC)
        {
            MC._visible = true;
            trace ("X: " + MC._x + " Y:" + MC._y);
        }
        else
        {
            trace ("Uh oh! It\'s really gone.");
        } // end if
    } // end else if
} // End of the function
function newSetting(n, d, I, V)
{
    GameData.Settings[n] = new Object();
    GameData.Settings[n].Check = d;
    GameData.Settings[n].Info = I;
    if (V)
    {
        GameData.Settings[n].Value = V;
    } // end if
} // End of the function
function ToggleSetting(cb, Op)
{
    if (GameData.Settings[Op].Check)
    {
        GameData.Settings[Op].Check = false;
        cb.gotoAndStop(1);
    }
    else
    {
        GameData.Settings[Op].Check = true;
        cb.gotoAndStop(2);
    } // end else if
    if (GameData.Settings[Op].Trigger)
    {
        GameData.Settings[Op].Trigger();
    } // end if
    my_so.data[Op] = GameData.Settings[Op].Check;
    my_so.flush();
} // End of the function
function CheckOrigin()
{
    var _loc2 = new LoadVars();
    _loc2.onLoad = function (success)
    {
        if (success)
        {
            GameData.Origin = this.from.toString();
        }
        else
        {
            GameData.Origin = "Local";
        } // end else if
    };
    _loc2.load("origin.txt");
} // End of the function
function LoadSavedData()
{
    if (my_so.data.Hotkeys == undefined)
    {
        for (var _loc1 = 0; _loc1 < 10; ++_loc1)
        {
            GameData.Hotkeys.push([true, true, String(_loc1), String(_loc1)]);
        } // end of for
        my_so.data.Hotkeys = GameData.Hotkeys;
    }
    else
    {
        GameData.Hotkeys = my_so.data.Hotkeys;
    } // end else if
    if (my_so.data.SavedChars == undefined)
    {
        GameData.SavedChars = new Array();
        my_so.data.SavedChars = GameData.SavedChars;
    }
    else
    {
        GameData.SavedChars = my_so.data.SavedChars;
        GameData.SavedChars.sort(Array.CASEINSENSITIVE);
    } // end else if
    if (my_so.data.SavedScenes == undefined)
    {
        GameData.SavedSceneData = new Object();
        GameData.SavedScenes = new Array();
        my_so.data.SavedScenes = GameData.SavedSceneData;
    }
    else
    {
        GameData.SavedSceneData = my_so.data.SavedScenes;
        GameData.SavedScenes = new Array();
        for (S in GameData.SavedSceneData)
        {
            GameData.SavedScenes.push(S);
        } // end of for...in
        GameData.SavedScenes.sort();
    } // end else if
    if (my_so.data.PongHiScore == undefined)
    {
        my_so.data.PongHiScore = GameData.Pong.HiScore;
    }
    else
    {
        GameData.Pong.HiScore = my_so.data.PongHiScore;
    } // end else if
    if (my_so.data.DefaultChar == undefined)
    {
        my_so.data.DefaultChar = GameData.Settings.DefaultChar.Value;
    }
    else
    {
        GameData.Settings.DefaultChar.Value = my_so.data.DefaultChar;
    } // end else if
    if (my_so.data.GameData.Settings.ASpeed.Value == undefined)
    {
        my_so.data.GameData.Settings.ASpeed.Value = GameData.GameData.Settings.ASpeed.Value;
    }
    else
    {
        GameData.GameData.Settings.ASpeed.Value = my_so.data.GameData.Settings.ASpeed.Value;
    } // end else if
    for (S in GameData.Settings)
    {
        if (my_so.data[S] == undefined)
        {
            if (GameData.Settings[S].Value)
            {
                my_so.data[S] = GameData.Settings[S].Value;
            }
            else
            {
                my_so.data[S] = GameData.Settings[S].Check;
            } // end else if
            continue;
        } // end if
        if (GameData.Settings[S].Value)
        {
            GameData.Settings[S].Value = my_so.data[S];
            continue;
        } // end if
        GameData.Settings[S].Check = my_so.data[S];
    } // end of for...in
} // End of the function
function newPreset(N, B, E, M, H1, H2, A, S, I, W, Ac)
{
    GameData.Presets[N] = new Object();
    GameData.Presets[N].bodyFrame = B;
    GameData.Presets[N].eyeFrame = E;
    GameData.Presets[N].mouthFrame = M;
    GameData.Presets[N].headFrame = H1;
    GameData.Presets[N].hatFrame = H2;
    GameData.Presets[N].armFrame = A;
    GameData.Presets[N].shoeFrame = S;
    GameData.Presets[N].itemFrame = I;
    GameData.Presets[N].wingFrame = W;
    GameData.Presets[N].accFrame = Ac;
} // End of the function
function compareString(str1, str2, num)
{
    var _loc3 = true;
    for (l = 0; l < num; l++)
    {
        if (str1.charAt(l) != str2.charAt(l))
        {
            trace (str1.charAt(l) + "_" + str2.charAt(l));
            _loc3 = false;
        } // end if
    } // end of for
    return (_loc3);
} // End of the function
function playSound(T)
{
    if (!GameData.Settings.Mute.Check)
    {
        _root.GameData.Sounds[T].start();
    } // end if
} // End of the function
function setBGDrag(MC)
{
    MC.onPress = function ()
    {
        this._parent.startDrag();
    };
    MC.onRelease = function ()
    {
        this._parent.stopDrag();
    };
    MC.onReleaseOutside = function ()
    {
        this._parent.stopDrag();
    };
} // End of the function
function RefreshActList()
{
    GameData.SceneActs = GameData.SavedSceneData[GameData.CurrentScene.Name].Acts;
    makeListMenu(Interface.SceneActMenu, "SceneActs", 100, 0);
    PositionMenu(Interface.SceneActMenu, "C", "C", 117, -138, Interface.SceneFrame, Interface.SceneFrame);
} // End of the function
function ClearClickHandlers()
{
    for (n in GameData.Characters)
    {
        if (stage[n].Pin)
        {
            RemoveClickHandler(stage[n], "Character");
        } // end if
    } // end of for...in
    for (n in GameData.SpeechBubbles)
    {
        if (stage[n].Pin)
        {
            RemoveClickHandler(stage[n], "SpeechBubble");
        } // end if
    } // end of for...in
    for (n in GameData.Objects)
    {
        if (stage[n].Pin)
        {
            RemoveClickHandler(stage[n], "Object");
        } // end if
    } // end of for...in
    for (n in GameData.Clusters)
    {
        if (stage[n].Pin)
        {
            RemoveClickHandler(stage[n], "Cluster");
        } // end if
    } // end of for...in
    for (n in GameData.Rain)
    {
        if (stage[n].Pin)
        {
            RemoveClickHandler(stage[n], "Rain");
        } // end if
    } // end of for...in
    for (n in GameData.Screenshots)
    {
        if (stage[n].Pin)
        {
            RemoveClickHandler(stage[n], "Screenshot");
        } // end if
    } // end of for...in
} // End of the function
function SetClickHandlers()
{
    for (n in GameData.Characters)
    {
        if (stage[n].Pin)
        {
            AddClickHandler(stage[n], "Character");
        } // end if
    } // end of for...in
    for (n in GameData.SpeechBubbles)
    {
        if (stage[n].Pin)
        {
            AddClickHandler(stage[n], "SpeechBubble");
        } // end if
    } // end of for...in
    for (n in GameData.Objects)
    {
        if (stage[n].Pin)
        {
            AddClickHandler(stage[n], "Object");
        } // end if
    } // end of for...in
    for (n in GameData.Clusters)
    {
        if (stage[n].Pin)
        {
            AddClickHandler(stage[n], "Cluster");
        } // end if
    } // end of for...in
    for (n in GameData.Rain)
    {
        if (stage[n].Pin)
        {
            AddClickHandler(stage[n], "Rain");
        } // end if
    } // end of for...in
    for (n in GameData.Screenshots)
    {
        if (stage[n].Pin)
        {
            AddClickHandler(stage[n], "Screenshot");
        } // end if
    } // end of for...in
} // End of the function
function SwapColor(MC, P, C)
{
    var _loc1 = new Color(MC);
    _loc1.setRGB(GameData.Palette[P][C]);
} // End of the function
function PositionMenu(MC, H, V, X, Y, Xclip, Yclip)
{
    GameData.Menus.Targets[MC._name] = MC;
    MC.Valign = V;
    MC.Halign = H;
    MC.Xmod = X;
    MC.Ymod = Y;
    MC.XClip = Xclip;
    MC.YClip = Yclip;
} // End of the function
function resetRenameMenu()
{
    Interface.RenameMenu.OK.onRelease = function ()
    {
        Interface.TargetFrame.bName.text = Interface.RenameMenu.iName.text;
        if (GameData.TargetType == "Character")
        {
            GameData.Characters[GameData.Target._name].Name = Interface.RenameMenu.iName.text;
        }
        else if (GameData.TargetType == "Object")
        {
            GameData.Objects[GameData.Target._name].Name = Interface.RenameMenu.iName.text;
        }
        else if (GameData.TargetType == "SpeechBubble")
        {
            GameData.SpeechBubbles[GameData.Target._name].Name = Interface.RenameMenu.iName.text;
        }
        else if (GameData.TargetType == "Cluster")
        {
            GameData.Clusters[GameData.Target._name].Name = Interface.RenameMenu.iName.text;
        }
        else if (GameData.TargetType == "Screenshot")
        {
            GameData.Screenshots[GameData.Target._name].Name = Interface.RenameMenu.iName.text;
        } // end else if
        SwapColor(this.BG, "Buttons", 1);
        CloseMenus(3);
    };
} // End of the function
function fixScales()
{
    SysConsole._y = Stage.height / 2;
    if (game.Type == "Pong")
    {
        pongFixScale();
    } // end if
    var _loc2 = Math.round(Stage.width * 100 / 550);
    var _loc1 = Math.round(Stage.height * 100 / 400);
    if (_loc2 < _loc1)
    {
        nFscale = _loc2;
    }
    else
    {
        nFscale = _loc1;
    } // end else if
    if (GameData.BGAutoScale)
    {
        Interface.BGMenu.sX.text = nFscale;
        bg._xscale = nFscale;
        bg._yscale = nFscale;
        bg._x = (Stage.width - 550 * (nFscale / 100)) / 2;
        bg._y = (Stage.height - 400 * (nFscale / 100)) / 2;
    } // end if
    ClearClicker._width = Stage.width;
    ClearClicker._height = Stage.height;
    Dimmer._width = Stage.width;
    Dimmer._height = Stage.height;
    ClickBlocker._width = Stage.width;
    ClickBlocker._height = Stage.height;
    TopDimmer._width = Stage.width;
    TopDimmer._height = Stage.height;
    if (GameData.Menus.AutoScale)
    {
        nFscale = Math.floor(nFscale / 5) * 5;
        GameData.Menus.Size = nFscale;
        Interface._xscale = GameData.Menus.Size;
        Interface._yscale = GameData.Menus.Size;
    } // end if
} // End of the function
function openCOMenu()
{
    setCharLook(Interface.COMenu.char, GameData.Characters[GameData.Target._name]);
    for (l = 0; l < GameData.PartsArray.length; l++)
    {
        if (GameData.Characters[GameData.Target._name].Locks[GameData.PartsArray[l]])
        {
            Interface.COMenu["Prev" + l]._visible = false;
            Interface.COMenu["Next" + l]._visible = false;
            Interface.COMenu["Lock" + l].gotoAndStop(2);
            continue;
        } // end if
        Interface.COMenu["Prev" + l]._visible = true;
        Interface.COMenu["Next" + l]._visible = true;
        Interface.COMenu["Lock" + l].gotoAndStop(1);
    } // end of for
    Interface.COMenu.cName.text = GameData.Characters[GameData.Target._name].Name;
    Interface.COMenu.cScale.text = GameData.Characters[GameData.Target._name].Scale;
    Interface.COMenu.cRot.text = GameData.Target._rotation;
    Interface.COMenu.cX.text = GameData.Target._x;
    Interface.COMenu.cY.text = GameData.Target._y;
    CloseMenus(1);
    OpenMenu(1, Interface.COMenu, Interface.EditMenu.ID0.BG);
} // End of the function
function updateCOMenu()
{
    if (GameData.TargetType == "Character" && Interface.COMenu._visible)
    {
        Interface.COMenu.cName.text = GameData.Characters[GameData.Target._name].Name;
        Interface.COMenu.cScale.text = GameData.Characters[GameData.Target._name].Scale;
        Interface.COMenu.cRot.text = GameData.Target._rotation;
        Interface.COMenu.cX.text = GameData.Target._x;
        Interface.COMenu.cY.text = GameData.Target._y;
    } // end if
} // End of the function
function setMenuPositions()
{
    var _loc1 = new Array();
    for (m in GameData.Menus.Targets)
    {
        _loc1.push(m);
    } // end of for...in
    for (var _loc2 = 0; _loc1.length > 0; _loc2 = 0)
    {
        if (tFMC(_loc1, GameData.Menus.Targets[_loc1[_loc2]].XClip._name) || tFMC(_loc1, GameData.Menus.Targets[_loc1[_loc2]].YClip._name))
        {
            ++_loc2;
        }
        else
        {
            fixMenuScale(_loc1[_loc2]);
            _loc1.splice(_loc2, 1);
        } // end else if
        if (_loc2 >= _loc1.length)
        {
        } // end if
    } // end of for
} // End of the function
function tFMC(tAr, tM)
{
    for (j = 0; j < tAr.length; j++)
    {
        if (tAr[j] == tM)
        {
            return (true);
        } // end if
    } // end of for
    return (false);
} // End of the function
function fixMenuScale(m)
{
    if (GameData.Menus.Targets[m].Valign == "T")
    {
        GameData.Menus.Targets[m]._y = GameData.Menus.Targets[m].Ymod;
    }
    else if (GameData.Menus.Targets[m].Valign == "B")
    {
        GameData.Menus.Targets[m]._y = 400 - GameData.Menus.Targets[m]._height + GameData.Menus.Targets[m].Ymod;
    }
    else if (GameData.Menus.Targets[m].Valign == "C")
    {
        GameData.Menus.Targets[m]._y = GameData.Menus.Targets[m].YClip._y + GameData.Menus.Targets[m].Ymod;
    }
    else
    {
        GameData.Menus.Targets[m]._y = 200 - GameData.Menus.Targets[m]._height / 2 + GameData.Menus.Targets[m].Ymod;
    } // end else if
    if (GameData.Menus.Targets[m].Halign == "L")
    {
        GameData.Menus.Targets[m]._x = GameData.Menus.Targets[m].Xmod;
    }
    else if (GameData.Menus.Targets[m].Halign == "R")
    {
        GameData.Menus.Targets[m]._x = 400 - GameData.Menus.Targets[m]._height + GameData.Menus.Targets[m].Xmod;
    }
    else if (GameData.Menus.Targets[m].Halign == "C")
    {
        GameData.Menus.Targets[m]._x = GameData.Menus.Targets[m].XClip._x + GameData.Menus.Targets[m].Xmod;
    }
    else
    {
        GameData.Menus.Targets[m]._x = 200 - GameData.Menus.Targets[m]._height / 2 + GameData.Menus.Targets[m].Xmod;
    } // end else if
} // End of the function
function makeButton(T, N, L, D)
{
    T.attachMovie("Button", N, D);
    Center(T[N]);
    T[N].bName.text = L;
    setButtonStyle(T[N]);
} // End of the function
function makeNewMenu(T, N, D)
{
    T.createEmptyMovieClip(N, GameData.Menus.DMax++);
    T[N].Size = D;
    for (i = 0; i < D; i++)
    {
        T[N].attachMovie("MenuItem", "ID" + i, i);
        T[N]["ID" + i]._y = i * 20;
        T[N]["ID" + i].bName.text = "Menu Item " + i;
        setButtonStyle(T[N]["ID" + i]);
        T[N]["ID" + i].onRelease = function ()
        {
            CallFunction(this);
            SwapColor(this.BG, "Buttons", 1);
        };
    } // end of for
    T[N]._visible = false;
} // End of the function
function CallFunction(MC)
{
    var _loc1 = MC.Action.split("-");
    if (_loc1.length > 1)
    {
        if (_loc1[0] == "Open")
        {
            GameData.Menus.Functions.OpenMenu(MC, _loc1[1], Number(_loc1[2]));
        }
        else if (_loc1.length == 2)
        {
            GameData.Menus.Functions[_loc1[0]](MC, _loc1[1]);
        } // end else if
    }
    else
    {
        GameData.Menus.Functions[MC.Action](MC);
    } // end else if
} // End of the function
function AddMenuItem(T, B, F)
{
    GameData.Menus[T].Items.push({Name: B, Action: F});
} // End of the function
function makeMenu(T, N, D, MI, X, Y)
{
    T.createEmptyMovieClip(N, D);
    ScaleMenu(T[N]);
    for (i = 0; i < MI.length; i++)
    {
        T[N].attachMovie("MenuItem", "ID" + i, i);
        T[N]["ID" + i]._x = X;
        T[N]["ID" + i]._y = i * -20;
        T[N]["ID" + i].bName.text = MI[i];
        if (MI[i] != "QuickChange")
        {
            setButtonStyle(T[N]["ID" + i]);
        } // end if
    } // end of for
    T[N]._y = Y - T[N]._height;
    T[N]._visible = false;
} // End of the function
function resetHelp()
{
    playSound("Pop");
    Interface.HelpWindow.Next._visible = false;
    Interface.HelpWindow.TellMore._visible = false;
    Interface.HelpWindow.WalfasLink._visible = false;
    Interface.HelpWindow.BasicHelpMenu._visible = true;
    Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Intro;
} // End of the function
function setMenuListener(MC, T, L)
{
    if (MC._parent._name == "PartsMenu")
    {
        MC.onRelease = function ()
        {
            if (GameData.Locks[this.bName.text] || GameData.Characters[GameData.Target._name].Locks[this.bName.text])
            {
                OpenMenu(L, Interface.HelpWindow, this);
                resetHelp();
                Interface.HelpWindow.BasicHelpMenu._visible = false;
                Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Locks;
                Interface.HelpWindow.Next._visible = true;
                Interface.HelpWindow.Next.onRelease = function ()
                {
                    Interface.HelpWindow._visible = false;
                };
            }
            else if (T._visible)
            {
                CloseMenus(L);
                SwapColor(this.BG, "Buttons", 1);
            }
            else
            {
                OpenMenu(L, T, this.BG);
                SwapColor(this.BG, "Buttons", 2);
            } // end else if
        };
    }
    else if (T._name == "PresetMenu")
    {
        MC.onRelease = function ()
        {
            for (i = 0; i < 13; i++)
            {
                TMFix(Interface.PresetMenu.Ops["ID" + i], "PresetList");
            } // end of for
            if (T._visible)
            {
                CloseMenus(L);
                SwapColor(this.BG, "Buttons", 1);
            }
            else
            {
                OpenMenu(L, T, this);
                SwapColor(this.BG, "Buttons", 2);
            } // end else if
        };
    }
    else
    {
        MC.onRelease = function ()
        {
            if (T._visible)
            {
                CloseMenus(L);
                SwapColor(this.BG, "Buttons", 1);
            }
            else
            {
                OpenMenu(L, T, this);
                SwapColor(this.BG, "Buttons", 2);
            } // end else if
        };
    } // end else if
    MC.onReleaseOutside = function ()
    {
        if (T._visible)
        {
            SwapColor(this.BG, "Buttons", 2);
        }
        else
        {
            SwapColor(this.BG, "Buttons", 0);
        } // end else if
    };
    MC.onRollOut = function ()
    {
        if (T._visible)
        {
            SwapColor(this.BG, "Buttons", 2);
        }
        else
        {
            SwapColor(this.BG, "Buttons", 0);
        } // end else if
    };
} // End of the function
function NewOpenMenu(MC, T, L)
{
    if (T._visible)
    {
        CloseMenus(L);
    }
    else
    {
        OpenMenu(L, T, MC);
    } // end else if
} // End of the function
function addPinPreview(MC)
{
    MC.attachMovie("Pin", "pin", 15);
    MC.pin._x = 100;
    MC.pin._y = -7;
    MC.pin._xscale = -30;
    MC.pin._yscale = 30;
    MC.pin._visible = false;
} // End of the function
function checkLocks(T, M)
{
    for (l = 0; l < 10; l++)
    {
        if (T.Locks[M["ID" + l].bName.text])
        {
            M["ID" + l].checkbox.gotoAndStop(2);
            continue;
        } // end if
        M["ID" + l].checkbox.gotoAndStop(1);
    } // end of for
} // End of the function
function setButtonStyle(MC)
{
    SwapColor(MC.BG, "Buttons", 0);
    MC.BG._alpha = GameData.Buttons.Opacity;
    var _loc3 = new TextFormat();
    _loc3.color = GameData.Palette.Buttons[3];
    MC.bName.setTextFormat(_loc3);
    MC.onRollOver = function ()
    {
        SwapColor(this.BG, "Buttons", 1);
    };
    MC.onRollOut = function ()
    {
        SwapColor(this.BG, "Buttons", 0);
    };
    MC.onPress = function ()
    {
        SwapColor(this.BG, "Buttons", 2);
    };
    MC.onRelease = function ()
    {
        SwapColor(this.BG, "Buttons", 1);
    };
    MC.onReleaseOutside = function ()
    {
        SwapColor(this.BG, "Buttons", 0);
    };
} // End of the function
function setManipulator()
{
    Manipulator._x = GameData.Target._x;
    Manipulator._y = GameData.Target._y;
    setOrbit(Manipulator.RotateTool, GameData.Target._rotation, 30);
    Manipulator.ScaleTool._x = GameData.Target._xscale / 2;
    Manipulator.ScaleTool._y = GameData.Target._yscale / 2;
    if (GameData.TargetType == "Cluster")
    {
        Manipulator.Positioner._visible = true;
        Manipulator.Positioner._x = GameData.Clusters[GameData.Target._name].Px;
        Manipulator.Positioner._y = GameData.Clusters[GameData.Target._name].Py;
        Manipulator.BScaleTool._visible = false;
        Manipulator.BTextTool._visible = false;
    }
    else if (GameData.TargetType == "SpeechBubble")
    {
        Manipulator.Positioner._visible = true;
        Manipulator.Positioner._x = GameData.Target.Bubble._x;
        Manipulator.Positioner._y = GameData.Target.Bubble._y;
        Manipulator.BScaleTool._visible = true;
        Manipulator.BScaleTool._x = GameData.Target.Bubble._xscale;
        Manipulator.BScaleTool._y = GameData.Target.Bubble._yscale;
        Manipulator.BTextTool._visible = true;
        Manipulator.BTextTool._x = GameData.Target.D._x;
        Manipulator.BTextTool._y = GameData.Target.D._y;
    }
    else
    {
        Manipulator.Positioner._visible = false;
        Manipulator.BScaleTool._visible = false;
        Manipulator.BTextTool._visible = false;
    } // end else if
    Manipulator._visible = true;
} // End of the function
function makeListMenu(MC, T, X, Y)
{
    var _loc5 = 250;
    MC.SMod = 0;
    MC.attachMovie("BGBox", "DaMask", 5);
    MC.DaMask._width = _loc5;
    MC.DaMask._height = 240;
    MC.attachMovie("BGBox", "Scrollbar", 6);
    MC.attachMovie("BGBox", "Scrollb", 7);
    if (T == "BGs")
    {
        MC.Scrollbar._x = _loc5 - 20;
        MC.Scrollb._x = _loc5 - 20;
        MC.Scrollbar._y = 50;
        MC.Scrollb._y = 50;
        MC.Scrollb.Ymod = 50;
    }
    else
    {
        MC.Scrollbar._x = _loc5 + 1;
        MC.Scrollb._x = _loc5 + 1;
        MC.Scrollb.Ymod = 0;
    } // end else if
    MC.Scrollbar._width = 10;
    MC.Scrollb._width = 10;
    MC.Scrollbar._height = 240;
    MC.Scrollb._height = 10;
    MC.Scrollbar._alpha = 70;
    SwapColor(MC.Scrollbar, "ScrollBar", 2);
    SwapColor(MC.Scrollb, "ScrollBar", 1);
    MC.Scrollbar.Active = false;
    MC.Scrollbar.onEnterFrame = function ()
    {
        if (this.Active)
        {
            this.ScrollTo = Math.round(this._ymouse / 32 * 100);
            this._parent.Ops.SBmod = Math.round(this.ScrollTo * this._parent.Ops.Max / 100) - this._parent.Ops.ScrolledT;
            this._parent.Ops.Roll = true;
        } // end if
    };
    MC.Scrollbar.onPress = function ()
    {
        this.Active = true;
    };
    MC.Scrollbar.onRelease = function ()
    {
        this.Active = false;
    };
    MC.Scrollbar.onReleaseOutside = function ()
    {
        this.Active = false;
    };
    if (GameData[T].length > 12)
    {
        MC.Scrollbar._visible = true;
        MC.Scrollb._visible = true;
    }
    else
    {
        MC.Scrollbar._visible = false;
        MC.Scrollb._visible = false;
    } // end else if
    MC.createEmptyMovieClip("Ops", 10);
    MC.Ops.Roll = false;
    MC.Ops.Scrolled = 0;
    MC.Ops.Type = sT;
    MC.Ops.ScrolledT = 0;
    MC.Ops.Top = 0;
    MC.Ops.SBmod = 0;
    MC.Ops.setMask(MC.DaMask);
    MC.Ops.Max = (GameData[T].length - 12) * 20;
    var _loc7 = (11 - GameData[T].length) * 20;
    if (_loc7 < 0)
    {
        _loc7 = 0;
    } // end if
    for (i = 0; i < 13; i++)
    {
        if (i < GameData[T].length)
        {
            MC.Ops.attachMovie("ObjMenuItem", "ID" + i, i);
            MC.Ops["ID" + i].ID = i;
            MC.Ops["ID" + i].BG._width = _loc5;
            MC.Ops["ID" + i].bName._width = _loc5;
            if (T == "SavedScenes")
            {
                MC.Ops["ID" + i].bName.text = GameData[T][i];
            }
            else if (T == "SceneActs")
            {
                MC.Ops["ID" + i].bName.text = "Part " + (i + 1);
            }
            else
            {
                MC.Ops["ID" + i].bName.text = GameData[T][i][0];
            } // end else if
            MC.Ops["ID" + i].bName._x = 5;
            MC.Ops["ID" + i]._y = i * 20 - 2 + _loc7;
            MC.Ops["ID" + i]._x = 30;
            MC.Ops["ID" + i].attachMovie("TrashIcon", "delB", 10);
            MC.Ops["ID" + i].delB._xscale = 20;
            MC.Ops["ID" + i].delB._yscale = 20;
            MC.Ops["ID" + i].delB._y = 5;
            MC.Ops["ID" + i].delB._x = 200;
            if (T == "SavedScenes")
            {
                MC.Ops["ID" + i].delB.onRelease = function ()
                {
                    Interface.ConfirmBox._x = (Stage.width - Interface.ConfirmBox._width) / 5;
                    Interface.ConfirmBox._y = (Stage.height - Interface.ConfirmBox._height) / 5;
                    Interface.ConfirmBox.ID = this._parent.ID;
                    Interface.ConfirmBox.T = this._parent.BG;
                    SwapColor(this._parent.BG, "Buttons", 1);
                    Interface.ConfirmBox.D.text = "Are you sure you want to delete " + GameData.SavedScenes[this._parent.ID] + "?";
                    OpenMenu(4, Interface.ConfirmBox);
                    Interface.ConfirmBox.OK.onRelease = function ()
                    {
                        CloseMenus(1);
                        delete _root.GameData.SavedSceneData[GameData.SavedScenes[this._parent.ID]];
                        _root.GameData.SavedScenes.splice(this._parent.ID, 1);
                        makeListMenu(Interface.SavedSceneMenu, "SavedScenes", 100, 100);
                        PositionMenu(Interface.SavedSceneMenu, "C", "C", 117, -238, Interface.MainMenu, Interface.MainMenu);
                    };
                    Interface.ConfirmBox.Cancel.onRelease = function ()
                    {
                        CloseMenus(4);
                        SwapColor(this._parent.T, "Buttons", 0);
                    };
                };
            }
            else if (T == "SceneActs")
            {
                MC.Ops["ID" + i].attachMovie("ActArrow", "mUp", 22);
                MC.Ops["ID" + i].mUp._xscale = 20;
                MC.Ops["ID" + i].mUp._yscale = 20;
                MC.Ops["ID" + i].mUp._y = 5;
                MC.Ops["ID" + i].mUp._x = 168;
                MC.Ops["ID" + i].mUp.onRelease = function ()
                {
                    var _loc3 = _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID]];
                    _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID]] = _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID - 1]];
                    _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID - 1]] = _loc3;
                    if (GameData.CurrentScene.CurrentAct == this._parent.ID || GameData.CurrentScene.CurrentAct == this._parent.ID - 1)
                    {
                        GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Name, GameData.CurrentScene.CurrentAct);
                    } // end if
                    Sys("Parts " + (this._parent.ID + 1) + " and " + this._parent.ID + " switched.", "Whoosh");
                };
                MC.Ops["ID" + i].attachMovie("ActArrow", "mDown", 33);
                MC.Ops["ID" + i].mDown._xscale = 20;
                MC.Ops["ID" + i].mDown._yscale = -20;
                MC.Ops["ID" + i].mDown._y = 16;
                MC.Ops["ID" + i].mDown._x = 182;
                MC.Ops["ID" + i].mDown.onRelease = function ()
                {
                    var _loc3 = _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID]];
                    _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID]] = _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID + 1]];
                    _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID + 1]] = _loc3;
                    if (GameData.CurrentScene.CurrentAct == this._parent.ID || GameData.CurrentScene.CurrentAct == this._parent.ID + 1)
                    {
                        GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Name, GameData.CurrentScene.CurrentAct);
                    } // end if
                    Sys("Parts " + (this._parent.ID + 1) + " and " + (this._parent.ID + 2) + " switched.", "Whoosh");
                };
                if (i == 0)
                {
                    MC.Ops["ID" + i].mUp._visible = false;
                }
                else if (i == _root.GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.length - 1)
                {
                    MC.Ops["ID" + i].mDown._visible = false;
                } // end else if
                MC.Ops["ID" + i].delB.onRelease = function ()
                {
                    Sys("Part " + (this._parent.ID + 1) + " Deleted.", "Death");
                    delete _root.GameData.SavedSceneData[GameData.CurrentScene.Name][GameData.SceneActs[this._parent.ID]];
                    _root.GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.splice(this._parent.ID, 1);
                    if (GameData.CurrentScene.CurrentAct > this._parent.ID)
                    {
                        --GameData.CurrentScene.CurrentAct;
                        Interface.SceneFrame.bName.text = GameData.CurrentScene.Name + " : Part " + (GameData.CurrentScene.CurrentAct + 1);
                    }
                    else if (GameData.CurrentScene.CurrentAct == this._parent.ID)
                    {
                        GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Name, --GameData.CurrentScene.CurrentAct);
                    } // end else if
                    RefreshActList();
                };
            }
            else
            {
                MC.Ops["ID" + i].delB.onRelease = function ()
                {
                    Interface.ConfirmBox._x = (Stage.width - Interface.ConfirmBox._width) / 5;
                    Interface.ConfirmBox._y = (Stage.height - Interface.ConfirmBox._height) / 5;
                    Interface.ConfirmBox.ID = this._parent.ID;
                    Interface.ConfirmBox.T = this._parent.BG;
                    SwapColor(this._parent.BG, "Buttons", 1);
                    Interface.ConfirmBox.D.text = "Are you sure you want to delete " + GameData.SavedChars[this._parent.ID][0] + "?";
                    OpenMenu(4, Interface.ConfirmBox);
                    Interface.ConfirmBox.OK.onRelease = function ()
                    {
                        Sys(GameData.SavedChars[this._parent.ID][0] + " Deleted.", "Death");
                        CloseMenus(1);
                        _root.GameData.SavedChars.splice(this._parent.ID, 1);
                        makeListMenu(Interface.SavedCharMenu, "SavedChars", 100, 100);
                        PositionMenu(Interface.SavedCharMenu, "C", "C", 117, -238, Interface.MainMenu, Interface.MainMenu);
                    };
                    Interface.ConfirmBox.Cancel.onRelease = function ()
                    {
                        CloseMenus(4);
                        SwapColor(this._parent.T, "Buttons", 0);
                    };
                };
            } // end else if
            SwapColor(MC.BG, "Buttons", 0);
            MC.BG._alpha = GameData.Buttons.Opacity;
            var _loc4 = new TextFormat();
            _loc4.color = GameData.Palette.Buttons[3];
            MC.bName.setTextFormat(_loc4);
            MC.Ops["ID" + i].BG.onRollOver = function ()
            {
                this._parent.Roll = true;
                SwapColor(this, "Buttons", 1);
            };
            MC.Ops["ID" + i].BG.onRollOut = function ()
            {
                this._parent.Roll = false;
                SwapColor(this, "Buttons", 0);
            };
            MC.Ops["ID" + i].BG.onPress = function ()
            {
                SwapColor(this, "Buttons", 2);
            };
            MC.Ops["ID" + i].BG.onReleaseOutside = function ()
            {
                SwapColor(this, "Buttons", 0);
            };
            if (T == "SavedChars")
            {
                MC.Ops["ID" + i].BG.onRelease = function ()
                {
                    CloseMenus(1);
                    makeChar(GameData.SavedChars[this._parent.ID][1]);
                    SwapColor(this, "Buttons", 1);
                };
                continue;
            } // end if
            if (T == "SceneActs")
            {
                MC.Ops["ID" + i].BG.onRelease = function ()
                {
                    CloseMenus(1);
                    GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Name, this._parent.ID);
                    SwapColor(this, "Buttons", 1);
                };
                continue;
            } // end if
            if (T == "SavedScenes")
            {
                MC.Ops["ID" + i].BG.onRelease = function ()
                {
                    CloseMenus(1);
                    GameData.Menus.Functions.LoadScene(this, GameData.SavedScenes[this._parent.ID], 0);
                    SwapColor(this, "Buttons", 1);
                };
            } // end if
        } // end if
    } // end of for
    MC.Ops.onEnterFrame = function ()
    {
        if (this.Roll)
        {
            if (GameData.Settings.AutoScrollMenu.Check)
            {
                this.ScrollRate = Math.round((_root._ymouse - (120 + this._parent.SMod) * (Interface._yscale / 100) - this._parent._y) / GameData.MSRate);
            }
            else
            {
                this.ScrollRate = 0;
            } // end else if
            if (this.SBmod != 0)
            {
                this.ScrollRate = this.ScrollRate + this.SBmod;
                this.SBmod = 0;
                this.Roll = false;
            } // end if
            if (Key.isDown(16))
            {
                this.ScrollRate = this.ScrollRate * 2;
            } // end if
            if (this.ScrolledT + this.ScrollRate < 0)
            {
                this._y = this._y - this.ScrolledT * -1;
                this.Scrolled = this.Scrolled + this.ScrolledT * -1;
                this.ScrolledT = 0;
            }
            else if (this.ScrolledT + this.ScrollRate > this.Max)
            {
                this._y = this._y - (this.Max - this.ScrolledT);
                this.Scrolled = this.Scrolled + (this.Max - this.ScrolledT);
                this.ScrolledT = this.Max;
            }
            else
            {
                this._y = this._y - this.ScrollRate;
                this.Scrolled = this.Scrolled + this.ScrollRate;
                this.ScrolledT = this.ScrolledT + this.ScrollRate;
            } // end else if
            if (this.Scrolled > 20)
            {
                while (this.Scrolled > 20)
                {
                    this["ID" + this.Top]._y = this["ID" + this.Top]._y + 260;
                    this["ID" + this.Top].ID = this["ID" + this.Top].ID + 13;
                    TMFix(this["ID" + this.Top], T);
                    this.Scrolled = this.Scrolled - 20;
                    ++this.Top;
                    if (this.Top == 13)
                    {
                        this.Top = 0;
                    } // end if
                } // end while
            }
            else if (this.Scrolled < 0)
            {
                while (this.Scrolled < 0)
                {
                    --this.Top;
                    if (this.Top < 0)
                    {
                        this.Top = 12;
                    } // end if
                    this["ID" + this.Top]._y = this["ID" + this.Top]._y - 260;
                    this["ID" + this.Top].ID = this["ID" + this.Top].ID - 13;
                    TMFix(this["ID" + this.Top], T);
                    this.Scrolled = this.Scrolled + 20;
                } // end while
            } // end else if
            this._parent.Scrollb._y = Math.round(230 * (this.ScrolledT / this.Max)) + this._parent.Scrollb.Ymod;
        } // end if
    };
    MC._visible = false;
} // End of the function
function makeThumbMenu(MC, T, pT, pX, pY, pS, X, Y, sT)
{
    if (T == "BGs")
    {
        var _loc3 = 250;
    }
    else
    {
        _loc3 = 200;
    } // end else if
    MC.SMod = 0;
    MC.attachMovie("BGBox", "DaMask", 5);
    MC.DaMask._width = _loc3;
    MC.DaMask._height = 240;
    MC.attachMovie("BGBox", "Scrollbar", 6);
    MC.attachMovie("BGBox", "Scrollb", 7);
    if (T == "BGs")
    {
        MC.Scrollbar._x = _loc3 - 20;
        MC.Scrollb._x = _loc3 - 20;
        MC.Scrollbar._y = 50;
        MC.Scrollb._y = 50;
        MC.Scrollb.Ymod = 50;
    }
    else
    {
        MC.Scrollbar._x = _loc3 + 1;
        MC.Scrollb._x = _loc3 + 1;
        MC.Scrollb.Ymod = 0;
    } // end else if
    MC.Scrollbar._width = 10;
    MC.Scrollb._width = 10;
    MC.Scrollbar._height = 240;
    MC.Scrollb._height = 10;
    MC.Scrollbar._alpha = 70;
    SwapColor(MC.Scrollbar, "ScrollBar", 2);
    SwapColor(MC.Scrollb, "ScrollBar", 1);
    MC.Scrollbar.Active = false;
    MC.Scrollbar.onEnterFrame = function ()
    {
        if (this.Active)
        {
            this.ScrollTo = Math.round(this._ymouse / 32 * 100);
            this._parent.Ops.SBmod = Math.round(this.ScrollTo * this._parent.Ops.Max / 100) - this._parent.Ops.ScrolledT;
            this._parent.Ops.Roll = true;
        } // end if
    };
    MC.Scrollbar.onPress = function ()
    {
        this.Active = true;
    };
    MC.Scrollbar.onRelease = function ()
    {
        this.Active = false;
    };
    MC.Scrollbar.onReleaseOutside = function ()
    {
        this.Active = false;
    };
    MC.createEmptyMovieClip("Ops", 10);
    MC.Ops.Roll = false;
    MC.Ops.Scrolled = 0;
    MC.Ops.Type = sT;
    MC.Ops.ScrolledT = 0;
    MC.Ops.Top = 0;
    MC.Ops.SBmod = 0;
    if (GameData[T])
    {
        MC.Ops.Max = (GameData[T].length - 12) * 20;
    }
    else
    {
        MC.Ops.Max = (GameData.Parts[T].length - 12) * 20;
    } // end else if
    MC.Ops.setMask(MC.DaMask);
    for (i = 0; i < 13; i++)
    {
        MC.Ops.attachMovie("ObjMenuItem", "ID" + i, i);
        MC.Ops["ID" + i].ID = i;
        MC.Ops["ID" + i].BG._width = _loc3;
        MC.Ops["ID" + i].bName._width = _loc3;
        MC.Ops["ID" + i]._y = i * 20 - 2;
        MC.Ops["ID" + i]._x = 30;
        MC.Ops["ID" + i].pX = pX;
        MC.Ops["ID" + i].pY = pY;
        MC.Ops["ID" + i].pS = pS;
        MC.Ops["ID" + i].attachMovie(pT, "preview", 10);
        if (T == "Eyes")
        {
            MC.Ops["ID" + i].attachMovie("Eye2", "preview2", 9);
        }
        else if (T == "Hair")
        {
            MC.Ops["ID" + i].attachMovie("Hair2", "preview2", 11);
        } // end else if
        TMFix(MC.Ops["ID" + i], T);
        setButtonStyle(MC.Ops["ID" + i]);
        MC.Ops["ID" + i].onRollOver = function ()
        {
            MC.Ops.Roll = true;
            SwapColor(this.BG, "Buttons", 1);
        };
        MC.Ops["ID" + i].onRollOut = function ()
        {
            MC.Ops.Roll = false;
            SwapColor(this.BG, "Buttons", 0);
        };
        if (T == "BGs")
        {
            MC.Ops["ID" + i].onRelease = function ()
            {
                SwapBG(this.ID);
                SwapColor(this.BG, "Buttons", 1);
            };
            continue;
        } // end if
        if (T == "PresetList")
        {
            MC.Ops["ID" + i].onRelease = function ()
            {
                makeChar(GameData.PresetList[this.ID]);
                SwapColor(this.BG, "Buttons", 1);
            };
            continue;
        } // end if
        if (T == "ObjectList")
        {
            MC.Ops["ID" + i].onRelease = function ()
            {
                makeObject(GameData.ObjectList[this.ID][1]);
                SwapColor(this.BG, "Buttons", 1);
            };
            continue;
        } // end if
        MC.Ops["ID" + i].onRelease = function ()
        {
            RootPartSwap(GameData.Target[this._parent.Type], T, this.ID);
            SwapColor(this.BG, "Buttons", 1);
        };
    } // end of for
    MC.Ops.onEnterFrame = function ()
    {
        if (this.Roll)
        {
            if (GameData.Settings.AutoScrollMenu.Check)
            {
                this.ScrollRate = Math.round((_root._ymouse - (120 + this._parent.SMod) * (Interface._yscale / 100) - this._parent._y) / GameData.MSRate);
            }
            else
            {
                this.ScrollRate = 0;
            } // end else if
            if (this.SBmod != 0)
            {
                this.ScrollRate = this.ScrollRate + this.SBmod;
                this.SBmod = 0;
                this.Roll = false;
            } // end if
            if (Key.isDown(16))
            {
                this.ScrollRate = this.ScrollRate * 2;
            } // end if
            if (this.ScrolledT + this.ScrollRate < 0)
            {
                this._y = this._y - this.ScrolledT * -1;
                this.Scrolled = this.Scrolled + this.ScrolledT * -1;
                this.ScrolledT = 0;
            }
            else if (this.ScrolledT + this.ScrollRate > this.Max)
            {
                this._y = this._y - (this.Max - this.ScrolledT);
                this.Scrolled = this.Scrolled + (this.Max - this.ScrolledT);
                this.ScrolledT = this.Max;
            }
            else
            {
                this._y = this._y - this.ScrollRate;
                this.Scrolled = this.Scrolled + this.ScrollRate;
                this.ScrolledT = this.ScrolledT + this.ScrollRate;
            } // end else if
            if (this.Scrolled > 20)
            {
                while (this.Scrolled > 20)
                {
                    this["ID" + this.Top]._y = this["ID" + this.Top]._y + 260;
                    this["ID" + this.Top].ID = this["ID" + this.Top].ID + 13;
                    TMFix(this["ID" + this.Top], T);
                    this.Scrolled = this.Scrolled - 20;
                    ++this.Top;
                    if (this.Top == 13)
                    {
                        this.Top = 0;
                    } // end if
                } // end while
            }
            else if (this.Scrolled < 0)
            {
                while (this.Scrolled < 0)
                {
                    --this.Top;
                    if (this.Top < 0)
                    {
                        this.Top = 12;
                    } // end if
                    this["ID" + this.Top]._y = this["ID" + this.Top]._y - 260;
                    this["ID" + this.Top].ID = this["ID" + this.Top].ID - 13;
                    TMFix(this["ID" + this.Top], T);
                    this.Scrolled = this.Scrolled + 20;
                } // end while
            } // end else if
            this._parent.Scrollb._y = Math.round(230 * (this.ScrolledT / this.Max)) + this._parent.Scrollb.Ymod;
        } // end if
    };
    if (MC._name == "BGMenu")
    {
        PositionMenu(MC, "C", "C", X, Y, Interface.MainMenu, Interface.MainMenu);
    }
    else
    {
        PositionMenu(MC, "C", "C", X, Y, Interface.TargetFrame, Interface.TargetFrame);
    } // end else if
    MC._visible = false;
} // End of the function
function TMFix(MC, T)
{
    if (GameData.Parts[T])
    {
        MC.preview._x = MC.pX + GameData.Parts[T][MC.ID][2];
        MC.preview._y = MC.pY + GameData.Parts[T][MC.ID][3];
        MC.preview._xscale = MC.pS + GameData.Parts[T][MC.ID][4];
        MC.preview._yscale = MC.pS + GameData.Parts[T][MC.ID][4];
        if (T == "Eyes")
        {
            MC.preview2._x = MC.pX + GameData.Parts[T][MC.ID][2] - 10;
            MC.preview2._y = MC.pY + GameData.Parts[T][MC.ID][3] - 40;
            MC.preview2._xscale = MC.pS + GameData.Parts[T][MC.ID][4];
            MC.preview2._yscale = MC.pS + GameData.Parts[T][MC.ID][4];
        }
        else if (T == "Hair")
        {
            MC.preview.eye2._visible = false;
            MC.preview2._x = MC.pX + GameData.Parts[T][MC.ID][2];
            MC.preview2._y = MC.pY + GameData.Parts[T][MC.ID][3];
            MC.preview2._xscale = MC.pS + GameData.Parts[T][MC.ID][4];
            MC.preview2._yscale = MC.pS + GameData.Parts[T][MC.ID][4];
        } // end else if
        MC.swapDepths(MC.ID);
        if (MC.ID < 0 || MC.ID >= GameData.Parts[T].length)
        {
            MC._visible = false;
        }
        else
        {
            MC._visible = true;
            if (GameData.Parts[T][MC.ID] == "none")
            {
                MC.bName.text = "None";
                MC.preview.gotoAndStop(1);
                MC.preview._visible = false;
                MC.preview2._visible = false;
            }
            else
            {
                MC.preview._visible = true;
                if (GameData.Parts[T][MC.ID] == "random")
                {
                    MC.bName.text = "Random";
                    MC.preview.gotoAndPlay(1);
                    if (T == "Hair")
                    {
                        MC.preview.HairColor.gotoAndPlay(1);
                    } // end if
                }
                else
                {
                    MC.bName.text = GameData.Parts[T][MC.ID][0];
                    MC.preview.gotoAndStop(GameData.Parts[T][MC.ID][1]);
                    if (T == "Eyes")
                    {
                        if (GameData.Parts[T][MC.ID][5])
                        {
                            MC.preview2._visible = true;
                            MC.preview2.gotoAndStop(GameData.Parts[T][MC.ID][5]);
                        }
                        else
                        {
                            MC.preview2._visible = false;
                        } // end else if
                    }
                    else if (T == "Hair")
                    {
                        MC.preview.HairColor.gotoAndStop(GameData.Parts[T][MC.ID][1]);
                        ColorPalette(MC.preview.HairColor, "0x" + GameData.Parts[T][MC.ID][6]);
                        if (GameData.Parts[T][MC.ID][5])
                        {
                            MC.preview2._visible = true;
                            MC.preview2.gotoAndStop(GameData.Parts[T][MC.ID][5]);
                            MC.preview2.HairColor.gotoAndStop(GameData.Parts[T][MC.ID][5]);
                            ColorPalette(MC.preview2.HairColor, "0x" + GameData.Parts[T][MC.ID][6]);
                        }
                        else
                        {
                            MC.preview2._visible = false;
                        } // end else if
                    } // end else if
                } // end else if
            } // end else if
        } // end else if
    }
    else
    {
        if (T == "ObjectList")
        {
            MC.preview._x = MC.pX + GameData.ObjectArray[GameData.ObjectList[MC.ID][1]][2];
            MC.preview._y = MC.pY + GameData.ObjectArray[GameData.ObjectList[MC.ID][1]][3];
            MC.preview._xscale = MC.pS + GameData.ObjectArray[GameData.ObjectList[MC.ID][1]][4];
            MC.preview._yscale = MC.pS + GameData.ObjectArray[GameData.ObjectList[MC.ID][1]][4];
        }
        else
        {
            MC.preview._x = MC.pX;
            MC.preview._y = MC.pY;
            MC.preview._xscale = MC.pS;
            MC.preview._yscale = MC.pS;
        } // end else if
        MC.swapDepths(MC.ID);
        if (MC.ID < 0 || MC.ID >= GameData[T].length)
        {
            MC._visible = false;
        }
        else
        {
            MC._visible = true;
            if (T == "SavedScenes")
            {
                MC.bName.text = GameData[T][MC.ID];
            }
            else if (T == "SceneActs")
            {
                MC.bName.text = "Part " + (MC.ID + 1);
                if (MC.ID == 0)
                {
                    MC.mUp._visible = false;
                }
                else
                {
                    MC.mUp._visible = true;
                } // end else if
                if (MC.ID == _root.GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.length - 1)
                {
                    MC.mDown._visible = false;
                }
                else
                {
                    MC.mDown._visible = true;
                } // end else if
            }
            else if (GameData[T][MC.ID] == "none")
            {
                MC.bName.text = "None";
                MC.preview.gotoAndStop(1);
                MC.preview._visible = false;
            }
            else
            {
                MC.preview._visible = true;
                if (T == "PresetList")
                {
                    MC.preview.hair.eye2._visible = false;
                    MC.bName.text = GameData[T][MC.ID];
                    if (GameData.Parts.Hats[GameData.Presets[GameData[T][MC.ID]].hatFrame][1])
                    {
                        MC.preview.hat.gotoAndStop(GameData.Parts.Hats[GameData.Presets[GameData[T][MC.ID]].hatFrame][1]);
                        MC.preview.hat._visible = true;
                    }
                    else
                    {
                        MC.preview.hat._visible = false;
                    } // end else if
                    MC.preview.hair.gotoAndStop(GameData.Parts.Hair[GameData.Presets[GameData[T][MC.ID]].headFrame][1]);
                    MC.preview.hair.HairColor.gotoAndStop(GameData.Parts.Hair[GameData.Presets[GameData[T][MC.ID]].headFrame][1]);
                    if (GameData.Parts.Hair[GameData.Presets[GameData[T][MC.ID]].headFrame][5])
                    {
                        MC.preview.head2.gotoAndStop(GameData.Parts.Hair[GameData.Presets[GameData[T][MC.ID]].headFrame][5]);
                        MC.preview.head2.HairColor.gotoAndStop(GameData.Parts.Hair[GameData.Presets[GameData[T][MC.ID]].headFrame][5]);
                        MC.preview.head2._visible = true;
                    }
                    else
                    {
                        MC.preview.head2._visible = false;
                    } // end else if
                    MC.preview.eyes.gotoAndStop(GameData.Parts.Eyes[GameData.Presets[GameData[T][MC.ID]].eyeFrame][1]);
                    if (GameData.Parts.Mouth[GameData.Presets[GameData[T][MC.ID]].mouthFrame][1])
                    {
                        MC.preview.mouth.gotoAndStop(GameData.Parts.Mouth[GameData.Presets[GameData[T][MC.ID]].mouthFrame][1]);
                        MC.preview.mouth._visible = true;
                    }
                    else
                    {
                        MC.preview.mouth._visible = false;
                    } // end else if
                    if (GameData.Parts.Acc[GameData.Presets[GameData[T][MC.ID]].accFrame][1])
                    {
                        MC.preview.accessory.gotoAndStop(GameData.Parts.Acc[GameData.Presets[GameData[T][MC.ID]].accFrame][1]);
                        MC.preview.accessory._visible = true;
                    }
                    else
                    {
                        MC.preview.accessory._visible = false;
                    } // end else if
                    ColorPalette(MC.preview.hair.HairColor, "0x" + GameData.Parts.Hair[GameData.Presets[GameData[T][MC.ID]].headFrame][6]);
                    ColorPalette(MC.preview.head2.HairColor, "0x" + GameData.Parts.Hair[GameData.Presets[GameData[T][MC.ID]].headFrame][6]);
                }
                else if (GameData[T][MC.ID] == "random")
                {
                    MC.bName.text = "Random";
                    MC.preview.play();
                }
                else if (T == "ObjectList")
                {
                    MC.bName.text = GameData.ObjectList[MC.ID][0];
                    MC.preview.gotoAndStop(GameData.ObjectArray[GameData.ObjectList[MC.ID][1]][1]);
                }
                else
                {
                    MC.bName.text = GameData[T][MC.ID][0];
                    MC.preview.gotoAndStop(GameData[T][MC.ID][1]);
                } // end else if
            } // end else if
        } // end else if
    } // end else if
} // End of the function
function ICenter(MC)
{
    MC._x = 275 - MC._width / 2;
    MC._y = 200 - MC._height / 2;
} // End of the function
function OpenMenu(L, M, S)
{
    if (GameData["L" + L + "Menu"] != M)
    {
        CloseMenus(L);
    } // end if
    GameData["L" + L + "Menu"] = M;
    GameData["L" + L + "MenuS"] = S;
    S.onRollOut = function ()
    {
        SwapColor(this.BG, "Buttons", 2);
    };
    M._visible = true;
} // End of the function
function CloseMenus(L)
{
    while (L <= GameData.Menus.Max)
    {
        if (GameData["L" + L + "Menu"])
        {
            GameData["L" + L + "Menu"]._visible = false;
            SwapColor(GameData["L" + L + "MenuS"].BG, "Buttons", 0);
            GameData["L" + L + "MenuS"].onRollOut = function ()
            {
                SwapColor(this.BG, "Buttons", 0);
            };
        } // end if
        ++L;
    } // end while
} // End of the function
function fixMenuDepths(Mar)
{
    for (i = 0; i < Mar.length; i++)
    {
        GameData.Menus.Targets[Mar[i]].swapDepths(GameData.Menus.DMax - 1 - i);
    } // end of for
} // End of the function
function getRGB(R, G, B)
{
    var _loc1 = new Array();
    var _loc2 = "0x";
    _loc1.push(Math.floor(R / 16));
    _loc1.push(R - Math.floor(R / 16) * 16);
    _loc1.push(Math.floor(G / 16));
    _loc1.push(G - Math.floor(G / 16) * 16);
    _loc1.push(Math.floor(B / 16));
    _loc1.push(B - Math.floor(B / 16) * 16);
    for (i = 0; i < _loc1.length; i++)
    {
        if (_loc1[i] == 10)
        {
            _loc1[i] = "A";
        }
        else if (_loc1[i] == 11)
        {
            _loc1[i] = "B";
        }
        else if (_loc1[i] == 12)
        {
            _loc1[i] = "C";
        }
        else if (_loc1[i] == 13)
        {
            _loc1[i] = "D";
        }
        else if (_loc1[i] == 14)
        {
            _loc1[i] = "E";
        }
        else if (_loc1[i] == 15)
        {
            _loc1[i] = "F";
        } // end else if
        _loc2 = _loc2 + _loc1[i];
    } // end of for
    return (_loc2);
} // End of the function
function toRGB(C)
{
    if (C.toUpperCase() == "A")
    {
        return (10);
    }
    else if (C.toUpperCase() == "B")
    {
        return (11);
    }
    else if (C.toUpperCase() == "C")
    {
        return (12);
    }
    else if (C.toUpperCase() == "D")
    {
        return (13);
    }
    else if (C.toUpperCase() == "E")
    {
        return (14);
    }
    else if (C.toUpperCase() == "F")
    {
        return (15);
    }
    else
    {
        return (Number(C));
    } // end else if
} // End of the function
function getFriction(N)
{
    return (1 - N / 100);
} // End of the function
function setOrbit(MC, A, D)
{
    A = A - 90;
    var _loc1 = A * 3.141593 / 180;
    var _loc3 = D * Math.cos(_loc1);
    var _loc2 = D * Math.sin(_loc1);
    MC._x = _loc3;
    MC._y = _loc2;
} // End of the function
function Propel(MC, A, D)
{
    A = A - 90;
    var _loc1 = A * 3.141593 / 180;
    var _loc3 = D * Math.cos(_loc1);
    var _loc2 = D * Math.sin(_loc1);
    MC.XMov = MC.XMov + _loc3;
    MC.YMov = MC.YMov + _loc2;
} // End of the function
function getDist(MC, X, Y)
{
    if (MC._parent._name == "fusionlab")
    {
        var _loc3 = X - ((MC._parent._x + MC._x) * (bg._xscale / 100) + MC._parent._parent._x);
        var _loc2 = Y - ((MC._parent._y + MC._y) * (bg._yscale / 100) + MC._parent._parent._y);
        return (Math.sqrt(_loc3 * _loc3 + _loc2 * _loc2));
    }
    else
    {
        return (Math.sqrt((X - MC._x) * (X - MC._x) + (Y - MC._y) * (Y - MC._y)));
    } // end else if
} // End of the function
function getMouseAngle(X, Y)
{
    var _loc3 = X - _root._xmouse;
    var _loc2 = Y - _root._ymouse;
    angle = -Math.atan2(_loc3, _loc2) / 0.017453;
    return (angle);
} // End of the function
function getAngle(X, Y, X2, Y2)
{
    var _loc2 = X - X2;
    var _loc1 = Y - Y2;
    angle = -Math.atan2(_loc2, _loc1) / 0.017453;
    return (angle);
} // End of the function
function getDID(N)
{
    for (i = 0; i < GameData.Depths.StageList.length; i++)
    {
        if (GameData.Depths.StageList[i].Name == N)
        {
            var _loc1 = i;
            var _loc2 = true;
        } // end if
    } // end of for
    if (_loc2)
    {
        return (_loc1);
    }
    else
    {
        trace ("Doesn\'t exist in depth array!");
    } // end else if
} // End of the function
function VFlip()
{
    if (GameData.TargetType == "SpeechBubble")
    {
        GameData.Target.Bubble.YFace = GameData.Target.Bubble.YFace * -1;
        GameData.Target.Bubble._yscale = GameData.Target.Bubble._yscale * -1;
    }
    else
    {
        GameData.Target.YFace = GameData.Target.YFace * -1;
        GameData.Target._yscale = GameData.Target._yscale * -1;
    } // end else if
} // End of the function
function HFlip()
{
    if (GameData.TargetType == "SpeechBubble")
    {
        GameData.Target.Bubble.XFace = GameData.Target.Bubble.XFace * -1;
        GameData.Target.Bubble._xscale = GameData.Target.Bubble._xscale * -1;
    }
    else
    {
        GameData.Target.XFace = GameData.Target.XFace * -1;
        GameData.Target._xscale = GameData.Target._xscale * -1;
    } // end else if
} // End of the function
function Scramble(MC)
{
    MC.Spin = random(200) - 100;
    MC.XMov = random(200) - 100;
    MC.YMov = random(200) - 100;
} // End of the function
function screenShot(MC)
{
    var _loc2 = new flash.display.BitmapData(Stage.width, Stage.height, true, 0);
    MC.attachBitmap(_loc2, 10, "auto", true);
    var _loc5 = new flash.geom.Matrix();
    var _loc3 = new flash.geom.Matrix();
    var _loc1 = new flash.geom.Matrix();
    _loc1.scale(bg._xscale / 100, bg._yscale / 100);
    _loc1.translate(bg._x, bg._y);
    var _loc4 = new flash.geom.ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);
    _loc3.concat(_loc1);
    if (GameData.BG != 0)
    {
        _loc2.draw(bg, _loc3, _loc4);
    } // end if
    _loc2.draw(stage, _loc5, _loc4);
} // End of the function
function mimeLook(MC, T)
{
    T.head.gotoAndStop(MC.head._currentframe);
    T.head.eye2._visible = MC.head.eye2._visible;
    T.head.eye2.gotoAndStop(MC.head.eye2._currentframe);
    T.head.HairColor.gotoAndStop(MC.head.HairColor._currentframe);
    if (MC.head.HairColor.RGB)
    {
        ColorPalette(T.head.HairColor, MC.head.HairColor.RGB);
    } // end if
    T.arms.gotoAndStop(MC.arms._currentframe);
    T.legs.gotoAndStop(MC.legs._currentframe);
    T.body.gotoAndStop(MC.body._currentframe);
    T.eyes.gotoAndStop(MC.eyes._currentframe);
    T.hat.gotoAndStop(MC.hat._currentframe);
    T.head2.gotoAndStop(MC.head2._currentframe);
    T.head2.HairColor.gotoAndStop(MC.head2._currentframe);
    if (MC.head.HairColor.RGB)
    {
        ColorPalette(T.head2.HairColor, MC.head.HairColor.RGB);
    } // end if
    T.accessory.gotoAndStop(MC.accessory._currentframe);
    T.item.gotoAndStop(MC.item._currentframe);
    T.wings.gotoAndStop(MC.wings._currentframe);
    T.mouth.gotoAndStop(MC.mouth._currentframe);
    T.hat._visible = MC.hat._visible;
    T.head2._visible = MC.head2._visible;
    T.accessory._visible = MC.accessory._visible;
    T.arms._visible = MC.arms._visible;
    T.legs._visible = MC.legs._visible;
    T.item._visible = MC.item._visible;
    T.wings._visible = MC.wings._visible;
    T.mouth._visible = MC.mouth._visible;
} // End of the function
function makePresetChar(T, P, N, D)
{
    T.attachMovie("Char", N, D);
    T[N].head.gotoAndStop(GameData.Parts.Hair[GameData.Presets[P].headFrame][1]);
    T[N].head.eye2._visible = false;
    T[N].head.HairColor.gotoAndStop(GameData.Parts.Hair[GameData.Presets[P].headFrame][1]);
    T[N].body.gotoAndStop(GameData.Parts.Body[GameData.Presets[P].bodyFrame][1]);
    T[N].arms.gotoAndStop(GameData.Parts.Arms[GameData.Presets[P].armFrame][1]);
    T[N].legs.gotoAndStop(GameData.Parts.Shoes[GameData.Presets[P].shoeFrame][1]);
    T[N].eyes.gotoAndStop(GameData.Parts.Eyes[GameData.Presets[P].eyeFrame][1]);
    if (GameData.Parts.Hair[GameData.Presets[P].headFrame][5])
    {
        T[N].head2.gotoAndStop(GameData.Parts.Hair[GameData.Presets[P].headFrame][5]);
        T[N].head2.HairColor.gotoAndStop(GameData.Parts.Hair[GameData.Presets[P].headFrame][5]);
        T[N].head2._visible = true;
    }
    else
    {
        T[N].head2._visible = false;
    } // end else if
    if (GameData.Parts.Hats[GameData.Presets[P].hatFrame] != "none")
    {
        T[N].hat.gotoAndStop(GameData.Parts.Hats[GameData.Presets[P].hatFrame][1]);
        T[N].hat._visible = true;
    }
    else
    {
        T[N].hat._visible = false;
    } // end else if
    if (GameData.Parts.Mouth[GameData.Presets[P].mouthFrame] != "none")
    {
        T[N].mouth.gotoAndStop(GameData.Parts.Mouth[GameData.Presets[P].mouthFrame][1]);
        T[N].mouth._visible = true;
    }
    else
    {
        T[N].mouth._visible = false;
    } // end else if
    if (GameData.Parts.Acc[GameData.Presets[P].accFrame] != "none")
    {
        T[N].accessory.gotoAndStop(GameData.Parts.Acc[GameData.Presets[P].accFrame][1]);
        T[N].accessory._visible = true;
    }
    else
    {
        T[N].accessory._visible = false;
    } // end else if
    if (GameData.Parts.Back[GameData.Presets[P].wingFrame] != "none")
    {
        T[N].wings.gotoAndStop(GameData.Parts.Back[GameData.Presets[P].wingFrame][1]);
        T[N].wings._visible = true;
    }
    else
    {
        T[N].wings._visible = false;
    } // end else if
    if (GameData.Parts.Items[GameData.Presets[P].itemFrame] != "none")
    {
        T[N].item.gotoAndStop(GameData.Parts.Items[GameData.Presets[P].itemFrame][1]);
        T[N].item._visible = true;
    }
    else
    {
        T[N].item._visible = false;
    } // end else if
} // End of the function
function SetMenu(L, T, S, X, Y)
{
    if (Interface["Level" + L + "Menu"].Type != T || !Interface["Level" + L + "Menu"]._visible)
    {
        CloseMenus(L);
        GameData["L" + L + "Menu"] = Interface["Level" + L + "Menu"];
        GameData["L" + L + "MenuS"] = S;
        SwapColor(S.BG, "Buttons", 2);
        S.onRollOut = function ()
        {
            SwapColor(this.BG, "Buttons", 2);
        };
        Interface["Level" + L + "Menu"]._visible = true;
        Interface["Level" + L + "Menu"].Type = T;
        Interface["Level" + L + "Menu"]._x = S._x + X + GameData.Menus[T].XMod;
        Interface["Level" + L + "Menu"]._y = S._y + Y - GameData.Menus[T].Items.length * 20 + GameData.Menus[T].YMod;
        for (i = 0; i < Interface["Level" + L + "Menu"].Size; i++)
        {
            if (i < GameData.Menus[T].Items.length)
            {
                Interface["Level" + L + "Menu"]["ID" + i]._visible = true;
                Interface["Level" + L + "Menu"]["ID" + i].Action = GameData.Menus[T].Items[i].Action;
                Interface["Level" + L + "Menu"]["ID" + i].bName.text = GameData.Menus[T].Items[i].Name;
                Interface["Level" + L + "Menu"]["ID" + i].bName._width = GameData.Menus[T].Size;
                Interface["Level" + L + "Menu"]["ID" + i].BG._width = GameData.Menus[T].Size;
                continue;
            } // end if
            Interface["Level" + L + "Menu"]["ID" + i]._visible = false;
        } // end of for
    }
    else
    {
        CloseMenus(L);
    } // end else if
} // End of the function
function fixTargetScale(tScale)
{
    GameData[getArray()][GameData.Target._name].Scale = tScale;
    if (GameData.TargetType == "Rain")
    {
        for (d in GameData.Target)
        {
            if (d.substr(0, 4) == "Drop")
            {
                fixDropScale(GameData.Target[d]);
            } // end if
        } // end of for...in
    }
    else if (GameData.TargetType == "SpeechBubble")
    {
        GameData.Target._xscale = tScale;
        GameData.Target._yscale = tScale;
    }
    else
    {
        GameData.Target._xscale = tScale * GameData.Target.XFace;
        GameData.Target._yscale = tScale * GameData.Target.YFace;
    } // end else if
} // End of the function
function Target(MC)
{
    if (!GameData.GameOn)
    {
        if (GameData.Characters[MC._name])
        {
            if (MC == stage["Boxing Chen"].Target)
            {
                resetBoxingChen();
            } // end if
            CloseMenus(1);
            GameData.Target = MC;
            GameData.TargetType = "Character";
            Interface.TargetFrame._visible = true;
            Interface.TargetFrame.bName.text = GameData.Characters[MC._name].Name;
            Interface.TargetFrame.preview.gotoAndStop(1);
            mimeLook(MC, Interface.TargetFrame.preview.char);
            SwapPart(Interface.TargetFrame.preview.char.hair, "Hair", GameData.Characters[MC._name].headFrame);
            Interface.TargetFrame.preview.char.hair.eye2._visible = GameData.Target.head.eye2._visible;
            Interface.TargetFrame.preview.char.hair.eye2.gotoAndStop(GameData.Target.head.eye2._currentframe);
            ColorPalette(Interface.TargetFrame.preview.char.hair.HairColor, MC.head.HairColor.RGB);
            ColorPalette(Interface.TargetFrame.preview.char.head2.HairColor, MC.head.HairColor.RGB);
            Interface.TargetFrame.onRelease = function ()
            {
                SetMenu(1, "CharacterMenu", this, 30, 0);
            };
        }
        else if (GameData.Screenshots[MC._name])
        {
            CloseMenus(1);
            GameData.Target = MC;
            GameData.TargetType = "Screenshot";
            Interface.TargetFrame._visible = true;
            Interface.TargetFrame.bName.text = GameData.Screenshots[MC._name].Name;
            Interface.TargetFrame.preview.gotoAndStop(5);
            Interface.TargetFrame.onRelease = function ()
            {
                SetMenu(1, "SSMenu", this, 30, 0);
            };
        }
        else if (GameData.Objects[MC._name])
        {
            CloseMenus(1);
            GameData.Target = MC;
            GameData.TargetType = "Object";
            Interface.TargetFrame._visible = true;
            Interface.TargetFrame.bName.text = GameData.Objects[MC._name].Name;
            Interface.TargetFrame.preview.gotoAndStop(3);
            Interface.TargetFrame.preview.obj.gotoAndStop(GameData.ObjectArray[GameData.Objects[MC._name].Type][1]);
            Interface.TargetFrame.onRelease = function ()
            {
                SetMenu(1, "ObjectMenu", this, 30, 0);
            };
        }
        else if (GameData.Rain[MC._name])
        {
            CloseMenus(1);
            GameData.Target = MC;
            GameData.TargetType = "Rain";
            Interface.TargetFrame._visible = true;
            Interface.TargetFrame.bName.text = GameData.Rain[MC._name].Name;
            Interface.TargetFrame.preview.gotoAndStop(3);
            Interface.TargetFrame.preview.obj.gotoAndStop(GameData.ObjectArray[GameData.Rain[MC._name].Type][1]);
            Interface.TargetFrame.onRelease = function ()
            {
                SetMenu(1, "RainMenu", this, 30, 0);
            };
        }
        else if (GameData.Clusters[MC._name])
        {
            CloseMenus(1);
            GameData.Target = MC;
            GameData.TargetType = "Cluster";
            Interface.TargetFrame._visible = true;
            Interface.TargetFrame.bName.text = GameData.Clusters[MC._name].Name;
            Interface.TargetFrame.preview.gotoAndStop(3);
            Interface.TargetFrame.preview.obj.gotoAndStop(GameData.ObjectArray[GameData.Clusters[MC._name].Type][1]);
            Interface.TargetFrame.onRelease = function ()
            {
                SetMenu(1, "ClusterMenu", this, 30, 0);
            };
        }
        else if (GameData.Toys[MC._name])
        {
            CloseMenus(1);
            GameData.Target = MC;
            GameData.TargetType = "Toy";
            Interface.TargetFrame._visible = true;
            Interface.TargetFrame.bName.text = MC._name;
            Interface.TargetFrame.preview.gotoAndStop(2);
            Interface.TargetFrame.preview.toy.gotoAndStop(GameData.Toys[MC._name].frame);
            if (GameData.Target._name == "Clone Capsule")
            {
                if (GameData.Toys["Clone Capsule"].Mode == 4)
                {
                    Interface.TargetFrame.preview.toy.lights.play();
                }
                else
                {
                    Interface.TargetFrame.preview.toy.lights.gotoAndStop(GameData.Toys["Clone Capsule"].Mode);
                } // end else if
                if (GameData.Target.char._visible)
                {
                    setCharLook(Interface.TargetFrame.preview.toy.char, GameData.Toys["Clone Capsule"].Char);
                    Interface.TargetFrame.preview.toy.char._visible = true;
                }
                else
                {
                    Interface.TargetFrame.preview.toy.char._visible = false;
                } // end if
            } // end else if
            setMenuListener(Interface.TargetFrame, Interface, 1);
            Interface.TargetFrame.onRelease = function ()
            {
                if (Interface[GameData.Target._name + "Menu"]._visible)
                {
                    CloseMenus(1);
                    SwapColor(this.BG, "Buttons", 1);
                }
                else if (Interface[GameData.Target._name + "EmptyMenu"]._visible)
                {
                    CloseMenus(1);
                    SwapColor(this.BG, "Buttons", 1);
                }
                else
                {
                    if (GameData.Target._name == "Clone Capsule" && !stage["Clone Capsule"].char._visible)
                    {
                        OpenMenu(1, Interface[GameData.Target._name + "EmptyMenu"], this.BG);
                    }
                    else
                    {
                        OpenMenu(1, Interface[GameData.Target._name + "Menu"], this.BG);
                    } // end else if
                    SwapColor(this.BG, "Buttons", 2);
                } // end else if
            };
            Interface.TargetFrame.onRollOut = function ()
            {
                if (Interface[GameData.Target._name + "Menu"]._visible)
                {
                    SwapColor(this.BG, "Buttons", 2);
                }
                else
                {
                    SwapColor(this.BG, "Buttons", 0);
                } // end else if
            };
        }
        else if (GameData.SpeechBubbles[MC._name])
        {
            CloseMenus(1);
            GameData.Target = MC;
            GameData.TargetType = "SpeechBubble";
            Interface.TargetFrame._visible = true;
            Interface.TargetFrame.bName.text = GameData.SpeechBubbles[MC._name].Name;
            Interface.TargetFrame.preview.gotoAndStop(4);
            Interface.TargetFrame.preview.bubble.D.text = MC.D.text;
            Interface.TargetFrame.preview.bubble.Bubble.gotoAndStop(GameData.SpeechBubbles[MC._name].Type);
            Interface.TargetFrame.onRelease = function ()
            {
                SetMenu(1, "BubbleMenu", this, 30, 0);
            };
        }
        else
        {
            GameData.Target = "";
            Interface.TargetFrame._visible = false;
            Interface.TargetFrame._visible = false;
        } // end else if
        if (GameData.Target.Pin)
        {
            Interface.TargetFrame.pin._visible = true;
        }
        else
        {
            Interface.TargetFrame.pin._visible = false;
        } // end else if
        if (GameData.ShowManipulator && GameData.Target && Interface._visible)
        {
            setManipulator();
        }
        else
        {
            Manipulator._visible = false;
        } // end else if
        GameData.DLSelect = GameData.Target.getDepth();
    } // end if
} // End of the function
function SwapPart(T, A, N)
{
    if (GameData.Parts[A][N] == "none")
    {
        T._visible = false;
    }
    else
    {
        T._visible = true;
        if (GameData.Parts[A][N] == "random" || N >= GameData.Parts[A].length)
        {
            N = SwapPart(T, A, random(GameData.Parts[A].length));
        }
        else
        {
            T.gotoAndStop(GameData.Parts[A][N][1]);
            if (A == "Eyes")
            {
                if (GameData.Parts[A][N][5] > 0)
                {
                    T._parent.head.eye2._visible = true;
                    T._parent.head.eye2.gotoAndStop(GameData.Parts[A][N][5]);
                    T._parent.head.eye2.HairColor.gotoAndStop(GameData.Parts[A][N][5]);
                    if (T._parent == GameData.Target)
                    {
                        Interface.TargetFrame.preview.char.hair.eye2.gotoAndStop(GameData.Parts[A][N][5]);
                        Interface.TargetFrame.preview.char.hair.eye2._visible = true;
                    } // end if
                }
                else
                {
                    T._parent.head.eye2._visible = false;
                    if (T._parent == GameData.Target)
                    {
                        Interface.TargetFrame.preview.char.hair.eye2._visible = false;
                    } // end if
                } // end else if
            }
            else if (A == "Hair")
            {
                if (GameData.Settings.KeepColor.Check && T.HairColor.RGB)
                {
                    colorHex = T.HairColor.RGB;
                }
                else
                {
                    colorHex = "0x" + GameData.Parts.Hair[N][6];
                } // end else if
                T.HairColor.gotoAndStop(GameData.Parts[A][N][1]);
                ColorPalette(T.HairColor, colorHex);
                if (GameData.Parts[A][N][5] > 0)
                {
                    T._parent.head2._visible = true;
                    T._parent.head2.gotoAndStop(GameData.Parts[A][N][5]);
                    T._parent.head2.HairColor.gotoAndStop(GameData.Parts[A][N][5]);
                    ColorPalette(T._parent.head2.HairColor, colorHex);
                }
                else
                {
                    T._parent.head2._visible = false;
                } // end else if
                GameData.Characters[T._parent._name].HairColor = colorHex;
            } // end else if
        } // end else if
    } // end else if
    return (N);
} // End of the function
function AddProp(N, T, L)
{
    stage.attachMovie(L, N, GameData.Depths.Max);
    GameData[T][N].Depth = GameData.Depths.Max;
    if (T != "Toys")
    {
        GameData.Depths.StageList.push({Name: N, Type: T, Depth: GameData.Depths.Max++});
        GameData.Depths.StageList.sortOn("Depth", Array.DESCENDING | Array.NUMERIC);
    }
    else
    {
        ++GameData.Depths.Max;
    } // end else if
} // End of the function
function AddClickHandler(MC, T)
{
    if (T == "Character")
    {
        MC.head.onPress = function ()
        {
            if (GameData.Settings.HeadRotates.Check)
            {
                clickCheck(this._parent, "rotate");
            }
            else
            {
                clickCheck(this._parent, "drag");
            } // end else if
        };
        setActionRelease(MC.head);
        MC.body.onPress = function ()
        {
            clickCheck(this._parent, "drag");
        };
        setActionRelease(MC.body);
    }
    else if (T == "SpeechBubble")
    {
        setBubbleClickHandlers(MC);
    }
    else
    {
        MC.onPress = function ()
        {
            clickCheck(this, "drag");
        };
        setActionRelease(MC);
    } // end else if
} // End of the function
function RemoveClickHandler(MC, T)
{
    if (T == "Character")
    {
        delete MC.head.onPress;
        delete MC.head.onRelease;
        delete MC.head.onReleaseOutside;
        delete MC.body.onPress;
        delete MC.body.onRelease;
        delete MC.body.onReleaseOutside;
    }
    else if (T == "SpeechBubble")
    {
        delete MC.Bubble.head.onPress;
        delete MC.Bubble.head.onRelease;
        delete MC.Bubble.head.onReleaseOutside;
        delete MC.Bubble.body.onPress;
        delete MC.Bubble.body.onRelease;
        delete MC.Bubble.body.onReleaseOutside;
    }
    else
    {
        delete MC.onPress;
        delete MC.onRelease;
        delete MC.onReleaseOutside;
    } // end else if
} // End of the function
function makeScreenShot()
{
    var _loc1 = "Snapshot" + GameData.SSID++;
    stage.createEmptyMovieClip(_loc1, GameData.Depths.Max);
    stage[_loc1].createEmptyMovieClip("pic", 10);
    GameData.Depths.StageList.push({Name: _loc1, Type: T, Depth: GameData.Depths.Max++});
    GameData.Depths.StageList.sortOn("Depth", Array.DESCENDING | Array.NUMERIC);
    screenShot(stage[_loc1].pic);
    stage[_loc1].Pin = false;
    stage[_loc1].XFace = 1;
    stage[_loc1].YFace = 1;
    var _loc2 = Math.round(stage[_loc1].pic._width / 2);
    var _loc3 = Math.round(stage[_loc1].pic._height / 2);
    stage[_loc1].pic._x = _loc2 * -1;
    stage[_loc1].pic._y = _loc3 * -1;
    stage[_loc1]._x = _loc2;
    stage[_loc1]._y = _loc3;
    GameData.Screenshots[_loc1] = new Object();
    GameData.Screenshots[_loc1].Name = _loc1;
    GameData.Screenshots[_loc1].Type = T;
    GameData.Screenshots[_loc1].Scale = 100;
    GameData.Screenshots[_loc1].BlurSettings = new Object();
    GameData.Screenshots[_loc1].BlurSettings.X = 30;
    GameData.Screenshots[_loc1].BlurSettings.Y = 30;
    GameData.Screenshots[_loc1].BlurSettings.Q = 5;
    AddClickHandler(stage[_loc1], "Screenshot");
} // End of the function
function smoothImageLoad(imgURL, targetMovie)
{
    var i = 0;
    do
    {
        ++i;
    } while (eval("_root.smoothImageLoadTemp" + i) != undefined)
    tmc = _root.createEmptyMovieClip("smoothImageLoadTemp" + i, _root.getNextHighestDepth());
    tmc.createEmptyMovieClip("ti", tmc.getNextHighestDepth());
    tmc.tm = targetMovie;
    with (tmc)
    {
        tmcl = new MovieClipLoader();
        tmcl.onLoadComplete = function ()
        {
            ti.onEnterFrame = function ()
            {
                pixelData = new flash.display.BitmapData(ti._width, ti._height, true, 0);
                var _loc1 = Math.round(ti._width / 2);
                var _loc2 = Math.round(ti._height / 2);
                pixelData.draw(ti);
                tm.attachBitmap(pixelData, 1, true, true);
                tm._x = _loc1 * -1;
                tm._y = _loc2 * -1;
                tm.smoothImageLoadComplete();
                removeMovieClip(ti._parent);
            };
        };
        tmcl.loadClip(imgURL, tmc.ti);
    } // End of with
} // End of the function
function makeImage(url, imgAttr)
{
    var _loc1 = "Snapshot" + GameData.SSID++;
    stage.createEmptyMovieClip(_loc1, GameData.Depths.Max);
    stage[_loc1].createEmptyMovieClip("pic", 10);
    GameData.Depths.StageList.push({Name: _loc1, Type: "Image", Depth: GameData.Depths.Max++});
    GameData.Depths.StageList.sortOn("Depth", Array.DESCENDING | Array.NUMERIC);
    smoothImageLoad(url, stage[_loc1].pic);
    GameData.Screenshots[_loc1] = new Object();
    GameData.Screenshots[_loc1].Type = "Image";
    GameData.Screenshots[_loc1].Imported = true;
    GameData.Screenshots[_loc1].Src = url;
    GameData.Screenshots[_loc1].BlurSettings = new Object();
    if (imgAttr)
    {
        if (GameData.Settings.PinnedLoading.Check)
        {
            stage[_loc1].Pin = true;
        } // end if
        stage[_loc1]._x = imgAttr.X;
        stage[_loc1]._y = imgAttr.Y;
        stage[_loc1].XFace = imgAttr.XFace;
        stage[_loc1].YFace = imgAttr.YFace;
        GameData.Screenshots[_loc1].Name = imgAttr.Name;
        GameData.Screenshots[_loc1].Scale = imgAttr.Scale;
        stage[_loc1]._xscale = imgAttr.Scale * imgAttr.XFace;
        stage[_loc1]._yscale = imgAttr.Scale * imgAttr.YFace;
        stage[_loc1]._rotation = imgAttr.Rotation;
        GameData.Screenshots[_loc1].ColorMode = imgAttr.colorMode;
        GameData.Screenshots[_loc1].Blur = imgAttr.Blur;
        GameData.Screenshots[_loc1].BlurSettings.X = imgAttr.BlurX;
        GameData.Screenshots[_loc1].BlurSettings.Y = imgAttr.BlurY;
        GameData.Screenshots[_loc1].BlurSettings.Q = imgAttr.BlurQ;
        applyFilters(_loc1);
    }
    else
    {
        stage[_loc1].Pin = false;
        stage[_loc1]._x = xM;
        stage[_loc1]._y = yM;
        stage[_loc1].XFace = 1;
        stage[_loc1].YFace = 1;
        GameData.Screenshots[_loc1].Name = _loc1;
        GameData.Screenshots[_loc1].Scale = 100;
        GameData.Screenshots[_loc1].ColorMode = "normal";
        GameData.Screenshots[_loc1].Blur = false;
        GameData.Screenshots[_loc1].BlurSettings.X = 30;
        GameData.Screenshots[_loc1].BlurSettings.Y = 30;
        GameData.Screenshots[_loc1].BlurSettings.Q = 5;
    } // end else if
    AddClickHandler(stage[_loc1], "Screenshot");
} // End of the function
function makeRain(T, Attr)
{
    var _loc1 = "Rain" + GameData.RainID++;
    stage.createEmptyMovieClip(_loc1, GameData.Depths.Max);
    GameData.Depths.StageList.push({Name: _loc1, Type: "Rain", Depth: GameData.Depths.Max++});
    GameData.Depths.StageList.sortOn("Depth", Array.DESCENDING | Array.NUMERIC);
    if (Attr)
    {
        stage[_loc1]._x = Attr.X;
        stage[_loc1]._y = Attr.Y;
        if (GameData.Settings.PinnedLoading.Check)
        {
            stage[_loc1].Pin = true;
        }
        else
        {
            stage[_loc1].Pin = false;
        } // end else if
        stage[_loc1].XFace = Attr.XFace;
        stage[_loc1].YFace = Attr.YFace;
    }
    else
    {
        stage[_loc1]._x = Stage.width / 2;
        stage[_loc1]._y = Stage.height / 2;
        stage[_loc1].Pin = false;
        stage[_loc1].XFace = 1;
        stage[_loc1].YFace = 1;
    } // end else if
    stage[_loc1].attachMovie("BGBox", "BG", -10);
    stage[_loc1].BG._x = -1 * (Stage.width / 2);
    stage[_loc1].BG._y = -1 * (Stage.height / 2);
    stage[_loc1].BG._width = Stage.width;
    stage[_loc1].BG._height = Stage.height;
    stage[_loc1].BG._alpha = 0;
    GameData.Rain[_loc1] = new Object();
    GameData.Rain[_loc1].Type = T;
    if (Attr)
    {
        GameData.Rain[_loc1].Name = Attr.Name;
        GameData.Rain[_loc1].Scale = Attr.Scale;
        stage[_loc1]._xscale = Attr.Scale * Attr.XFace;
        stage[_loc1]._yscale = Attr.Scale * Attr.YFace;
        GameData.Rain[_loc1].Qty = Attr.Qty;
        GameData.Rain[_loc1].Qt = 0;
        GameData.Rain[_loc1].Rmin = Attr.Rmin;
        GameData.Rain[_loc1].Rmax = Attr.Rmax;
        GameData.Rain[_loc1].Xmin = Attr.Xmin;
        GameData.Rain[_loc1].Xmax = Attr.Xmax;
        GameData.Rain[_loc1].Ymin = Attr.Ymin;
        GameData.Rain[_loc1].Ymax = Attr.Ymax;
        GameData.Rain[_loc1].Px = Attr.Px;
        GameData.Rain[_loc1].Py = Attr.Py;
        GameData.Rain[_loc1].cFrame = Attr.cFrame;
    }
    else
    {
        GameData.Rain[_loc1].cFrame = GameData.Target.Obj._currentframe;
        GameData.Rain[_loc1].Name = _loc1;
        GameData.Rain[_loc1].Scale = 100;
        GameData.Rain[_loc1].Qty = 7;
        GameData.Rain[_loc1].Qt = 0;
        GameData.Rain[_loc1].Rmin = 10;
        GameData.Rain[_loc1].Rmax = 30;
        GameData.Rain[_loc1].Xmin = 5;
        GameData.Rain[_loc1].Xmax = 15;
        GameData.Rain[_loc1].Ymin = 15;
        GameData.Rain[_loc1].Ymax = 20;
        GameData.Rain[_loc1].Px = -1 * (Stage.width / 2);
        GameData.Rain[_loc1].Py = -1 * (Stage.height / 2);
    } // end else if
    GameData.Rain[_loc1].mFrame = GameData.Target.Obj._totalframes;
    fixRain(stage[_loc1]);
    AddClickHandler(stage[_loc1], "Rain");
    return (stage[_loc1]);
} // End of the function
function fixRain(mc)
{
    for (q = GameData.Rain[mc._name].Qty; q < GameData.Rain[mc._name].Qt; q++)
    {
        mc["Drop" + q].removeMovieClip();
    } // end of for
    for (i = 0; i < GameData.Rain[mc._name].Qty; i++)
    {
        if (!mc["Drop" + i])
        {
            mc.attachMovie("Objects", "Drop" + i, i);
            mc["Drop" + i].gotoAndStop(GameData.ObjectArray[GameData.Rain[mc._name].Type][1]);
        } // end if
        SetDrop(mc["Drop" + i]);
        mc["Drop" + i].Obj.gotoAndPlay(GameData.Rain[mc._name].cFrame);
        if (i < GameData.Rain[mc._name].Qty / 4)
        {
            mc["Drop" + i].Smod = -50;
        }
        else if (i < GameData.Rain[mc._name].Qty / 5 * 4)
        {
            mc["Drop" + i].Smod = -25;
        }
        else
        {
            mc["Drop" + i].Smod = 0;
        } // end else if
        fixDropScale(mc["Drop" + i]);
        GameData.Rain[mc._name].Qt = i;
    } // end of for
} // End of the function
function fixDropScale(mcd)
{
    mcd._xscale = GameData.Rain[mcd._parent._name].Scale + mcd.Smod;
    mcd._yscale = GameData.Rain[mcd._parent._name].Scale + mcd.Smod;
} // End of the function
function SetDrop(mcd)
{
    mcd._rotation = 0;
    mcd._y = -50 + GameData.Rain[mcd._parent._name].Py;
    mcd._x = random(Stage.width + 100) - 50 + GameData.Rain[mcd._parent._name].Px;
    mcd.Rot = random(GameData.Rain[mcd._parent._name].Rmax - GameData.Rain[mcd._parent._name].Rmin) + GameData.Rain[mcd._parent._name].Rmin;
    mcd.XMov = random(GameData.Rain[mcd._parent._name].Xmax - GameData.Rain[mcd._parent._name].Xmin) + GameData.Rain[mcd._parent._name].Xmin;
    mcd.YMov = random(GameData.Rain[mcd._parent._name].Ymax - GameData.Rain[mcd._parent._name].Ymin) + GameData.Rain[mcd._parent._name].Ymin;
} // End of the function
function makeCluster(T, Attr)
{
    var _loc1 = "Cluster" + GameData.ClusterID++;
    stage.createEmptyMovieClip(_loc1, GameData.Depths.Max);
    GameData.Depths.StageList.push({Name: _loc1, Type: "Clusters", Depth: GameData.Depths.Max++});
    GameData.Depths.StageList.sortOn("Depth", Array.DESCENDING | Array.NUMERIC);
    if (Attr)
    {
        stage[_loc1]._x = Attr.X;
        stage[_loc1]._y = Attr.Y;
        if (GameData.Settings.PinnedLoading.Check)
        {
            stage[_loc1].Pin = true;
        }
        else
        {
            stage[_loc1].Pin = false;
        } // end else if
        stage[_loc1].XFace = Attr.XFace;
        stage[_loc1].YFace = Attr.YFace;
    }
    else
    {
        stage[_loc1]._x = Stage.width / 2;
        stage[_loc1]._y = Stage.height / 2;
        stage[_loc1].Pin = false;
        stage[_loc1].XFace = 1;
        stage[_loc1].YFace = 1;
    } // end else if
    GameData.Clusters[_loc1] = new Object();
    GameData.Clusters[_loc1].Type = T;
    if (Attr)
    {
        GameData.Clusters[_loc1].cFrame = Attr.cFrame;
        GameData.Clusters[_loc1].Name = Attr.Name;
        GameData.Clusters[_loc1].Rows = Attr.Rows;
        GameData.Clusters[_loc1].Cols = Attr.Cols;
        GameData.Clusters[_loc1].Spread = Attr.Spread;
        GameData.Clusters[_loc1].Distance = Attr.Dist;
        GameData.Clusters[_loc1].StartDist = Attr.SDist;
        GameData.Clusters[_loc1].Px = Attr.Px;
        GameData.Clusters[_loc1].Py = Attr.Py;
        GameData.Clusters[_loc1].Dir = Attr.Dir;
        GameData.Clusters[_loc1].Scale = Attr.Scale;
        stage[_loc1]._xscale = Attr.Scale * Attr.XFace;
        stage[_loc1]._yscale = Attr.Scale * Attr.YFace;
        GameData.Clusters[_loc1].Spiral = Attr.Spiral;
        GameData.Clusters[_loc1].RMod = Attr.RMod;
        stage[_loc1]._rotation = Attr.Rotation;
    }
    else
    {
        GameData.Clusters[_loc1].cFrame = GameData.Target.Obj._currentframe;
        GameData.Clusters[_loc1].Name = _loc1;
        GameData.Clusters[_loc1].Rows = 3;
        GameData.Clusters[_loc1].Cols = 6;
        GameData.Clusters[_loc1].Spread = 360;
        GameData.Clusters[_loc1].Distance = 200;
        GameData.Clusters[_loc1].StartDist = 0;
        GameData.Clusters[_loc1].Px = 0;
        GameData.Clusters[_loc1].Py = 0;
        GameData.Clusters[_loc1].Dir = "Out";
        GameData.Clusters[_loc1].Scale = 100;
        GameData.Clusters[_loc1].Spiral = 10;
        GameData.Clusters[_loc1].RMod = 10;
    } // end else if
    GameData.Clusters[_loc1].mFrame = GameData.Target.Obj._totalframes;
    GameData.Clusters[_loc1].Qt = GameData.Clusters[_loc1].Rows * GameData.Clusters[_loc1].Cols;
    fixCluster(stage[_loc1]);
    AddClickHandler(stage[_loc1], "Cluster");
    return (stage[_loc1]);
} // End of the function
function fixCluster(MC)
{
    var _loc3 = GameData.Clusters[MC._name].Rows * GameData.Clusters[MC._name].Cols;
    var _loc2 = 0;
    var _loc5 = GameData.Clusters[MC._name].Spread / GameData.Clusters[MC._name].Cols;
    var _loc4 = (GameData.Clusters[MC._name].Distance - GameData.Clusters[MC._name].StartDist) / GameData.Clusters[MC._name].Rows;
    var _loc6 = -1 * (GameData.Clusters[MC._name].Spread / 2);
    for (q = _loc3 - 1; q < GameData.Clusters[MC._name].Qt; q++)
    {
        MC["Shot" + q].removeMovieClip();
    } // end of for
    for (i = 0; i < GameData.Clusters[MC._name].Rows; i++)
    {
        for (j = 0; j < GameData.Clusters[MC._name].Cols; j++)
        {
            if (_loc2 < _loc3)
            {
                MC.attachMovie("Objects", "Shot" + _loc2, _loc2);
                MC["Shot" + _loc2].gotoAndStop(GameData.ObjectArray[GameData.Clusters[MC._name].Type][1]);
                MC["Shot" + _loc2].Obj.gotoAndPlay(GameData.Clusters[MC._name].cFrame);
                MC["Shot" + _loc2].Angle = _loc6 - (j + 1) * _loc5 + i * GameData.Clusters[MC._name].Spiral;
                MC["Shot" + _loc2].Dist = (i + 1) * _loc4 + GameData.Clusters[MC._name].StartDist;
                setOrbit(MC["Shot" + _loc2], MC["Shot" + _loc2].Angle, MC["Shot" + _loc2].Dist);
                ++_loc2;
            } // end if
        } // end of for
    } // end of for
    GameData.Clusters[MC._name].Qt = _loc2;
    fixClusterShotAngle(MC, _loc3);
} // End of the function
function fixClusterShotAngle(MC, Qmax)
{
    var _loc5 = GameData.Clusters[MC._name].Px;
    var _loc4 = GameData.Clusters[MC._name].Py;
    if (GameData.Clusters[MC._name].Dir == "Linear")
    {
        for (q = 0; q < Qmax; q++)
        {
            MC["Shot" + q]._rotation = getAngle(MC._x, MC._y, MC._x + _loc5, MC._y + _loc4) + GameData.Clusters[MC._name].RMod - MC["Shot" + q]._parent._rotation;
        } // end of for
    }
    else if (GameData.Clusters[MC._name].Dir == "Random")
    {
        for (q = 0; q < Qmax; q++)
        {
            MC["Shot" + q]._rotation = random(360);
        } // end of for
    }
    else
    {
        if (GameData.Clusters[MC._name].Dir == "Out")
        {
            var _loc6 = 180;
        }
        else
        {
            _loc6 = 0;
        } // end else if
        for (q = 0; q < Qmax; q++)
        {
            var _loc2 = getCSTruePos(MC["Shot" + q]);
            MC["Shot" + q]._rotation = getAngle(_loc2.X, _loc2.Y, _loc5, _loc4) + _loc6 + GameData.Clusters[MC._name].RMod - MC["Shot" + q]._parent._rotation;
        } // end of for
    } // end else if
} // End of the function
function getCSTruePos(MCb)
{
    var _loc6 = MCb.Angle - 90 + MCb._parent._rotation;
    var _loc2 = _loc6 * 3.141593 / 180;
    var _loc5 = MCb.Dist * Math.cos(_loc2);
    var _loc4 = MCb.Dist * Math.sin(_loc2);
    var _loc1 = new Object();
    _loc1.X = _loc5;
    _loc1.Y = _loc4;
    return (_loc1);
} // End of the function
function makeObject(T, Attr)
{
    var _loc1 = "Object" + GameData.ObjID++;
    AddProp(_loc1, "Objects", "Objects");
    stage[_loc1].gotoAndStop(GameData.ObjectArray[T][1]);
    GameData.Objects[_loc1] = new Object();
    GameData.Objects[_loc1].Type = T;
    if (Attr)
    {
        stage[_loc1]._x = Attr.X;
        stage[_loc1]._y = Attr.Y;
        stage[_loc1]._rotation = Attr.Rotation;
        if (GameData.Settings.PinnedLoading.Check)
        {
            stage[_loc1].Pin = true;
        }
        else
        {
            stage[_loc1].Pin = false;
        } // end else if
        stage[_loc1].XFace = Attr.XFace;
        stage[_loc1].YFace = Attr.YFace;
        GameData.Objects[_loc1].Name = Attr.Name;
        GameData.Objects[_loc1].Scale = Attr.Scale;
        stage[_loc1]._xscale = Attr.XFace * Attr.Scale;
        stage[_loc1]._yscale = Attr.YFace * Attr.Scale;
        stage[_loc1].Obj.gotoAndPlay(Attr.cFrame);
        GameData.Objects[_loc1].cframe = Attr.cFrame;
    }
    else
    {
        stage[_loc1]._x = Stage.width / 2;
        stage[_loc1]._y = Stage.height / 2;
        stage[_loc1].Pin = false;
        stage[_loc1].XFace = 1;
        stage[_loc1].YFace = 1;
        GameData.Objects[_loc1].Name = _loc1;
        GameData.Objects[_loc1].Scale = 100;
        if (GameData.ObjectArray[T][0] == "Fire")
        {
            playSound("Boom");
        } // end if
    } // end else if
    AddClickHandler(stage[_loc1], "Object");
} // End of the function
function makeChar(T)
{
    var _loc1 = "Char" + GameData.CharID++;
    AddProp(_loc1, "Characters", "Char");
    stage[_loc1].Spin = 0;
    for (var _loc2 = 0; _loc2 < GameData.SavedChars.length; ++_loc2)
    {
        if (T.toLowerCase() == GameData.SavedChars[_loc2][0].toLowerCase())
        {
            T = GameData.SavedChars[_loc2][1];
        } // end if
    } // end of for
    var _loc5 = T.split("-");
    if (_loc5.length > 1 && _loc5[0].toLowerCase() == "dna")
    {
        _loc5.shift();
        var _loc15 = _loc5.join("-");
        var _loc4 = _loc15.split(":");
        var _loc16 = _loc4[1];
        if (_loc4[2])
        {
            var _loc6 = _loc4[2];
        }
        else
        {
            _loc6 = 100;
        } // end else if
        var _loc9 = _loc4[3];
        var _loc7 = _loc4[4];
        if (_loc4[0] < 3.230000)
        {
            var _loc10 = Number(_loc4[5]) + 1;
            var _loc17 = GameData.Parts.Hair[_loc7][6];
        }
        else
        {
            _loc10 = _loc4[5];
            _loc17 = _loc4[13];
        } // end else if
        if (_loc4[0] < 3.200000)
        {
            var _loc8 = Number(_loc4[6]) + 1;
            var _loc11 = Number(_loc4[7]) + 1;
        }
        else
        {
            _loc8 = _loc4[6];
            _loc11 = _loc4[7];
        } // end else if
        var _loc20 = _loc4[8];
        var _loc14 = _loc4[9];
        var _loc19 = _loc4[10];
        var _loc18 = _loc4[11];
        var _loc21 = _loc4[12];
        var _loc12 = stage["Clone Capsule"]._x;
        var _loc13 = stage["Clone Capsule"]._y;
        if (!_loc16)
        {
            _loc16 = "Mutant Clone";
            _loc20 = 66;
            _loc14 = 36;
        }
        else
        {
            _loc20 = _loc4[8];
            _loc14 = _loc4[9];
        } // end else if
    }
    else if (T == "Capsule Clone")
    {
        _loc16 = GameData.Toys["Clone Capsule"].Char.Name;
        _loc10 = GameData.Toys["Clone Capsule"].Char.bodyFrame;
        _loc20 = GameData.Toys["Clone Capsule"].Char.eyeFrame;
        _loc14 = GameData.Toys["Clone Capsule"].Char.mouthFrame;
        _loc9 = GameData.Toys["Clone Capsule"].Char.hatFrame;
        _loc7 = GameData.Toys["Clone Capsule"].Char.headFrame;
        _loc17 = GameData.Toys["Clone Capsule"].Char.HairColor.substr(2, 6);
        _loc8 = GameData.Toys["Clone Capsule"].Char.armFrame;
        _loc11 = GameData.Toys["Clone Capsule"].Char.shoeFrame;
        _loc21 = GameData.Toys["Clone Capsule"].Char.wingFrame;
        _loc19 = GameData.Toys["Clone Capsule"].Char.itemFrame;
        _loc18 = GameData.Toys["Clone Capsule"].Char.accFrame;
        _loc6 = Number(GameData.Toys["Clone Capsule"].Char.Scale);
        _loc12 = stage["Clone Capsule"]._x;
        _loc13 = stage["Clone Capsule"]._y;
    }
    else if (GameData.Presets[T])
    {
        _loc16 = T;
        _loc10 = GameData.Presets[T].bodyFrame;
        _loc20 = GameData.Presets[T].eyeFrame;
        _loc14 = GameData.Presets[T].mouthFrame;
        _loc9 = GameData.Presets[T].hatFrame;
        _loc7 = GameData.Presets[T].headFrame;
        _loc17 = GameData.Parts.Hair[_loc7][6];
        _loc8 = GameData.Presets[T].armFrame;
        _loc11 = GameData.Presets[T].shoeFrame;
        _loc21 = GameData.Presets[T].wingFrame;
        _loc18 = GameData.Presets[T].accFrame;
        if (GameData.Settings.PresetWithItems.Check)
        {
            _loc19 = GameData.Presets[T].itemFrame;
        }
        else
        {
            _loc19 = 0;
        } // end else if
        _loc6 = 100;
        _loc12 = Stage.width / 2;
        _loc13 = Stage.height / 2 + 50;
    }
    else
    {
        if (T)
        {
            _loc16 = T;
        }
        else
        {
            _loc16 = _loc1;
        } // end else if
        _loc10 = random(GameData.Parts.Body.length);
        _loc20 = random(GameData.Parts.Eyes.length);
        _loc14 = random(GameData.Parts.Mouth.length);
        _loc9 = random(GameData.Parts.Hats.length);
        _loc7 = random(GameData.Parts.Hair.length);
        _loc17 = GameData.Parts.Hair[_loc7][6];
        _loc8 = random(GameData.Parts.Arms.length);
        _loc11 = random(GameData.Parts.Shoes.length);
        _loc21 = random(GameData.Parts.Back.length);
        _loc19 = random(GameData.Parts.Items.length);
        _loc18 = random(GameData.Parts.Acc.length);
        _loc6 = 100;
        _loc12 = Stage.width / 2;
        _loc13 = Stage.height / 2 + 50;
    } // end else if
    GameData.Characters[_loc1] = new Object();
    RootPartSwap(stage[_loc1].eyes, "Eyes", String(_loc20));
    RootPartSwap(stage[_loc1].mouth, "Mouth", String(_loc14));
    RootPartSwap(stage[_loc1].hat, "Hats", String(_loc9));
    RootPartSwap(stage[_loc1].item, "Items", String(_loc19));
    RootPartSwap(stage[_loc1].wings, "Back", String(_loc21));
    RootPartSwap(stage[_loc1].accessory, "Acc", String(_loc18));
    RootPartSwap(stage[_loc1].head, "Hair", String(_loc7));
    RootPartSwap(stage[_loc1].body, "Body", String(_loc10));
    RootPartSwap(stage[_loc1].arms, "Arms", String(_loc8));
    RootPartSwap(stage[_loc1].legs, "Shoes", String(_loc11));
    GameData.Characters[_loc1].Name = _loc16;
    GameData.Characters[_loc1].Scale = _loc6;
    GameData.Characters[_loc1].Locks = new Object();
    GameData.Characters[_loc1].Locks.Mouth = false;
    GameData.Characters[_loc1].Locks.Eyes = false;
    GameData.Characters[_loc1].Locks.Hair = false;
    GameData.Characters[_loc1].Locks.Body = false;
    GameData.Characters[_loc1].Locks.Arms = false;
    GameData.Characters[_loc1].Locks.Shoes = false;
    GameData.Characters[_loc1].Locks.Back = false;
    GameData.Characters[_loc1].Locks.Accessory = false;
    GameData.Characters[_loc1].Locks.Items = false;
    GameData.Characters[_loc1].Locks.Hats = false;
    colorHex = "0x" + _loc17;
    GameData.Characters[_loc1].HairColor = colorHex;
    ColorPalette(stage[_loc1].head.HairColor, colorHex);
    ColorPalette(stage[_loc1].head2.HairColor, colorHex);
    stage[_loc1].Pin = false;
    stage[_loc1]._x = _loc12;
    stage[_loc1]._y = _loc13;
    stage[_loc1]._xscale = _loc6;
    stage[_loc1]._yscale = _loc6;
    if (T == "Capsule Clone")
    {
        stage[_loc1].XFace = GameData.Toys["Clone Capsule"].Target.XFace;
        stage[_loc1].YFace = GameData.Toys["Clone Capsule"].Target.YFace;
        stage[_loc1]._xscale = stage[_loc1]._xscale * stage[_loc1].XFace;
        stage[_loc1]._yscale = stage[_loc1]._yscale * stage[_loc1].YFace;
    }
    else
    {
        stage[_loc1].XFace = 1;
        stage[_loc1].YFace = 1;
    } // end else if
    AddClickHandler(stage[_loc1], "Character");
    return (stage[_loc1]);
} // End of the function
function makeSpeechBubble(T, Attr)
{
    var _loc1 = "Bubble" + GameData.BubbleID++;
    AddProp(_loc1, "SpeechBubbles", "SpeechBubble");
    GameData.SpeechBubbles[_loc1] = new Object();
    GameData.SpeechBubbles[_loc1].Type = T;
    if (Attr)
    {
        GameData.SpeechBubbles[_loc1].Name = Attr.Name;
        GameData.SpeechBubbles[_loc1].Scale = Attr.Scale;
        if (GameData.Settings.PinnedLoading.Check)
        {
            stage[_loc1].Pin = true;
        }
        else
        {
            stage[_loc1].Pin = false;
        } // end else if
        GameData.SpeechBubbles[_loc1].XScale = Attr.XScale;
        GameData.SpeechBubbles[_loc1].YScale = Attr.YScale;
        GameData.SpeechBubbles[_loc1].FontColor = Attr.FontColor;
        stage[_loc1].Bubble.gotoAndStop(T);
        stage[_loc1]._x = Attr.X;
        stage[_loc1]._y = Attr.Y;
        stage[_loc1]._rotation = Attr.Rotation;
        stage[_loc1]._xscale = Attr.Scale;
        stage[_loc1]._yscale = Attr.Scale;
        stage[_loc1].Bubble.XFace = Attr.XFace;
        stage[_loc1].Bubble.YFace = Attr.YFace;
        stage[_loc1].Bubble._x = Attr.BX;
        stage[_loc1].Bubble._y = Attr.BY;
        stage[_loc1].Bubble._xscale = Attr.XScale * Attr.XFace;
        stage[_loc1].Bubble._yscale = Attr.YScale * Attr.YFace;
        stage[_loc1].Bubble._rotation = Attr.BRotation;
        var _loc5 = new TextFormat();
        _loc5.color = Attr.FontColor;
        stage[_loc1].D.setTextFormat(_loc5);
        stage[_loc1].D.setNewTextFormat(_loc5);
        stage[_loc1].D._x = Attr.TX;
        stage[_loc1].D._y = Attr.TY;
        stage[_loc1].D._rotation = Attr.TRotation;
        stage[_loc1].D.text = Attr.MSG;
        if (Attr.FontType)
        {
            var _loc7 = new TextFormat();
            _loc7.font = Attr.FontType;
            stage[_loc1].FontType = Attr.FontType;
            stage[_loc1].D.setTextFormat(_loc7);
            stage[_loc1].D.setNewTextFormat(_loc7);
        } // end if
    }
    else
    {
        stage[_loc1].Bubble.gotoAndStop(T);
        if (GameData.Settings.RandomBubbles.Check)
        {
            var _loc4 = random(GameData.PresetBubbles["Type" + T].length);
            var _loc6 = Number(GameData.PresetBubbles["Type" + T][_loc4][0]);
            var _loc9 = Number(GameData.PresetBubbles["Type" + T][_loc4][1]);
            var _loc8 = Number(GameData.PresetBubbles["Type" + T][_loc4][2]);
            var _loc11 = Number(GameData.PresetBubbles["Type" + T][_loc4][3]);
            var _loc10 = Number(GameData.PresetBubbles["Type" + T][_loc4][4]);
            GameData.SpeechBubbles[_loc1].Scale = _loc6;
            stage[_loc1]._xscale = _loc6;
            stage[_loc1]._yscale = _loc6;
            GameData.SpeechBubbles[_loc1].XScale = _loc9;
            GameData.SpeechBubbles[_loc1].YScale = _loc8;
            stage[_loc1].Bubble.XFace = _loc11;
            stage[_loc1].Bubble.YFace = _loc10;
            stage[_loc1].Bubble._xscale = _loc9 * _loc11;
            stage[_loc1].Bubble._yscale = _loc8 * _loc10;
            stage[_loc1].Bubble._x = Number(GameData.PresetBubbles["Type" + T][_loc4][5]);
            stage[_loc1].Bubble._y = Number(GameData.PresetBubbles["Type" + T][_loc4][6]);
            stage[_loc1].Bubble._rotation = Number(GameData.PresetBubbles["Type" + T][_loc4][7]);
            stage[_loc1].D._x = Number(GameData.PresetBubbles["Type" + T][_loc4][8]);
            stage[_loc1].D._y = Number(GameData.PresetBubbles["Type" + T][_loc4][9]);
            stage[_loc1].D._rotation = Number(GameData.PresetBubbles["Type" + T][_loc4][10]);
            stage[_loc1].D.text = GameData.PresetBubbles["Type" + T][_loc4][11];
            _loc7 = new TextFormat();
            _loc7.font = GameData.PresetBubbles["Type" + T][_loc4][12];
            stage[_loc1].FontType = GameData.PresetBubbles["Type" + T][_loc4][12];
            stage[_loc1].D.setTextFormat(_loc7);
            stage[_loc1].D.setNewTextFormat(_loc7);
            stage[_loc1].XMov = random(51) - 25;
            stage[_loc1].YMov = random(51) - 25;
        }
        else
        {
            GameData.SpeechBubbles[_loc1].Scale = 100;
            GameData.SpeechBubbles[_loc1].XScale = 100;
            GameData.SpeechBubbles[_loc1].YScale = 100;
            stage[_loc1].Bubble.XFace = 1;
            stage[_loc1].Bubble.YFace = 1;
            if (T == 4)
            {
                stage[_loc1].D._y = 0;
                stage[_loc1].D.text = "Double click this to edit text.";
            }
            else
            {
                stage[_loc1].D.text = "\n\n\nDouble click this to edit text.";
            } // end else if
            stage[_loc1].FontType = "Wild Words";
        } // end else if
        GameData.SpeechBubbles[_loc1].Name = _loc1;
        GameData.SpeechBubbles[_loc1].FontColor = "0x000000";
        stage[_loc1]._x = 200;
        stage[_loc1]._y = 200;
        stage[_loc1].Pin = false;
        playSound("Pop");
    } // end else if
    AddClickHandler(stage[_loc1], "SpeechBubble");
    return (stage[stage[_loc1]]);
} // End of the function
function setBubbleClickHandlers(MC)
{
    MC.Bubble.head.onPress = function ()
    {
        clickCheck(this._parent._parent, "rotate");
    };
    setActionRelease(MC.Bubble.head);
    MC.Bubble.body.onPress = function ()
    {
        clickCheck(this._parent._parent, "drag");
    };
    setActionRelease(MC.Bubble.body);
    MC.D.onSetFocus = function ()
    {
        GameData.KeyLock = true;
    };
    MC.D.onKillFocus = function ()
    {
        GameData.KeyLock = false;
        setBubble(GameData.Target);
        Interface.TargetFrame.preview.bubble.D.text = GameData.Target.D.text;
    };
} // End of the function
function setKeyLocks(MC)
{
    MC.onSetFocus = function ()
    {
        GameData.KeyLock = true;
    };
    MC.onKillFocus = function ()
    {
        GameData.KeyLock = false;
    };
} // End of the function
function clickCheck(MC, A)
{
    if (GameData.Settings.ClickStopsSpin.Check)
    {
        MC.Spin = 0;
    } // end if
    MC.XMov = 0;
    MC.YMov = 0;
    if (Key.isDown(16))
    {
        Target(MC);
        if (GameData.TargetType == "Character")
        {
            MC.OldScale = Number(GameData.Characters[MC._name].Scale);
            GameData.Xmod = _root._xmouse;
            GameData.Ymod = _root._ymouse;
            GameData.Action = "scale";
        }
        else if (GameData.TargetType == "Object")
        {
            MC.OldScale = GameData.Objects[MC._name].Scale;
            GameData.Xmod = _root._xmouse;
            GameData.Ymod = _root._ymouse;
            GameData.Action = "scale";
        }
        else if (GameData.TargetType == "Screenshot")
        {
            MC.OldScale = GameData.Screenshots[MC._name].Scale;
            GameData.Xmod = _root._xmouse;
            GameData.Ymod = _root._ymouse;
            GameData.Action = "scale";
        }
        else if (GameData.TargetType == "SpeechBubble")
        {
            MC.OldScale = GameData.SpeechBubbles[MC._name].Scale;
            MC.OldXScale = GameData.SpeechBubbles[MC._name].XScale;
            MC.OldYScale = GameData.SpeechBubbles[MC._name].YScale;
            GameData.Xmod = _root._xmouse;
            GameData.Ymod = _root._ymouse;
            GameData.Action = "scale";
        }
        else
        {
            MC.OldScale = GameData[getArray()][MC._name].Scale;
            GameData.Xmod = _root._xmouse;
            GameData.Ymod = _root._ymouse;
            GameData.Action = "scale";
        } // end else if
    }
    else if (Key.isDown(17))
    {
        Target(MC);
        if (GameData.TargetType == "SpeechBubble")
        {
            GameData.Target.Bubble.startDrag();
        }
        else if (GameData.TargetType == "Character" && GameData.Settings.HeadRotates.Check)
        {
            GameData.DoubleClick = GameData.DCrate;
            GameData.Action = "drag";
            GameData.Xmod = _root._xmouse - MC._x;
            GameData.Ymod = _root._ymouse - MC._y;
        }
        else
        {
            GameData.DoubleClick = GameData.DCrate;
            GameData.Action = "rotate";
            GameData.Xmod = _root._xmouse - MC._x;
            GameData.Ymod = _root._ymouse - MC._y;
        } // end else if
    }
    else if (GameData.DoubleClick > 0 && GameData.Target == MC)
    {
        if (GameData.Target._name == "Grouchy Reimu")
        {
            HaxSignBE();
        }
        else if (GameData.Target._name == "Clone Capsule")
        {
            if (stage["Clone Capsule"].char._visible)
            {
                activateCloneCapsule();
            }
            else
            {
                openDNAInput();
            } // end else if
        }
        else if (GameData.TargetType == "SpeechBubble")
        {
            if (GameData.Target.D.type == "dynamic")
            {
                editBubble(GameData.Target);
            }
            else
            {
                setBubble(GameData.Target);
            } // end else if
        }
        else if (GameData.TargetType == "Object")
        {
            OpenMenu(1, Interface.GeneralOptions);
            OnLoadHandler(Interface.GeneralOptions);
        }
        else if (GameData.TargetType == "Screenshot")
        {
            GameData.Menus.Functions.OpenWindow(this, "SnapshotOptions");
        }
        else if (GameData.TargetType == "Cluster")
        {
            GameData.Menus.Functions.OpenWindow(this, "ClusterOptions");
        }
        else if (GameData.TargetType == "Rain")
        {
            GameData.Menus.Functions.OpenWindow(this, "RainOptions");
        }
        else if (GameData.TargetType == "Character")
        {
            openCOMenu();
        } // end else if
    }
    else
    {
        GameData.DoubleClick = GameData.DCrate;
        GameData.Action = A;
        GameData.Xmod = _root._xmouse - MC._x;
        GameData.Ymod = _root._ymouse - MC._y;
        Target(MC);
    } // end else if
} // End of the function
function editBubble(MC)
{
    MC.D.type = "input";
    MC.D.selectable = true;
    Selection.setFocus(MC.D);
} // End of the function
function setBubble(MC)
{
    MC.D.type = "dynamic";
    MC.D.selectable = false;
} // End of the function
function setActionRelease(MC)
{
    MC.onRelease = function ()
    {
        releaseHandler();
    };
    MC.onReleaseOutside = function ()
    {
        releaseHandler();
    };
} // End of the function
function releaseHandler()
{
    if (GameData.TargetType == "Character")
    {
        if (stage["Clone Capsule"]._visible && getDist(stage["Clone Capsule"], _root._xmouse, _root._ymouse) < 50 && !stage["Clone Capsule"].char._visible)
        {
            injectCloneCapsule(GameData.Target);
        }
        else if (bg.fusionlab && getDist(bg.fusionlab.fusion1, _root._xmouse, _root._ymouse) < 50 && !bg.fusionlab.fusion1.char._visible)
        {
            injectFusionTank(1, GameData.Target);
        }
        else if (bg.fusionlab && getDist(bg.fusionlab.fusion2, _root._xmouse, _root._ymouse) < 50 && !bg.fusionlab.fusion2.char._visible)
        {
            injectFusionTank(2, GameData.Target);
        }
        else if (stage["Mysterious Gap"]._visible && getDist(stage["Mysterious Gap"], _root._xmouse, _root._ymouse) < 50)
        {
            if (!GameData.GameOn)
            {
                pongStart();
            } // end else if
        } // end else if
    }
    else if (GameData.TargetType == "SpeechBubble")
    {
        GameData.Target.Bubble.stopDrag();
    }
    else if (GameData.Target._name == "Boxing Chen")
    {
        BoxingChenAttack();
    } // end else if
    _root.GameData.Action = "";
} // End of the function
function BringToFront(MC)
{
    var _loc1 = getDID(MC._name);
    for (var --_loc1; _loc1 > -1; --_loc1)
    {
        MC.swapDepths(GameData.Depths.StageList[_loc1].Depth);
    } // end of for
    fixDepthList();
} // End of the function
function SendToBack(MC)
{
    var _loc1 = getDID(MC._name);
    for (var ++_loc1; _loc1 < GameData.Depths.StageList.length; ++_loc1)
    {
        MC.swapDepths(GameData.Depths.StageList[_loc1].Depth);
    } // end of for
    fixDepthList();
} // End of the function
function fixDepthList()
{
    for (i = 0; i < GameData.Depths.StageList.length; i++)
    {
        GameData.Depths.StageList[i].Depth = stage[GameData.Depths.StageList[i].Name].getDepth();
    } // end of for
    GameData.Depths.StageList.sortOn("Depth", Array.DESCENDING | Array.NUMERIC);
} // End of the function
function BringForward(MC)
{
    var _loc1 = getDID(MC._name);
    if (_loc1 > 0)
    {
        MC.swapDepths(GameData.Depths.StageList[_loc1 - 1].Depth);
    } // end if
    fixDepthList();
} // End of the function
function SendBackward(MC)
{
    var _loc1 = getDID(MC._name);
    if (_loc1 < GameData.Depths.StageList.length - 1)
    {
        MC.swapDepths(GameData.Depths.StageList[_loc1 + 1].Depth);
    } // end if
    fixDepthList();
} // End of the function
function Delete(MC)
{
    var _loc1 = MC._name;
    if (GameData.Toys[_loc1])
    {
        if (_loc1 == "Boxing Chen")
        {
            resetBoxingChen();
        } // end if
        MC._visible = false;
        Target();
    }
    else
    {
        if (GameData.Characters[_loc1])
        {
            delete GameData.Characters[_loc1];
        }
        else if (GameData.SpeechBubbles[_loc1])
        {
            delete GameData.SpeechBubbles[_loc1];
        }
        else if (GameData.Objects[_loc1])
        {
            delete GameData.Objects[_loc1];
        } // end else if
        MC.removeMovieClip();
        if (MC._name == _loc1)
        {
            trace ("Delete failed! " + MC);
        } // end if
    } // end else if
    if (GameData.Target == MC)
    {
        Target();
        CloseMenus(1);
        Manipulator._visible = false;
    } // end if
    GameData.Depths.StageList.splice(getDID(_loc1), 1);
} // End of the function
function RandomizeAll(MC)
{
    if (!GameData.Characters[MC._name].Locks.Hats && !GameData.Locks.Hats)
    {
        RootPartSwap(MC.hat, "Hats", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Back && !GameData.Locks.Back)
    {
        RootPartSwap(MC.wings, "Back", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Items && !GameData.Locks.Items)
    {
        RootPartSwap(MC.item, "Items", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Accessory && !GameData.Locks.Accessory)
    {
        RootPartSwap(MC.accessory, "Acc", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Hair && !GameData.Locks.Hair)
    {
        RootPartSwap(MC.head, "Hair", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Body && !GameData.Locks.Body)
    {
        RootPartSwap(MC.body, "Body", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Arms && !GameData.Locks.Arms)
    {
        RootPartSwap(MC.arms, "Arms", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Shoes && !GameData.Locks.Shoes)
    {
        RootPartSwap(MC.legs, "Shoes", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Eyes && !GameData.Locks.Eyes)
    {
        RootPartSwap(MC.eyes, "Eyes", "random");
    } // end if
    if (!GameData.Characters[MC._name].Locks.Mouth && !GameData.Locks.Mouth)
    {
        RootPartSwap(MC.mouth, "Mouth", "random");
    } // end if
} // End of the function
function RootPartSwap(MC, T, N)
{
    if (N == "random")
    {
        var _loc2 = SwapPart(MC, T, GameData.Parts[T].length - 1);
    }
    else
    {
        _loc2 = SwapPart(MC, T, Number(N));
    } // end else if
    if (T == "Hats")
    {
        GameData.Characters[MC._parent._name].hatFrame = _loc2;
    }
    else if (T == "Acc")
    {
        GameData.Characters[MC._parent._name].accFrame = _loc2;
    }
    else if (T == "Back")
    {
        GameData.Characters[MC._parent._name].wingFrame = _loc2;
    }
    else if (T == "Items")
    {
        GameData.Characters[MC._parent._name].itemFrame = _loc2;
    }
    else if (T == "Hair")
    {
        GameData.Characters[MC._parent._name].headFrame = _loc2;
    }
    else if (T == "Arms")
    {
        GameData.Characters[MC._parent._name].armFrame = _loc2;
    }
    else if (T == "Shoes")
    {
        GameData.Characters[MC._parent._name].shoeFrame = _loc2;
    }
    else if (T == "Body")
    {
        GameData.Characters[MC._parent._name].bodyFrame = _loc2;
    }
    else if (T == "Eyes")
    {
        GameData.Characters[MC._parent._name].eyeFrame = _loc2;
    }
    else if (T == "Mouth")
    {
        GameData.Characters[MC._parent._name].mouthFrame = _loc2;
    } // end else if
    if (GameData.Target == MC._parent)
    {
        if (T == "Hats")
        {
            SwapPart(Interface.TargetFrame.preview.char.hat, T, _loc2);
        }
        else if (T == "Acc")
        {
            SwapPart(Interface.TargetFrame.preview.char.accessory, T, _loc2);
        }
        else if (T == "Hair")
        {
            SwapPart(Interface.TargetFrame.preview.char.hair, T, _loc2);
        }
        else if (T == "Eyes")
        {
            SwapPart(Interface.TargetFrame.preview.char.eyes, T, _loc2);
        }
        else if (T == "Mouth")
        {
            SwapPart(Interface.TargetFrame.preview.char.mouth, T, _loc2);
        } // end else if
    } // end else if
} // End of the function
function setCharLook(T, S)
{
    if (GameData.Parts.Hats[S.hatFrame][1])
    {
        T.hat._visible = true;
        T.hat.gotoAndStop(GameData.Parts.Hats[S.hatFrame][1]);
    }
    else
    {
        T.hat._visible = false;
    } // end else if
    T.head.gotoAndStop(GameData.Parts.Hair[S.headFrame][1]);
    T.head.HairColor.gotoAndStop(GameData.Parts.Hair[S.headFrame][1]);
    if (S.HairColor)
    {
        ColorPalette(T.head.HairColor, S.HairColor);
    } // end if
    if (GameData.Parts.Eyes[S.eyeFrame][5])
    {
        T.head.eye2._visible = true;
        T.head.eye2.gotoAndStop(GameData.Parts.Eyes[S.eyeFrame][5]);
    }
    else
    {
        T.head.eye2._visible = false;
    } // end else if
    if (GameData.Parts.Hair[S.headFrame][5])
    {
        T.head2._visible = true;
        T.head2.gotoAndStop(GameData.Parts.Hair[S.headFrame][5]);
        T.head2.HairColor.gotoAndStop(GameData.Parts.Hair[S.headFrame][5]);
        if (S.HairColor)
        {
            ColorPalette(T.head2.HairColor, S.HairColor);
        } // end if
    }
    else
    {
        T.head2._visible = false;
    } // end else if
    if (GameData.Parts.Body[S.bodyFrame][1])
    {
        T.body._visible = true;
        T.body.gotoAndStop(GameData.Parts.Body[S.bodyFrame][1]);
    }
    else
    {
        T.body._visible = false;
    } // end else if
    if (GameData.Parts.Arms[S.armFrame][1])
    {
        T.arms._visible = true;
        T.arms.gotoAndStop(GameData.Parts.Arms[S.armFrame][1]);
    }
    else
    {
        T.arms._visible = false;
    } // end else if
    if (GameData.Parts.Shoes[S.shoeFrame][1])
    {
        T.legs._visible = true;
        T.legs.gotoAndStop(GameData.Parts.Shoes[S.shoeFrame][1]);
    }
    else
    {
        T.legs._visible = false;
    } // end else if
    T.eyes.gotoAndStop(GameData.Parts.Eyes[S.eyeFrame][1]);
    if (GameData.Parts.Items[S.itemFrame][1])
    {
        T.item._visible = true;
        T.item.gotoAndStop(GameData.Parts.Items[S.itemFrame][1]);
    }
    else
    {
        T.item._visible = false;
    } // end else if
    if (GameData.Parts.Back[S.wingFrame][1])
    {
        T.wings._visible = true;
        T.wings.gotoAndStop(GameData.Parts.Back[S.wingFrame][1]);
    }
    else
    {
        T.wings._visible = false;
    } // end else if
    if (GameData.Parts.Acc[S.accFrame][1])
    {
        T.accessory._visible = true;
        T.accessory.gotoAndStop(GameData.Parts.Acc[S.accFrame][1]);
    }
    else
    {
        T.accessory._visible = false;
    } // end else if
    if (GameData.Parts.Mouth[S.mouthFrame][1])
    {
        T.mouth._visible = true;
        T.mouth.gotoAndStop(GameData.Parts.Mouth[S.mouthFrame][1]);
    }
    else
    {
        T.mouth._visible = false;
    } // end else if
} // End of the function
function QuickSwap(MC, N, T)
{
    if (!GameData.Characters[MC._name].Locks.Hats && (T == "Hats" || T == "All"))
    {
        var _loc5 = GameData.Characters[MC._name].hatFrame + N;
        if (_loc5 < 1)
        {
            _loc5 = GameData.Parts.Hats.length - 2;
        }
        else if (_loc5 > GameData.Parts.Hats.length - 2)
        {
            _loc5 = 1;
        } // end else if
        RootPartSwap(MC.hat, "Hats", String(_loc5));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Eyes && (T == "Eyes" || T == "All" && !GameData.Settings.OldQS.Check))
    {
        var _loc11 = GameData.Characters[MC._name].eyeFrame + N;
        if (_loc11 < 0)
        {
            _loc11 = GameData.Parts.Eyes.length - 2;
        }
        else if (_loc11 > GameData.Parts.Eyes.length - 2)
        {
            _loc11 = 0;
        } // end else if
        RootPartSwap(MC.eyes, "Eyes", String(_loc11));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Mouth && (T == "Mouth" || T == "All" && !GameData.Settings.OldQS.Check))
    {
        var _loc8 = GameData.Characters[MC._name].mouthFrame + N;
        if (_loc8 < 1)
        {
            _loc8 = GameData.Parts.Mouth.length - 2;
        }
        else if (_loc8 > GameData.Parts.Mouth.length - 2)
        {
            _loc8 = 1;
        } // end else if
        RootPartSwap(MC.mouth, "Mouth", String(_loc8));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Hair && (T == "Hair" || T == "All"))
    {
        var _loc7 = GameData.Characters[MC._name].headFrame + N;
        if (_loc7 < 0)
        {
            _loc7 = GameData.Parts.Hair.length - 2;
        }
        else if (_loc7 > GameData.Parts.Hair.length - 2)
        {
            _loc7 = 0;
        } // end else if
        RootPartSwap(MC.head, "Hair", String(_loc7));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Arms && (T == "Arms" || T == "All"))
    {
        var _loc4 = GameData.Characters[MC._name].armFrame + N;
        if (_loc4 < 0)
        {
            _loc4 = GameData.Parts.Arms.length - 2;
        }
        else if (_loc4 > GameData.Parts.Arms.length - 2)
        {
            _loc4 = 0;
        } // end else if
        RootPartSwap(MC.arms, "Arms", String(_loc4));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Shoes && (T == "Shoes" || T == "All"))
    {
        var _loc13 = GameData.Characters[MC._name].shoeFrame + N;
        if (_loc13 < 0)
        {
            _loc13 = GameData.Parts.Shoes.length - 2;
        }
        else if (_loc4 > GameData.Parts.Shoes.length - 2)
        {
            _loc13 = 0;
        } // end else if
        RootPartSwap(MC.legs, "Shoes", String(_loc13));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Body && (T == "Body" || T == "All"))
    {
        var _loc6 = GameData.Characters[MC._name].bodyFrame + N;
        if (_loc6 < 1)
        {
            _loc6 = GameData.Parts.Body.length - 2;
        }
        else if (_loc6 > GameData.Parts.Body.length - 2)
        {
            _loc6 = 1;
        } // end else if
        RootPartSwap(MC.body, "Body", String(_loc6));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Items && (T == "Items" || T == "All" && !GameData.Settings.OldQS.Check))
    {
        var _loc9 = GameData.Characters[MC._name].itemFrame + N;
        if (_loc9 < 0)
        {
            _loc9 = GameData.Parts.Items.length - 2;
        }
        else if (_loc9 > GameData.Parts.Items.length - 2)
        {
            _loc9 = 0;
        } // end else if
        RootPartSwap(MC.item, "Items", String(_loc9));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Back && (T == "Back" || T == "All" && !GameData.Settings.OldQS.Check))
    {
        var _loc12 = GameData.Characters[MC._name].wingFrame + N;
        if (_loc12 < 0)
        {
            _loc12 = GameData.Parts.Back.length - 2;
        }
        else if (_loc12 > GameData.Parts.Back.length - 2)
        {
            _loc12 = 0;
        } // end else if
        RootPartSwap(MC.wings, "Back", String(_loc12));
    } // end if
    if (!GameData.Characters[MC._name].Locks.Accessory && (T == "Accessory" || T == "All" && !GameData.Settings.OldQS.Check))
    {
        var _loc10 = GameData.Characters[MC._name].accFrame + N;
        if (_loc10 < 0)
        {
            _loc10 = GameData.Parts.Acc.length - 2;
        }
        else if (_loc10 > GameData.Parts.Acc.length - 2)
        {
            _loc10 = 0;
        } // end else if
        RootPartSwap(MC.accessory, "Acc", String(_loc10));
    } // end if
} // End of the function
function resetBoxingChen()
{
    if (stage["Boxing Chen"].Target)
    {
        stage["Boxing Chen"]._xscale = 100;
        stage["Boxing Chen"]._yscale = 100;
        stage["Boxing Chen"].Target._rotation = stage["Boxing Chen"].TR;
        stage["Boxing Chen"].Target.eyes.gotoAndStop(GameData.Parts.Eyes[GameData.Characters[stage["Boxing Chen"].Target._name].eyeFrame][1]);
        if (GameData.Characters[stage["Boxing Chen"].Target._name].mouthFrame)
        {
            stage["Boxing Chen"].Target.mouth.gotoAndStop(GameData.Parts.Mouth[GameData.Characters[stage["Boxing Chen"].Target._name].mouthFrame][1]);
            stage["Boxing Chen"].Target.mouth._visible = true;
        }
        else
        {
            stage["Boxing Chen"].Target.mouth._visible = false;
        } // end else if
        stage["Boxing Chen"].Target = undefined;
    } // end if
} // End of the function
function openDNAInput()
{
    OpenMenu(1, Interface.DNAMenu);
    Interface.DNAMenu.Title.text = "DNA Strand Input";
    Interface.DNAMenu.DNAdata.setNewTextFormat(GameData.TextFormats.Base);
    Interface.DNAMenu.DNAdata.text = "Enter DNA";
    Interface.DNAMenu.OK.bName.text = "Spawn";
    Interface.DNAMenu.OK.onRelease = function ()
    {
        SwapColor(MC.BG, "Buttons", 1);
        makeFromDNA(Interface.DNAMenu.DNAdata.text);
        CloseMenus(1);
    };
} // End of the function
function showDNAstrand(O)
{
    OpenMenu(1, Interface.DNAMenu);
    Interface.DNAMenu.Title.text = "DNA Strand";
    Interface.DNAMenu.DNAdata.setNewTextFormat(GameData.TextFormats.Base);
    Interface.DNAMenu.DNAdata.text = getDNA(O);
    Interface.DNAMenu.OK.bName.text = "Close";
    Interface.DNAMenu.OK.onRelease = function ()
    {
        SwapColor(MC.BG, "Buttons", 1);
        CloseMenus(1);
    };
} // End of the function
function makeFromDNA(X)
{
    if (GameData.Presets[X])
    {
        var _loc1 = makeChar(X);
    }
    else
    {
        _loc1 = makeChar("DNA-" + X);
    } // end else if
    injectCloneCapsule(_loc1);
} // End of the function
function getDNA(O)
{
    var _loc1 = GameData.Version + ":";
    _loc1 = _loc1 + (O.Name + ":");
    _loc1 = _loc1 + (O.Scale + ":");
    _loc1 = _loc1 + (O.hatFrame + ":");
    _loc1 = _loc1 + (O.headFrame + ":");
    _loc1 = _loc1 + (O.bodyFrame + ":");
    _loc1 = _loc1 + (O.armFrame + ":");
    _loc1 = _loc1 + (O.shoeFrame + ":");
    _loc1 = _loc1 + (O.eyeFrame + ":");
    _loc1 = _loc1 + (O.mouthFrame + ":");
    _loc1 = _loc1 + (O.itemFrame + ":");
    _loc1 = _loc1 + (O.accFrame + ":");
    _loc1 = _loc1 + (O.wingFrame + ":");
    _loc1 = _loc1 + O.HairColor.substr(2, 6);
    return (_loc1);
} // End of the function
function injectCloneCapsule(MC)
{
    playSound("Pop");
    GameData.Toys["Clone Capsule"].Char = GameData.Characters[MC._name];
    GameData.Toys["Clone Capsule"].Target = MC;
    setCharLook(stage["Clone Capsule"].char, GameData.Toys["Clone Capsule"].Char);
    stage["Clone Capsule"].char._visible = true;
    MC._visible = false;
    Target(stage["Clone Capsule"]);
} // End of the function
function ejectCloneCapsule()
{
    stage["Clone Capsule"].char._visible = false;
    Interface.TargetFrame.preview.toy.char._visible = false;
    GameData.Toys["Clone Capsule"].Target._visible = true;
    GameData.Toys["Clone Capsule"].Target._x = stage["Clone Capsule"]._x;
    GameData.Toys["Clone Capsule"].Target._y = stage["Clone Capsule"]._y;
    GameData.Toys["Clone Capsule"].Target.XMov = random(10) + 20;
    GameData.Toys["Clone Capsule"].Target.YMov = random(5) + 10;
} // End of the function
function activateCloneCapsule()
{
    if (GameData.Toys["Clone Capsule"].Mode == 1)
    {
        var _loc1 = makeChar("Capsule Clone");
        _loc1.XMov = random(10) + 20;
        _loc1.YMov = random(5) + 10;
        ColorPalette(_loc1.head2.HairColor, _loc1.head.HairColor.RGB);
    }
    else if (GameData.Toys["Clone Capsule"].Mode == 2)
    {
        for (c = 0; c < 6; c++)
        {
            _loc1 = makeChar("Capsule Clone");
            _loc1.XMov = random(10) + 20;
            _loc1.YMov = random(5) + 10;
            _loc1._xscale = GameData.ScaleLimit;
            _loc1._yscale = GameData.ScaleLimit;
            GameData.Characters[_loc1._name].Scale = GameData.ScaleLimit;
            ColorPalette(_loc1.head2.HairColor, _loc1.head.HairColor.RGB);
        } // end of for
    }
    else if (GameData.Toys["Clone Capsule"].Mode == 3)
    {
        ejectCloneCapsule();
        GameData.Toys["Clone Capsule"].Target._xscale = 100;
        GameData.Toys["Clone Capsule"].Target._yscale = 100;
        GameData.Characters[GameData.Toys["Clone Capsule"].Target._name].Scale = 100;
        Scramble(GameData.Toys["Clone Capsule"].Target);
        CloseMenus(1);
    }
    else
    {
        _loc1 = makeChar("Capsule Clone");
        _loc1.XMov = random(10) + 20;
        _loc1.YMov = random(5) + 10;
        ColorPalette(_loc1.head2.HairColor, _loc1.head.HairColor.RGB);
        Scramble(_loc1);
    } // end else if
} // End of the function
function HaxSignBE()
{
    stage["Grouchy Reimu"]._visible = false;
    _root.attachMovie("HaxSign", "HaxSign", 9999);
    GameData.Chat.Doom = 120;
    HaxSign.clock = 60;
    HaxSign._xscale = Stage.width * 100 / 550;
    HaxSign._yscale = Stage.height * 100 / 400;
    HaxSign.onEnterFrame = function ()
    {
        if (this.clock > 0)
        {
            --this.clock;
        }
        else
        {
            this.removeMovieClip();
        } // end else if
    };
    for (c in GameData.Characters)
    {
        if (stage[c]._visible && !stage[c].Pin)
        {
            stage[c].Doom = random(100) + 100;
        } // end if
    } // end of for...in
    Target();
} // End of the function
function tinkerCloneCapsule()
{
    GameData.Toys["Clone Capsule"].Mode = random(4) + 1;
    if (GameData.Toys["Clone Capsule"].Mode == 4)
    {
        stage["Clone Capsule"].lights.play();
        if (Interface.TargetFrame.preview.toy.lights)
        {
            Interface.TargetFrame.preview.toy.lights.play();
        } // end if
    }
    else
    {
        stage["Clone Capsule"].lights.gotoAndStop(GameData.Toys["Clone Capsule"].Mode);
        if (Interface.TargetFrame.preview.toy.lights)
        {
            Interface.TargetFrame.preview.toy.lights.gotoAndStop(GameData.Toys["Clone Capsule"].Mode);
        } // end if
    } // end else if
} // End of the function
function ColorPalette(MC, Hexa)
{
    var _loc1 = new Color(MC);
    _loc1.setRGB(Hexa);
    MC.RGB = Hexa;
} // End of the function
function Sys(msg, snd)
{
    if (GameData.Settings.SysMessages.Check)
    {
        for (S in SysConsole)
        {
            SysConsole[S]._y = SysConsole[S]._y - 30;
        } // end of for...in
        SysConsole.attachMovie("SysMsg", "Sys" + GameData.SysID, GameData.SysID);
        SysConsole["Sys" + GameData.SysID].D.text = msg;
        SysConsole["Sys" + GameData.SysID].D.selectable = false;
        SysConsole["Sys" + GameData.SysID].CD = 50;
        ++GameData.SysID;
        if (snd)
        {
            playSound(snd);
        } // end if
    } // end if
} // End of the function
function setBGProperties()
{
    bg._x = Number(Interface.BGMenu.lX.text);
    bg._y = Number(Interface.BGMenu.lY.text);
    bg._xscale = Number(Interface.BGMenu.sX.text);
    bg._yscale = Number(Interface.BGMenu.sX.text);
    bg._rotation = Number(Interface.BGMenu.rD.text);
    Dimmer._alpha = 100 - Number(Interface.BGMenu.Br.text);
    GameData.Friction = getFriction(Number(Interface.BGMenu.Fr.text));
} // End of the function
function SwapBG(ID)
{
    if (bg.fusionlab)
    {
        for (c = 1; c <= 3; c++)
        {
            if (bg.fusionlab["fusion" + c].char._visible)
            {
                ejectFusionTank(c);
            } // end if
        } // end of for
    }
    else if (bg.yuyuko)
    {
        StopYuyuko();
    } // end else if
    if (GameData.BGs[ID] == "none")
    {
        bg._visible = false;
        GameData.BG = 0;
    }
    else
    {
        bg._visible = true;
        if (GameData.BGs[ID] == "random")
        {
            SwapBG(random(GameData.BGs.length));
        }
        else
        {
            bg.gotoAndStop(GameData.BGs[ID][1]);
            GameData.BG = ID;
        } // end else if
    } // end else if
    if (bg.nameBox1)
    {
        for (i = 0; i < 5; i++)
        {
            bg["nameBox" + i].html = true;
            bg["nameBox" + i].htmlText = GameData.Imageboard.PostHeaders[i][0] + " <font color=\"#000000\" size=\"14\">" + GameData.Imageboard.PostHeaders[i][1] + "</font>";
            bg["hitBox" + i]._alpha = 0;
            bg["hitBox" + i].ID = i;
            bg["hitBox" + i].onRelease = function ()
            {
                Interface.RenameMenu.ID = this.ID;
                Interface.RenameMenu.iName.text = GameData.Imageboard.PostHeaders[this.ID][0];
                var _loc2 = new TextFormat();
                _loc2.font = "Arial";
                Interface.RenameMenu.iName.setTextFormat(_loc2);
                Selection.setFocus(Interface.RenameMenu.iName);
                Selection.setSelection(0, 0);
                Interface.RenameMenu.OK.onRelease = function ()
                {
                    GameData.Imageboard.PostHeaders[this._parent.ID][0] = Interface.RenameMenu.iName.text;
                    bg["nameBox" + this._parent.ID].htmlText = GameData.Imageboard.PostHeaders[this._parent.ID][0] + " <font color=\"#000000\" size=\"14\">" + GameData.Imageboard.PostHeaders[this._parent.ID][1] + "</font>";
                    CloseMenus(1);
                };
                OpenMenu(3, Interface.RenameMenu, this.BG);
            };
            bg["tB" + i].onSetFocus = function ()
            {
                GameData.KeyLock = true;
            };
            bg["tB" + i].onKillFocus = function ()
            {
                GameData.KeyLock = false;
            };
        } // end of for
    }
    else if (bg.randomColor)
    {
        myColor = Math.round(Math.random() * 16777215);
        myColoredObject = new Color(bg.randomColor);
        myColoredObject.setRGB(myColor);
    }
    else if (bg.yuyuko)
    {
        bg.hitBox.onEnterFrame = function ()
        {
            if (this.DB > 0)
            {
                --this.DB;
            } // end if
        };
        bg.hitBox.onRelease = function ()
        {
            if (this.DB > 0)
            {
                if (bg.yuyuko._currentframe == 1)
                {
                    bg.yuyuko.gotoAndStop(2);
                }
                else
                {
                    StopYuyuko();
                } // end else if
                this.DB = 0;
            }
            else
            {
                this.DB = _root.GameData.DCrate;
            } // end else if
        };
    } // end else if
} // End of the function
function StopYuyuko()
{
    bg.yuyuko.gotoAndStop(1);
    for (c in stage)
    {
        if (GameData.Characters[c])
        {
            setCharLook(stage[c], GameData.Characters[c]);
            stage[c]._xscale = GameData.Characters[c].Scale;
            stage[c]._yscale = GameData.Characters[c].Scale;
        } // end if
    } // end of for...in
} // End of the function
function injectFusionTank(N, T)
{
    playSound("Pop");
    setCharLook(bg.fusionlab["fusion" + N].char, GameData.Characters[T._name]);
    bg.fusionlab["fusion" + N].char._visible = true;
    bg.fusionlab["fusion" + N].lights.gotoAndStop(1);
    fixFusionLights();
    bg.fusionlab["fusion" + N].Target = T;
    T._visible = false;
    Target();
} // End of the function
function fixFusionLights()
{
    if (bg.fusionlab.fusion1.char._visible && bg.fusionlab.fusion2.char._visible)
    {
        bg.fusionlab.fusion3.lights.gotoAndStop(1);
    }
    else if (bg.fusionlab.fusion1.char._visible || bg.fusionlab.fusion2.char._visible)
    {
        bg.fusionlab.fusion3.lights.gotoAndStop(2);
    }
    else
    {
        bg.fusionlab.fusion3.lights.gotoAndStop(3);
    } // end else if
} // End of the function
function activateFusion()
{
    if (bg.fusionlab.fusion3.char._visible)
    {
        ejectFusionTank(3);
    }
    else
    {
        var _loc1 = GameData.Version + ":";
        var _loc3 = GameData.Characters[bg.fusionlab.fusion1.Target._name].Name;
        var _loc2 = GameData.Characters[bg.fusionlab.fusion2.Target._name].Name;
        for (n = 0; n < GameData.Fusion.Names.length; n++)
        {
            if (_loc3 == GameData.Fusion.Names[n][0] && _loc2 == GameData.Fusion.Names[n][1] || _loc2 == GameData.Fusion.Names[n][0] && _loc3 == GameData.Fusion.Names[n][1])
            {
                var _loc4 = GameData.Fusion.Names[n][2];
                continue;
            } // end if
            _loc4 = _loc3 + _loc2;
        } // end of for
        _loc1 = _loc1 + (_loc4 + ":");
        var _loc11 = Number(GameData.Characters[bg.fusionlab.fusion1.Target._name].Scale);
        var _loc9 = Number(GameData.Characters[bg.fusionlab.fusion2.Target._name].Scale);
        var _loc13 = (_loc11 + _loc9) / 2;
        _loc1 = _loc1 + (_loc13 + ":");
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].hatFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].hatFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].headFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].headFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].bodyFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].bodyFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].armFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].armFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].shoeFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].shoeFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].eyeFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].eyeFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].mouthFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].mouthFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].itemFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].itemFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].accFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].accFrame + ":");
        } // end else if
        if (random(2))
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion1.Target._name].wingFrame + ":");
        }
        else
        {
            _loc1 = _loc1 + (GameData.Characters[bg.fusionlab.fusion2.Target._name].wingFrame + ":");
        } // end else if
        var _loc7 = random(3);
        if (_loc7 == 1)
        {
            _loc1 = _loc1 + GameData.Characters[bg.fusionlab.fusion1.Target._name].HairColor.substr(2, 6);
        }
        else if (_loc7 == 2)
        {
            _loc1 = _loc1 + GameData.Characters[bg.fusionlab.fusion2.Target._name].HairColor.substr(2, 6);
        }
        else
        {
            var _loc6 = GameData.Characters[bg.fusionlab.fusion1.Target._name].HairColor;
            var _loc5 = GameData.Characters[bg.fusionlab.fusion2.Target._name].HairColor;
            var _loc16 = toRGB(_loc6.charAt(2)) * 16 + toRGB(_loc6.charAt(3));
            var _loc20 = toRGB(_loc6.charAt(4)) * 16 + toRGB(_loc6.charAt(5));
            var _loc18 = toRGB(_loc6.charAt(6)) * 16 + toRGB(_loc6.charAt(7));
            var _loc14 = toRGB(_loc5.charAt(2)) * 16 + toRGB(_loc5.charAt(3));
            var _loc19 = toRGB(_loc5.charAt(4)) * 16 + toRGB(_loc5.charAt(5));
            var _loc17 = toRGB(_loc5.charAt(6)) * 16 + toRGB(_loc5.charAt(7));
            var _loc12 = Math.round((_loc16 + _loc14) / 2);
            var _loc10 = Math.round((_loc20 + _loc19) / 2);
            var _loc15 = Math.round((_loc18 + _loc17) / 2);
            _loc1 = _loc1 + getRGB(_loc12, _loc10, _loc15).substr(2, 6);
        } // end else if
        var _loc8 = makeChar("DNA-" + _loc1);
        injectFusionTank(3, _loc8);
    } // end else if
} // End of the function
function ejectFusionTank(N)
{
    bg.fusionlab["fusion" + N].char._visible = false;
    bg.fusionlab["fusion" + N].lights.gotoAndStop(3);
    bg.fusionlab["fusion" + N].Target._visible = true;
    fixFusionLights();
    bg.fusionlab["fusion" + N].Target._x = bg.fusionlab["fusion" + N]._x;
    bg.fusionlab["fusion" + N].Target._y = bg.fusionlab["fusion" + N]._y;
    Scramble(bg.fusionlab["fusion" + N].Target);
} // End of the function
function BoxingChenAttack()
{
    var _loc5 = new Array();
    for (c in GameData.Characters)
    {
        var _loc1 = getDist(stage["Boxing Chen"], stage[c]._x, stage[c]._y);
        if (stage[c]._visible && _loc1 < GameData.Toys["Boxing Chen"].Range * (GameData.Characters[c].Scale / 100))
        {
            _loc5.push({ID: c, Dist: _loc1});
        } // end if
    } // end of for...in
    _loc5.sortOn(["Dist", "ID"]);
    var _loc2 = stage[_loc5[0].ID];
    if (_loc2)
    {
        playSound("Boxing");
        stage["Boxing Chen"].Spin = 0;
        stage["Boxing Chen"].XMov = 0;
        stage["Boxing Chen"].YMov = 0;
        stage["Boxing Chen"].AttackRoll = 85;
        stage["Boxing Chen"].Target = _loc2;
        stage["Boxing Chen"].TR = _loc2._rotation;
        stage["Boxing Chen"]._x = _loc2._x + 30 * Math.abs(_loc2._xscale) / 100;
        stage["Boxing Chen"]._y = _loc2._y - 20 * Math.abs(_loc2._yscale) / 100;
        stage["Boxing Chen"]._xscale = Math.abs(_loc2._xscale);
        stage["Boxing Chen"]._yscale = Math.abs(_loc2._yscale);
        if (_loc2._yscale < 0)
        {
            _loc2._rotation = 270;
        }
        else
        {
            _loc2._rotation = 90;
        } // end else if
        _loc2.eyes.gotoAndStop(8);
        _loc2.mouth.gotoAndStop(27);
        _loc2.mouth._visible = true;
        if (stage["Boxing Chen"].getDepth() < _loc2.getDepth())
        {
            BringToFront(stage["Boxing Chen"]);
        } // end if
    } // end if
} // End of the function
function setColorSliderRelease(MC)
{
    MC.onRelease = function ()
    {
        CSRhandler(this);
    };
    MC.onReleaseOutside = function ()
    {
        CSRhandler(this);
    };
} // End of the function
function CSRhandler(MC)
{
    MC.stopDrag();
    delete MC.onEnterFrame;
} // End of the function
function SwapPalette(MC)
{
    var _loc4 = Math.round(MC.Rs._x);
    var _loc5 = Math.round(MC.Gs._x);
    var _loc3 = Math.round(MC.Bs._x);
    colorHex = getRGB(_loc4, _loc5, _loc3);
    ColorPalette(MC.Cp.BG, colorHex);
    if (GameData.TargetType == "Character")
    {
        GameData.Characters[GameData.Target._name].HairColor = colorHex;
        MC._parent.rgbcI.text = GameData.Characters[GameData.Target._name].HairColor.substr(2, 6);
        ColorPalette(GameData.Target.head.HairColor, colorHex);
        ColorPalette(Interface.TargetFrame.preview.char.hair.HairColor, colorHex);
        ColorPalette(GameData.Target.head2.HairColor, colorHex);
        ColorPalette(Interface.TargetFrame.preview.char.head2.HairColor, colorHex);
    }
    else if (GameData.TargetType == "SpeechBubble")
    {
        GameData.SpeechBubbles[GameData.Target._name].FontColor = colorHex;
        MC._parent.rgbcI.text = GameData.SpeechBubbles[GameData.Target._name].FontColor.substr(2, 6);
        var _loc2 = new TextFormat();
        _loc2.color = colorHex;
        GameData.Target.D.setTextFormat(_loc2);
        GameData.Target.D.setNewTextFormat(_loc2);
    } // end else if
} // End of the function
function pongStart()
{
    _root.createEmptyMovieClip("game", 200);
    GameData.GameOn = true;
    game.onEnterFrame = function ()
    {
        if (TopDimmer._alpha < 100)
        {
            TopDimmer._alpha = TopDimmer._alpha + 10;
            GameData.Target._rotation = GameData.Target._rotation + 30;
            GameData.Target._xscale = GameData.Target._xscale * 0.900000;
            GameData.Target._yscale = GameData.Target._yscale * 0.900000;
        }
        else
        {
            game.Paused = false;
            game.Score = 0;
            game.Graze = 0;
            game.ShowScore = 0;
            game.S = 0;
            game.B = 0;
            game.TimeBonus = 300;
            game.TimeBonusC = 30;
            game.Level = 1;
            game.Type = "Pong";
            GameData.Target._visible = false;
            ClickBlocker._visible = true;
            pongFixScale();
            if (GameData.StageCache)
            {
                _root.createEmptyMovieClip("stageShot", 55);
                screenShot(stageShot);
                stage._visible = false;
                bg._visible = false;
                Manipulator._visible = false;
            } // end if
            game.attachMovie("BGBox", "TopBoundry", 1);
            game.TopBoundry._height = 10;
            game.TopBoundry._width = 510;
            game.TopBoundry._x = 20;
            game.TopBoundry._y = 30;
            game.TopBoundry._alpha = GameData.Buttons.Opacity;
            game.attachMovie("BGBox", "BottomBoundry", 2);
            game.BottomBoundry._height = 10;
            game.BottomBoundry._width = 510;
            game.BottomBoundry._x = 20;
            game.BottomBoundry._y = 360;
            game.BottomBoundry._alpha = GameData.Buttons.Opacity;
            game.attachMovie("ReimuBarrier", "bomb", 3);
            game.bomb._xscale = 160;
            game.bomb._yscale = 160;
            game.bomb._y = 190;
            game.bomb._visible = false;
            game.createEmptyMovieClip("bonus", 5);
            game.createEmptyMovieClip("shots", 99);
            game.attachMovie("Char", "Player", 10);
            game.Player.attachMovie("Focus", "hitbox", 10);
            game.Player.hitbox._visible = false;
            game.Player.Power = 0;
            game.Player.attachMovie("ReimuBarrier", "block", 20);
            game.Player.block._x = 50;
            game.Player.block._y = -60;
            game.Player.block._xscale = 110;
            game.Player.block._yscale = 110;
            game.Player.block._visible = false;
            setCharLook(game.Player, GameData.Characters[GameData.Target._name]);
            game.Player.eF = game.Player.eyes._currentframe;
            game.Player.mF = game.Player.mouth._currentframe;
            game.Player.mV = game.Player.mouth._visible;
            game.Player._x = -50;
            game.Player._y = 200;
            game.Player._xscale = 30;
            game.Player._yscale = 30;
            game.Player.Lives = 3;
            game.Player.NextLife = 1000;
            for (i = 0; i < 4; i++)
            {
                game.attachMovie("Paddle", "Op" + i, i + 11);
                game["Op" + i]._xscale = 30;
                game["Op" + i]._yscale = 30;
                game["Op" + i]._visible = false;
            } // end of for
            game.createEmptyMovieClip("Yukari", 20);
            makePresetChar(game.Yukari, "Yukari (IaMP)", "Chr", 20);
            game.Yukari.attachMovie("GapChar", "gap", 10);
            game.Yukari.gap._xscale = -100;
            game.Yukari.gap._x = 100;
            game.Yukari.gap._y = -300;
            game.Yukari.gap._rotation = 90;
            game.Yukari.gap.char._xscale = -100;
            game.Yukari.gap.char._x = 50;
            game.Yukari.gap.char._y = -30;
            game.Yukari.gap.char._rotation = 90;
            game.Yukari.gap.truck._visible = false;
            game.Yukari.gap._visible = false;
            game.Yukari._x = 600;
            game.Yukari._y = 200;
            game.Yukari._xscale = -30;
            game.Yukari._yscale = 30;
            game.Yukari.Speed = 4;
            game.Yukari.Life = 50;
            game.Yukari.MaxLife = 50;
            game.Yukari.GapC = 0;
            game.Yukari.ShotDelay = 100;
            game.Yukari.item._visible = false;
            game.createEmptyMovieClip("Ran", 30);
            makePresetChar(game.Ran, "Ran (2)", "Chr", 10);
            game.Ran.attachMovie("Focus", "hitbox", 20);
            game.Ran.hitbox._visible = false;
            game.Ran._x = 610;
            game.Ran._y = 295;
            game.Ran.Chr._y = 30;
            game.Ran._xscale = -30;
            game.Ran._yscale = 30;
            game.Ran.Speed = 10;
            game.createEmptyMovieClip("Chen", 31);
            makePresetChar(game.Chen, "Chen (2)", "Chr", 10);
            game.Chen.attachMovie("Focus", "hitbox", 20);
            game.Chen.hitbox._visible = false;
            game.Chen._x = 610;
            game.Chen._y = 295;
            game.Chen.Chr._y = 30;
            game.Chen._xscale = -30;
            game.Chen._yscale = 30;
            game.Chen.Speed = 7;
            game.Chen._visible = false;
            game.createEmptyMovieClip("Yuyuko", 32);
            makePresetChar(game.Yuyuko, "Yuyuko (2)", "Chr", 32);
            game.Yuyuko._x = 610;
            game.Yuyuko._y = 295;
            game.Yuyuko._xscale = -30;
            game.Yuyuko._yscale = 30;
            game.Yuyuko.Speed = 4;
            game.Yuyuko._visible = false;
            game.Yuyuko.Chr.wings._visible = false;
            game.Yuyuko.Chr.item._visible = false;
            game.createEmptyMovieClip("Youmu", 33);
            makePresetChar(game.Youmu, "Youmu (2)", "Chr", 10);
            game.Youmu.attachMovie("Focus", "hitbox", 20);
            game.Youmu.hitbox._visible = false;
            game.Youmu._x = 610;
            game.Youmu._y = 295;
            game.Youmu.Chr._y = 30;
            game.Youmu._xscale = -30;
            game.Youmu._yscale = 30;
            game.Youmu.Speed = 4;
            game.Youmu._visible = false;
            game.attachMovie("SpeechBubble", "Talky", 100);
            game.Talky.Bubble.gotoAndStop(1);
            game.Talky._visible = false;
            game.attachMovie("WhiteText", "note", 101);
            setFontSize(game.note.D, 12);
            game.note.D.text = "Press space to continue.\nPress ctrl to skip.";
            game.note.D._width = 200;
            game.note.D._height = 60;
            game.note._x = 40;
            game.note._y = 330;
            game.note._visible = false;
            game.createEmptyMovieClip("Interface", 102);
            game.Interface.attachMovie("WhiteText", "Stat1", 1);
            setFontSize(game.Interface.Stat1.D, 10);
            game.Interface.Stat1.D.text = "Life:\nPower:";
            game.Interface.Stat1.D._height = 60;
            game.Interface.Stat1.D._width = 200;
            game.Interface.Stat1._x = 11;
            game.Interface.Stat1._y = 375;
            for (l = 0; l < 5; l++)
            {
                game.Interface.attachMovie("LifeStar", "Life" + l, 200 + l);
                game.Interface["Life" + l]._xscale = 15;
                game.Interface["Life" + l]._yscale = 15;
                game.Interface["Life" + l]._x = 48 + l * 15;
                game.Interface["Life" + l]._y = 379;
                if (l >= game.Player.Lives)
                {
                    game.Interface["Life" + l]._visible = false;
                } // end if
            } // end of for
            game.Interface.attachMovie("WhiteText", "Stat2", 5);
            setFontSize(game.Interface.Stat2.D, 10);
            game.Interface.Stat2.D.text = "Graze:\nTimeBonus:";
            game.Interface.Stat2.D._height = 60;
            game.Interface.Stat2.D._width = 200;
            game.Interface.Stat2._x = 130;
            game.Interface.Stat2._y = 375;
            game.Interface.attachMovie("WhiteText", "Stat3", 6);
            setFontSize(game.Interface.Stat3.D, 10);
            game.Interface.Stat3.D.text = "Score:\nHi-Score:";
            game.Interface.Stat3.D._height = 60;
            game.Interface.Stat3.D._width = 200;
            game.Interface.Stat3._x = 235;
            game.Interface.Stat3._y = 375;
            game.Interface.attachMovie("WhiteText", "Power", 7);
            setFontSize(game.Interface.Power.D, 10);
            game.Interface.Power.D.text = "0.00/5.00";
            game.Interface.Power.D._height = 60;
            game.Interface.Power.D._width = 200;
            game.Interface.Power._x = 53;
            game.Interface.Power._y = 387;
            game.Interface.attachMovie("WhiteText", "YukariTag", 8);
            setFontSize(game.Interface.YukariTag.D, 10);
            game.Interface.YukariTag.D.text = "Yukari:";
            game.Interface.YukariTag.D._height = 60;
            game.Interface.YukariTag.D._width = 200;
            game.Interface.YukariTag._x = 13;
            game.Interface.YukariTag._y = 10;
            game.Interface.attachMovie("LifeBar", "YukariLife", 9);
            game.Interface.YukariLife._width = 0;
            game.Interface.YukariLife._x = 55;
            game.Interface.YukariLife._y = 8;
            game.Interface.attachMovie("WhiteText", "Score", 10);
            setFontSize(game.Interface.Score.D, 10);
            game.Interface.Score.D.text = "0";
            game.Interface.Score.D._height = 60;
            game.Interface.Score.D._width = 200;
            game.Interface.Score._x = 280;
            game.Interface.Score._y = 374;
            game.Interface.attachMovie("WhiteText", "HiScore", 11);
            setFontSize(game.Interface.HiScore.D, 10);
            game.Interface.HiScore.D.text = GameData.Pong.HiScore;
            game.Interface.HiScore.D._height = 60;
            game.Interface.HiScore.D._width = 200;
            game.Interface.HiScore._x = 289;
            game.Interface.HiScore._y = 387;
            game.Interface.attachMovie("WhiteText", "TimeBonus", 12);
            setFontSize(game.Interface.TimeBonus.D, 10);
            game.Interface.TimeBonus.D.text = game.TimeBonus;
            game.Interface.TimeBonus.D._height = 60;
            game.Interface.TimeBonus.D._width = 200;
            game.Interface.TimeBonus._x = 194;
            game.Interface.TimeBonus._y = 387;
            game.Interface.attachMovie("WhiteText", "Graze", 13);
            setFontSize(game.Interface.Graze.D, 10);
            game.Interface.Graze.D.text = 0;
            game.Interface.Graze.D._height = 60;
            game.Interface.Graze.D._width = 200;
            game.Interface.Graze._x = 168;
            game.Interface.Graze._y = 375;
            game.Interface.attachMovie("WhiteText", "Pause", 14);
            setFontSize(game.Interface.Pause.D, 10);
            game.Interface.Pause.D.text = "Paused";
            game.Interface.Pause.D._height = 60;
            game.Interface.Pause.D._width = 200;
            game.Interface.Pause._x = 249;
            game.Interface.Pause._y = 45;
            game.Interface.Pause._visible = false;
            game.Interface.attachMovie("WhiteText", "Info", 15);
            setFontSize(game.Interface.Info.D, 10);
            game.Interface.Info.D.text = "Up/Down Arrows to move.\nShift or Z to focus.\nX to bomb.\nP to pause.\nDon\'t let anyone past you!";
            game.Interface.Info.D._height = 60;
            game.Interface.Info.D._width = 200;
            game.Interface.Info._x = 48;
            game.Interface.Info._y = 260;
            game.Interface.Info._visible = false;
            game.createEmptyMovieClip("Exit", 200);
            game.Exit.attachMovie("Gap", "BG", 1);
            game.Exit.attachMovie("WhiteText", "D", 2);
            game.Exit.D.D.text = "Exit";
            game.Exit.BG._xscale = 25;
            game.Exit.BG._yscale = 25;
            game.Exit.BG._rotation = 90;
            game.Exit.BG._x = 75;
            game.Exit._x = 460;
            game.Exit._y = 370;
            game.Exit.onRollOver = function ()
            {
                this.BG._x = 85;
                this.BG._y = -5;
                this.BG._xscale = 35;
                this.BG._yscale = 35;
            };
            game.Exit.onRollOut = function ()
            {
                this.BG._x = 75;
                this.BG._y = 0;
                this.BG._xscale = 25;
                this.BG._yscale = 25;
            };
            game.Exit.onRelease = function ()
            {
                this._visible = false;
                game.Player._xscale = game.Player._xscale * -1;
                game.onEnterFrame = function ()
                {
                    game.Player._x = game.Player._x - 5;
                    if (TopDimmer._alpha < 100)
                    {
                        TopDimmer._alpha = TopDimmer._alpha + 10;
                    }
                    else
                    {
                        pongExit();
                    } // end else if
                };
            };
            this.onEnterFrame = function ()
            {
                game.onEnterFrame = function ()
                {
                    if (TopDimmer._alpha > 0)
                    {
                        TopDimmer._alpha = TopDimmer._alpha - 10;
                    }
                    else
                    {
                        pongStage(0);
                    } // end else if
                };
            };
        } // end else if
    };
} // End of the function
function pongSprayShot(A, S, N)
{
    var _loc1 = S / N;
    var _loc5 = A - S / 2;
    for (s = 0; s < N; s++)
    {
        pongSpawnShot(A + s * _loc1);
    } // end of for
} // End of the function
function pongSpawnShot(A)
{
    A = A - 90;
    game.shots.attachMovie("YukariShot", "Shot" + game.B, game.B);
    game.shots["Shot" + game.B]._rotation = A;
    game.shots["Shot" + game.B]._xscale = 40;
    game.shots["Shot" + game.B]._yscale = 40;
    game.shots["Shot" + game.B]._x = game.Yukari._x;
    game.shots["Shot" + game.B]._y = game.Yukari._y;
    var _loc1 = A * 3.141593 / 180;
    var _loc4 = 10 * Math.cos(_loc1);
    var _loc2 = 10 * Math.sin(_loc1);
    game.shots["Shot" + game.B].XMov = _loc4;
    game.shots["Shot" + game.B].YMov = _loc2;
    ++game.B;
} // End of the function
function setFontSize(MC, N)
{
    var _loc1 = new TextFormat();
    _loc1.size = N;
    MC.setNewTextFormat(_loc1);
} // End of the function
function pongFixScale()
{
    var _loc2 = Stage.width * 100 / 550;
    var _loc3 = Stage.height * 100 / 400;
    if (_loc2 < _loc3)
    {
        var _loc1 = _loc2;
    }
    else
    {
        _loc1 = _loc3;
    } // end else if
    game._xscale = _loc1;
    game._yscale = _loc1;
    game._x = (Stage.width - 550 * (_loc1 / 100)) / 2;
} // End of the function
function facialExpression(MC, E, M)
{
    MC.Chr.eyes.gotoAndStop(E);
    if (M == 0)
    {
        MC.Chr.mouth._visible = false;
    }
    else
    {
        MC.Chr.mouth.gotoAndStop(M);
        MC.Chr.mouth._visible = true;
    } // end else if
} // End of the function
function pongStage()
{
    game.Talky._visible = false;
    if (game.S == 0)
    {
        game.onEnterFrame = function ()
        {
            game.Player._x = game.Player._x + 2;
            game.Yukari._x = game.Yukari._x - 2;
            game.Ran._x = game.Ran._x - 2;
            if (game.Player._x > 50)
            {
                pongStage();
            } // end if
        };
    }
    else if (game.S == 1)
    {
        facialExpression(game.Yukari, 5, 1);
        popTalk(game.Talky, "So, you come into my domain to disturb my sleep! Now we must fight, one on one!", 352, 97, 100, 100, 0, -129.850000, 0, 0, 5, 6, -96, 46, 0);
        game.note._visible = true;
        game.Interface.Info._visible = true;
        game.onEnterFrame = function ()
        {
            pongController();
            pongNext();
        };
    }
    else if (game.S == 2)
    {
        facialExpression(game.Ran, 2, 2);
        popTalk(game.Talky, "I fail to see how\nthis is one on one...", 402, 392, 100, 100, 0, -130, -91.350000, 0, 3, -72, 68, 30, -178);
    }
    else if (game.S == 3)
    {
        facialExpression(game.Ran, 1, 0);
        facialExpression(game.Yukari, 5, 2);
        popTalk(game.Talky, "Ran...", 417, 88, 100, 100, 0, -129.850000, 0, 0, 1, 5, -37, 25, 0);
    }
    else if (game.S == 4)
    {
        facialExpression(game.Yukari, 7, 9);
        popTalk(game.Talky, "SHUT UP!", 398, 68, 165, 165, 0, -129.850000, 0, 0, 1, 5, -37, 25, 0);
    }
    else if (game.S == 5)
    {
        game.note.removeMovieClip();
        game.Interface.Info.removeMovieClip();
        facialExpression(game.Yukari, 1, 1);
        game.onEnterFrame = function ()
        {
            pongController();
            if (this.Yukari._y < this.Ran._y)
            {
                this.Yukari._y = this.Yukari._y + 5;
            }
            else
            {
                pongResetBall(this.Ran);
                facialExpression(this.Ran, 29, 9);
                this.onEnterFrame = function ()
                {
                    pongMainLoop();
                };
            } // end else if
        };
    }
    else if (game.S == 6)
    {
        facialExpression(game.Ran, 1, 0);
        facialExpression(game.Yukari, 5, 2);
        popTalk(game.Talky, "What is this?! Ran!\nWhy are we losing?!", 370, 230, 148, 148, 0, -129.850000, -91.350000, 0, 1.600000, -78.400000, -65, 31, 0);
        game.onEnterFrame = function ()
        {
            pongCutscene();
            pongNext();
        };
    }
    else if (game.S == 7)
    {
        facialExpression(game.Ran, 1, 2);
        facialExpression(game.Yukari, 5, 0);
        popTalk(game.Talky, "Maybe if you did more\nthan just throw me\naround...", 343, 267, 100, 100, 0, -129.850000, -91.350000, 0, 1, -83, -76, 53, -14.635463);
    }
    else if (game.S == 8)
    {
        facialExpression(game.Yukari, 5, 9);
        facialExpression(game.Ran, 1, 0);
        popTalk(game.Talky, "Shut up! I\'m trying\nto think.", 363, 217, 109, 109, 0, -129.850000, -91.350000, 0, 5, -85, -59, 30, 0);
    }
    else if (game.S == 9)
    {
        facialExpression(game.Yukari, 5, 0);
        facialExpression(game.Ran, 1, 2);
        popTalk(game.Talky, "Okay... It\'s\njust...", 398, 297, 100, 100, 0, -129.850000, -91.350000, 0, 4, -82, -46, 32, 0);
    }
    else if (game.S == 10)
    {
        facialExpression(game.Yukari, 5, 14);
        facialExpression(game.Ran, 7, 18);
        popTalk(game.Talky, "Ran, SHUT UP!", 343, 254, 166, 166, 0, -129.850000, -91.350000, 0, 6, -85, -51, 20, 0);
    }
    else if (game.S == 11)
    {
        facialExpression(game.Yukari, 5, 0);
        facialExpression(game.Ran, 22, 2);
        popTalk(game.Talky, "But... you asked\nme a question.", 405, 399, 100, 100, 0, -129.850000, -91.350000, 0, 3, -71, 61, 27, 179.462322);
    }
    else if (game.S == 12)
    {
        facialExpression(game.Yukari, 12, 2);
        facialExpression(game.Ran, 22, 0);
        popTalk(game.Talky, "It was rhetorical!", 383, 209, 100, 100, 0, -129.850000, -91.350000, 0, 6, -84, -61, 27, 0.366323);
    }
    else if (game.S == 13)
    {
        facialExpression(game.Yukari, 12, 0);
        facialExpression(game.Ran, 12, 2);
        popTalk(game.Talky, "Alright already...\nsorry...", 395, 310, 100, 100, 0, -129.850000, -91.350000, 0, 6, -84, -59, 29, 0.366323);
    }
    else if (game.S == 14)
    {
        facialExpression(game.Yukari, 1, 1);
        facialExpression(game.Ran, 1, 0);
        popTalk(game.Talky, "Ran, I just came\nup with a brilliant\nidea!", 398, 197, 100, 100, 0, -129.850000, -91.350000, 0, 9, -77, -69, 41, 0.366323);
    }
    else if (game.S == 15)
    {
        facialExpression(game.Ran, 1, 2);
        popTalk(game.Talky, "...What?", 418, 309, 100, 100, 0, -129.850000, -91.350000, 0, 6, -84, -32, 21, 0.366323);
    }
    else if (game.S == 16)
    {
        facialExpression(game.Ran, 1, 0);
        game.onEnterFrame = function ()
        {
            pongController();
            if (this.Yukari._y < this.Ran._y)
            {
                this.Yukari._y = this.Yukari._y + 5;
            }
            else
            {
                pongStage();
            } // end else if
        };
    }
    else if (game.S == 17)
    {
        facialExpression(game.Yukari, 7, 8);
        facialExpression(game.Ran, 29, 9);
        popTalk(game.Talky, "Missiles away!", 375, 329, 155, 155, 0, -129.850000, -91.350000, 0, 6, -84, -49, 14, 0.366323);
        game.onEnterFrame = function ()
        {
            pongController();
            pongNext();
        };
    }
    else if (game.S == 18)
    {
        pongNextLevel();
        game.onEnterFrame = function ()
        {
            pongMainLoop();
        };
    }
    else if (game.S == 19)
    {
        game.Yukari.GapC = 0;
        game.Yukari.gap._visible = false;
        facialExpression(game.Ran, 1, 0);
        facialExpression(game.Yukari, 5, 1);
        popTalk(game.Talky, "Looks like it\'s time\nfor me to use my secret\nweapon!", 370, 197, 100, 100, 0, -129.850000, -91.350000, 0, 8, -75, -79, 39, 0);
        game.onEnterFrame = function ()
        {
            pongCutscene();
            pongNext();
        };
    }
    else if (game.S == 20)
    {
        facialExpression(game.Ran, 1, 2);
        popTalk(game.Talky, "You have a secret\nweapon?", 383, 300, 100, 100, 0, -129.850000, -91.350000, 0, 8, -82, -61, 24, 0);
    }
    else if (game.S == 21)
    {
        facialExpression(game.Yukari, 2, 2);
        facialExpression(game.Ran, 1, 0);
        popTalk(game.Talky, "Of course! You\nshould know what\nit is!", 390, 189, 100, 100, 0, -129.850000, -91.350000, 0, 6, -82, -63, 36, 0);
    }
    else if (game.S == 22)
    {
        facialExpression(game.Yukari, 1, 1);
        game.onEnterFrame = function ()
        {
            pongController();
            if (this.Yukari._y < this.Ran._y)
            {
                this.Yukari._y = this.Yukari._y + 5;
            }
            else
            {
                pongStage();
            } // end else if
        };
    }
    else if (game.S == 23)
    {
        facialExpression(game.Ran, 41, 2);
        popTalk(game.Talky, "Umm...", 429, 396, 100, 100, 0, -129.850000, -91.350000, 0, 1, -79, 37, 21, -170.346176);
        game.onEnterFrame = function ()
        {
            pongController();
            pongNext();
        };
    }
    else if (game.S == 24)
    {
        pongNextLevel();
        pongYukariGap(game.Chen);
        game.onEnterFrame = function ()
        {
            pongMainLoop();
        };
    }
    else if (game.S == 25)
    {
        game.Yukari.GapC = 0;
        game.Yukari.gap._visible = false;
        facialExpression(game.Yukari, 54, 14);
        facialExpression(game.Ran, 1, 0);
        popTalk(game.Talky, "What?! We lost again!\nRan! This is your fault\nsomehow!", 364, 209, 115, 115, 0, -129.850000, -91.350000, 0, 6, -80, -73, 30, 0);
        game.onEnterFrame = function ()
        {
            pongCutscene();
            pongNext();
        };
    }
    else if (game.S == 26)
    {
        facialExpression(game.Yukari, 54, 0);
        facialExpression(game.Ran, 12, 2);
        popTalk(game.Talky, "Maybe you would do\nbetter if you paid\nattention to chen.", 374, 289, 97, 97, 0, -129.850000, -91.350000, 0, 7.750000, -73.900000, -78, 35, 0);
    }
    else if (game.S == 27)
    {
        facialExpression(game.Yukari, 5, 2);
        facialExpression(game.Ran, 1, 0);
        popTalk(game.Talky, "I can\'t concentrate\non more than one thing\nran! I\'m only human!", 373, 193, 97, 97, 0, -129.850000, -91.350000, 0, 7.750000, -73.900000, -78, 35, 0);
    }
    else if (game.S == 28)
    {
        facialExpression(game.Yukari, 5, 0);
        facialExpression(game.Ran, 12, 2);
        popTalk(game.Talky, "Actually, you\'re not\nhuman...", 373, 309, 97, 97, 0, -129.850000, -91.350000, 0, 7.750000, -81.100000, -75, 28, 0);
    }
    else if (game.S == 29)
    {
        facialExpression(game.Yukari, 1, 1);
        facialExpression(game.Ran, 1, 0);
        popTalk(game.Talky, "I know! I\'ve thought\nup of another brilliant\nplan!", 402, 195, 97, 97, 0, -129.850000, -91.350000, 0, 7.750000, -81.100000, -80, 35, 0);
    }
    else if (game.S == 30)
    {
        facialExpression(game.Yukari, 1, 0);
        pongYukariGap(game.Yuyuko);
        game.onEnterFrame = function ()
        {
            if (game.Yukari.GapC > 0)
            {
                game.Yukari.gap.char._x = game.Yukari.gap.char._x - 20;
                --game.Yukari.GapC;
                if (game.Yukari.GapC == 0)
                {
                    game.Yukari.gap._visible = false;
                    game.Yukari.Target._x = game.Yukari._x - 50;
                    game.Yukari.Target._y = game.Yukari._y;
                    game.Yukari.Target._visible = true;
                    facialExpression(game.Yuyuko, 33, 14);
                    popTalk(game.Talky, "Where am I?!", 324, 248, 169, 169, 0, -129.850000, -91.350000, 0, 4.650000, -88.300000, -52, 20, 0);
                    game.onEnterFrame = function ()
                    {
                        pongCutscene();
                        pongNext();
                    };
                } // end if
            } // end if
        };
    }
    else if (game.S == 31)
    {
        game.Yuyuko._xscale = 30;
        facialExpression(game.Yukari, 1, 1);
        facialExpression(game.Yuyuko, 1, 0);
        popTalk(game.Talky, "Yuyuko! Help me\nthrow chen at this\npest!", 433, 167, 100, 100, 0, -129.850000, -91.350000, 0, 8, -74, -60, 37, 0);
    }
    else if (game.S == 32)
    {
        facialExpression(game.Yukari, 1, 0);
        facialExpression(game.Yuyuko, 1, 1);
        popTalk(game.Talky, "K.", 359, 361, 314, 314, 0, -129.850000, -91.350000, 0, 3, -84, -18, 10, 0);
    }
    else if (game.S == 33)
    {
        facialExpression(game.Yuyuko, 1, 0);
        facialExpression(game.Ran, 2, 2);
        popTalk(game.Talky, "I thought you wanted\na one on one fight.", 393, 295, 100, 100, 0, -129.850000, -91.350000, 0, 8, -84, -80, 35, 0);
    }
    else if (game.S == 34)
    {
        facialExpression(game.Ran, 2, 0);
        facialExpression(game.Yukari, 2, 2);
        popTalk(game.Talky, "Ran...", 447, 102, 100, 100, 0, -129.850000, 0, 0, 1, 5, -37, 25, 0);
    }
    else if (game.S == 35)
    {
        facialExpression(game.Yukari, 2, 0);
        game.onEnterFrame = function ()
        {
            pongController();
            if (this.Yukari._y < this.Ran._y - 50)
            {
                this.Yukari._y = this.Yukari._y + 5;
            }
            else
            {
                pongStage();
            } // end else if
        };
    }
    else if (game.S == 36)
    {
        facialExpression(game.Ran, 7, 9);
        popTalk(game.Talky, "I know! I know!", 371, 322, 127, 127, 0, -129.850000, -91.350000, 0, 6, -89, -65, 25, 0);
        game.onEnterFrame = function ()
        {
            pongController();
            pongNext();
        };
    }
    else if (game.S == 37)
    {
        pongNextLevel();
        game.Yuyuko._xscale = -30;
        pongResetBall(game.Ran);
        pongResetBall(game.Chen);
        game.onEnterFrame = function ()
        {
            pongMainLoop();
        };
    }
    else if (game.S == 38)
    {
        game.Yukari.GapC = 0;
        game.Yukari.gap._visible = false;
        facialExpression(game.Ran, 2, 2);
        popTalk(game.Talky, "I think it\'s time to\ngive up...", 390, 302, 100, 100, 0, -129.850000, -91.350000, 0, 8, -83, -67, 38, 0);
        game.onEnterFrame = function ()
        {
            pongCutscene();
            pongNext();
        };
    }
    else if (game.S == 39)
    {
        facialExpression(game.Ran, 2, 0);
        facialExpression(game.Yuyuko, 1, 1);
        popTalk(game.Talky, "I\'m hungry.", 362, 204, 100, 100, 0, -129.850000, -91.350000, 0, 5, -83, -42, 19, 0);
    }
    else if (game.S == 40)
    {
        facialExpression(game.Yuyuko, 1, 0);
        facialExpression(game.Chen, 7, 13);
        popTalk(game.Talky, "Nya.", 432, 113, 100, 100, 0, -129.850000, -91.350000, 0, 5, -83, -42, 19, 0);
        playSound("Meow");
    }
    else if (game.S == 41)
    {
        game.Yuyuko._xscale = 30;
        facialExpression(game.Chen, 7, 30);
        facialExpression(game.Yukari, 5, 9);
        popTalk(game.Talky, "Be quiet all of you!\nThere has to be a way\nto win!", 409, 168, 100, 100, 0, -129.850000, -91.350000, 0, 7, -76, -81, 34, 0);
    }
    else if (game.S == 42)
    {
        facialExpression(game.Yukari, 1, 0);
        facialExpression(game.Yuyuko, 1, 1);
        popTalk(game.Talky, "Maybe Youmu\ncould help.", 353, 195, 100, 100, 0, -129.850000, -91.350000, 0, 7, -79, -58, 24, 0);
    }
    else if (game.S == 43)
    {
        facialExpression(game.Yukari, 1, 1);
        facialExpression(game.Yuyuko, 1, 0);
        popTalk(game.Talky, "Good idea! Let\nme get her.", 418, 196, 100, 100, 0, -129.850000, -91.350000, 0, 7, -79, -58, 24, 0);
    }
    else if (game.S == 44)
    {
        facialExpression(game.Yukari, 1, 0);
        pongYukariGap(game.Youmu);
        game.onEnterFrame = function ()
        {
            if (game.Yukari.GapC > 0)
            {
                game.Yukari.gap.char._x = game.Yukari.gap.char._x - 20;
                --game.Yukari.GapC;
                if (game.Yukari.GapC == 0)
                {
                    game.Yukari.gap._visible = false;
                    game.Yukari.Target._x = game.Yukari._x - 50;
                    game.Yukari.Target._y = game.Yukari._y;
                    game.Yukari.Target._visible = true;
                    facialExpression(game.Youmu, 33, 28);
                    popTalk(game.Talky, "Huh? Where\nis this?", 350, 290, 100, 100, 0, -129.850000, -91.350000, 0, 7, -79, -58, 24, 0);
                    game.onEnterFrame = function ()
                    {
                        pongCutscene();
                        pongNext();
                    };
                } // end if
            } // end if
        };
    }
    else if (game.S == 45)
    {
        facialExpression(game.Yuyuko, 1, 1);
        facialExpression(game.Youmu, 1, 0);
        popTalk(game.Talky, "We need your\nhelp taking down\nthis pest.", 357, 164, 100, 100, 0, -129.850000, -91.350000, 0, 7, -74, -64, 34, 0);
    }
    else if (game.S == 46)
    {
        facialExpression(game.Yuyuko, 1, 0);
        facialExpression(game.Youmu, 1, 2);
        popTalk(game.Talky, "Oh, ok.", 374, 289, 100, 100, 0, -129.850000, -91.350000, 0, 2, -84, -31, 25, 0);
    }
    else if (game.S == 47)
    {
        pongNextLevel();
        facialExpression(game.Youmu, 5, 0);
        game.Yuyuko._xscale = -30;
        pongResetBall(game.Ran);
        pongResetBall(game.Chen);
        pongResetBall(game.Youmu);
        game.onEnterFrame = function ()
        {
            pongMainLoop();
        };
    }
    else if (game.S == 48)
    {
        game.Yukari.GapC = 0;
        game.Yukari.gap._visible = false;
        facialExpression(game.Youmu, 1, 0);
        facialExpression(game.Yukari, 7, 14);
        popTalk(game.Talky, "That\'s it! Now I\'m\nangry!", 420, 178, 100, 100, 0, -129.850000, -91.350000, 0, 8, -86, -58, 34, 0);
        game.onEnterFrame = function ()
        {
            pongCutscene();
            pongNext();
        };
    }
    else if (game.S == 49)
    {
        facialExpression(game.Yukari, 7, 0);
        facialExpression(game.Ran, 8, 28);
        popTalk(game.Talky, "Uh oh, looks like\nshe\'s finally getting\nserious now.", 425, 255, 100, 100, 0, -129.850000, -91.350000, 0, 6, -72, -69, 43, 0);
    }
    else if (game.S == 50)
    {
        pongNextLevel();
        facialExpression(game.Yukari, 5, 0);
        facialExpression(game.Ran, 1, 0);
        pongResetBall(game.Ran);
        pongResetBall(game.Chen);
        pongResetBall(game.Youmu);
        game.onEnterFrame = function ()
        {
            pongMainLoop();
        };
    }
    else if (game.S == 51)
    {
        game.Yukari.GapC = 0;
        game.Yukari.gap._visible = false;
        facialExpression(game.Yukari, 7, 14);
        popTalk(game.Talky, "I\'ve had enough\nof this!!", 394, 227, 188, 188, 0, -129.850000, -91.350000, 0, 3.800000, -81.400000, -53, 24, -1.366580);
        game.Wait = 50;
        game.onEnterFrame = function ()
        {
            pongCutscene();
            if (game.Wait > 0)
            {
                --game.Wait;
            }
            else
            {
                game.attachMovie("GapChar", "GapTruck", 999);
                game.GapTruck.char._visible = false;
                game.GapTruck.truck._xscale = -100;
                game.GapTruck.truck._x = 850;
                game.GapTruck._x = 500;
                game.GapTruck._y = 230;
                game.GapTruck._xscale = 0;
                game.GapTruck._yscale = 0;
                game.GapTruck.S = false;
                game.onEnterFrame = function ()
                {
                    if (game.GapTruck._xscale < 100)
                    {
                        game.GapTruck._xscale = game.GapTruck._xscale + 10;
                        game.GapTruck._yscale = game.GapTruck._yscale + 10;
                    }
                    else
                    {
                        if (!game.GapTruck.S)
                        {
                            playSound("Truck");
                            game.GapTruck.S = true;
                        } // end if
                        game.GapTruck.truck._x = game.GapTruck.truck._x - 60;
                        if (game.GapTruck.truck._x + game.GapTruck._x < game.Player._x + 600)
                        {
                            game.Player.eyes.gotoAndStop(9);
                            game.Player.mouth.gotoAndStop(14);
                            game.Player.mouth._visible = true;
                            game.onEnterFrame = function ()
                            {
                                if (game.Player._xscale > 0)
                                {
                                    if (game.Player._xscale == 30)
                                    {
                                        playSound("Boxing");
                                    } // end if
                                    --game.Player._xscale;
                                    --game.Player._yscale;
                                    game.Player._rotation = game.Player._rotation - 15;
                                    game.Player._x = game.Player._x - 60;
                                    game.Player._y = game.Player._y - 60;
                                    game.GapTruck.truck._x = game.GapTruck.truck._x - 60;
                                }
                                else
                                {
                                    game.GapTruck._visible = false;
                                    game.Interface._visible = false;
                                    game.TopBoundry._visible = false;
                                    game.BottomBoundry._visible = false;
                                    game.Yukari.gap._visible = false;
                                    game.Yukari.wings._visible = false;
                                    game.Yukari._xscale = -150;
                                    game.Yukari._yscale = 150;
                                    game.Yukari._x = 450;
                                    game.Yukari._y = 450;
                                    game.Yukari.eyes.gotoAndStop(12);
                                    game.Yukari.mouth.gotoAndStop(27);
                                    game.Yukari.mouth._visible = true;
                                    game.Yuyuko._visible = false;
                                    game.Ran._visible = false;
                                    game.Chen._visible = false;
                                    game.Youmu._visible = false;
                                    game.shots._visible = false;
                                    game.bonus._visible = false;
                                    game.attachMovie("WhiteText", "GameOver", 43);
                                    setFontSize(game.GameOver.D, 50);
                                    game.GameOver.D.text = "You win!";
                                    game.GameOver.D._height = 60;
                                    game.GameOver.D._width = 500;
                                    game.GameOver._x = 100;
                                    game.GameOver._y = 30;
                                    game.attachMovie("WhiteText", "GameOverStats", 44);
                                    setFontSize(game.GameOverStats.D, 20);
                                    game.GameOverStats.D.text = "Your Score:\nHi-Score:";
                                    game.GameOverStats.D._height = 60;
                                    game.GameOverStats.D._width = 500;
                                    game.GameOverStats._x = 17;
                                    game.GameOverStats._y = 253;
                                    game.Exit._x = 50;
                                    game.Exit._y = 330;
                                    game.Exit._xscale = 200;
                                    game.Exit._yscale = 200;
                                    game.attachMovie("WhiteText", "YourScore", 45);
                                    setFontSize(game.YourScore.D, 20);
                                    game.YourScore.D.text = game.Score;
                                    game.YourScore.D._height = 60;
                                    game.YourScore.D._width = 500;
                                    game.YourScore._x = 160;
                                    game.YourScore._y = 251;
                                    game.attachMovie("WhiteText", "HiScore", 46);
                                    setFontSize(game.HiScore.D, 20);
                                    game.HiScore.D.text = GameData.Pong.HiScore;
                                    my_so.data.PongHiScore = GameData.Pong.HiScore;
                                    my_so.flush();
                                    game.HiScore.D._height = 60;
                                    game.HiScore.D._width = 500;
                                    game.HiScore._x = 120;
                                    game.HiScore._y = 275;
                                    game.attachMovie("WhiteText", "GameOver2", 47);
                                    setFontSize(game.GameOver2.D, 20);
                                    game.GameOver2.D.text = "I guess...";
                                    game.GameOver2.D._height = 60;
                                    game.GameOver2.D._width = 500;
                                    game.GameOver2._x = 22;
                                    game.GameOver2._y = 88;
                                    game.attachMovie("WhiteText", "GameOver3", 48);
                                    setFontSize(game.GameOver3.D, 14);
                                    game.GameOver3.D.text = "Yukari cheated...";
                                    game.GameOver3.D._height = 60;
                                    game.GameOver3.D._width = 500;
                                    game.GameOver3._x = 157;
                                    game.GameOver3._y = 130;
                                    popTalk(game.Talky, "Did not", 263, 298, 128, 128, 0, -129.850000, -91.350000, 0, 6, -85, -30, 19, 0);
                                    delete game.onEnterFrame;
                                } // end else if
                            };
                        } // end if
                    } // end else if
                };
            } // end else if
        };
    } // end else if
    ++game.S;
} // End of the function
function pongNextLevel()
{
    ++game.Level;
    game.Yukari.MaxLife = game.Level * 50;
    game.Yukari.Life = game.Yukari.MaxLife;
    game.TimeBonus = game.Level * 300;
    game.Interface.TimeBonus.D.text = game.TimeBonus;
    pongResetBall(this.Ran);
} // End of the function
function pongCutscene()
{
    pongYukariLifeFix();
    for (b in game.bonus)
    {
        if (getDist(game.bonus[b], game.Player._x, game.Player._y) < 30)
        {
            playSound("ItemGet");
            if (game.bonus[b].Type == "P1")
            {
                game.bonus[b].removeMovieClip();
                pongGetPower(5);
            }
            else if (game.bonus[b].Type == "P2")
            {
                game.bonus[b].removeMovieClip();
                pongGetPower(100);
            }
            else
            {
                game.bonus[b].removeMovieClip();
                pongAddScore(10);
            } // end else if
            continue;
        } // end if
        game.bonus[b]._x = game.bonus[b]._x + (game.Player._x - game.bonus[b]._x) / 10;
        game.bonus[b]._y = game.bonus[b]._y + (game.Player._y - game.bonus[b]._y) / 10;
    } // end of for...in
    game.Yukari._y = game.Yukari._y + (200 - game.Yukari._y) / 5;
    game.Ran._y = game.Ran._y + (300 - game.Ran._y) / 5;
    game.Ran._x = game.Ran._x + (500 - game.Ran._x) / 5;
    game.Ran._rotation = game.Ran._rotation + -game.Ran._rotation / 5;
    if (game.Chen._visible)
    {
        game.Chen._y = game.Chen._y + (100 - game.Chen._y) / 5;
        game.Chen._x = game.Chen._x + (500 - game.Chen._x) / 5;
        game.Chen._rotation = game.Chen._rotation + -game.Chen._rotation / 5;
    } // end if
    if (game.Yuyuko._visible)
    {
        game.Yuyuko._y = game.Yuyuko._y + (200 - game.Yuyuko._y) / 5;
        game.Yuyuko._x = game.Yuyuko._x + (430 - game.Yuyuko._x) / 5;
    } // end if
    if (game.Youmu._visible)
    {
        game.Youmu._y = game.Youmu._y + (290 - game.Youmu._y) / 5;
        game.Youmu._x = game.Youmu._x + (435 - game.Youmu._x) / 5;
        game.Youmu._rotation = game.Youmu._rotation + -game.Youmu._rotation / 5;
    } // end if
    pongController();
} // End of the function
function pongYukariGap(T)
{
    mimeLook(T.Chr, game.Yukari.gap.char);
    game.Yukari.gap.char._x = 50;
    game.Yukari.gap._visible = true;
    T._visible = false;
    game.Yukari.Target = T;
    game.Yukari.GapC = 20;
} // End of the function
function popTalk(MC, T, X, Y, Xs, Ys, R, tX, tY, tR, bX, bY, bXs, bYs, bR)
{
    MC.D.text = T;
    MC.D._x = tX;
    MC.D._y = tY;
    MC.D._rotation = tR;
    MC.Bubble._x = bX;
    MC.Bubble._y = bY;
    MC.Bubble._xscale = bXs;
    MC.Bubble._yscale = bYs;
    MC.Bubble._rotation = bR;
    MC._x = X;
    MC._y = Y;
    MC._xscale = Xs;
    MC._yscale = Ys;
    MC._rotation = R;
    MC._visible = true;
    playSound("Pop");
} // End of the function
function pongController()
{
    if (Key.isDown(16) || Key.isDown(90))
    {
        game.Player.hitbox._visible = true;
        if (game.Player.block._alpha < 20 || !game.Player.block._visible)
        {
            game.Player.block._visible = true;
            game.Player.block._alpha = 20;
        } // end if
        game.Ran.hitbox._visible = true;
        game.Chen.hitbox._visible = true;
        game.Youmu.hitbox._visible = true;
        if (Key.isDown(38))
        {
            pongMovePlayer(-4);
        }
        else if (Key.isDown(40))
        {
            pongMovePlayer(4);
        } // end else if
    }
    else
    {
        game.Player.hitbox._visible = false;
        game.Ran.hitbox._visible = false;
        game.Chen.hitbox._visible = false;
        game.Youmu.hitbox._visible = false;
        if (Key.isDown(38))
        {
            pongMovePlayer(-10);
        }
        else if (Key.isDown(40))
        {
            pongMovePlayer(10);
        } // end else if
    } // end else if
    for (i = 0; i < 4; i++)
    {
        if (game["Op" + i]._visible)
        {
            if (Key.isDown(16) || Key.isDown(90))
            {
                game["Op" + i]._x = game["Op" + i]._x + (game.Player._x + game["Op" + i].fXMod - game["Op" + i]._x) / 3;
                game["Op" + i]._y = game["Op" + i]._y + (game.Player._y + game["Op" + i].fYMod - game["Op" + i]._y) / 3;
                continue;
            } // end if
            game["Op" + i]._x = game["Op" + i]._x + (game.Player._x + game["Op" + i].XMod - game["Op" + i]._x) / 5;
            game["Op" + i]._y = game["Op" + i]._y + (game.Player._y + game["Op" + i].YMod - game["Op" + i]._y) / 5;
        } // end if
    } // end of for
    if (game.Player.block._visible)
    {
        if ((Key.isDown(16) || Key.isDown(90)) && game.Player.block._alpha > 20 || !(Key.isDown(16) || Key.isDown(90)))
        {
            game.Player.block._alpha = game.Player.block._alpha - 5;
            if (game.Player.block._alpha <= 0)
            {
                game.Player.block._visible = false;
            } // end if
        } // end if
    } // end if
} // End of the function
function pongMovePlayer(M)
{
    if (game.Player._y + M > GameData.Pong.Bottom)
    {
        game.Player._y = GameData.Pong.Bottom;
    }
    else if (game.Player._y + M < GameData.Pong.Top)
    {
        game.Player._y = GameData.Pong.Top;
    }
    else
    {
        game.Player._y = game.Player._y + M;
    } // end else if
} // End of the function
function pongNext()
{
    if (Key.isDown(32))
    {
        if (!GameData.Keys.Space)
        {
            pongStage();
            GameData.Keys.Space = true;
        } // end if
    }
    else
    {
        GameData.Keys.Space = false;
    } // end else if
    if (Key.isDown(17))
    {
        pongStage();
    } // end if
} // End of the function
function pongPaddleHit(MC, T)
{
    if (Math.abs(MC._x + MC.XMov - T._x) < 30)
    {
        if (MC._y < T._y + 30 && MC._y > T._y - 70)
        {
            return (true);
        } // end if
    } // end if
    return (false);
} // End of the function
function pongBallMove(MC)
{
    if (MC.XMov < 0)
    {
        var _loc2 = false;
        if (game.Player.Power >= 100)
        {
            for (i = 0; i < 4; i++)
            {
                if (game["Op" + i]._visible && pongPaddleHit(MC, game["Op" + i]))
                {
                    MC._x = game["Op" + i]._x - (MC.XMov - (MC._x - game["Op" + i]._x));
                    MC.XMov = MC.XMov * -1;
                    MC.YMov = MC.YMov + Math.floor((MC._y - (game["Op" + i]._y - 20)) / 10);
                    MC.XMov = MC.XMov - 0.100000;
                    MC.Spin = MC.Spin - 0.100000;
                    _loc2 = true;
                } // end if
            } // end of for
        } // end if
        if (!_loc2)
        {
            if (pongPaddleHit(MC, game.Player))
            {
                if (game.Player.hitStun > 0)
                {
                    game.Player.hitStun = 30;
                    game.Player._rotation = game.Player._rotation - 5;
                    MC.XMov = MC.XMov - 0.100000;
                    MC.Spin = MC.Spin - 0.100000;
                }
                else if (Key.isDown(16) || Key.isDown(90))
                {
                    game.Player.block._visible = true;
                    game.Player.block._alpha = 100;
                    MC.XMov = MC.XMov - 0.200000;
                    MC.Spin = MC.Spin - 0.200000;
                    pongSpawnBonus(700, game.Player._y, "P1");
                }
                else
                {
                    game.Player.hitStun = 30;
                    game.Player._rotation = -15;
                    game.Player.eyes.gotoAndStop(7);
                    game.Player.mouth.gotoAndStop(9);
                    game.Player.mouth._visible = true;
                    MC.XMov = MC.XMov - 0.100000;
                    MC.Spin = MC.Spin - 0.100000;
                } // end else if
                MC._x = game.Player._x - (MC.XMov - (MC._x - game.Player._x));
                MC.XMov = MC.XMov * -1;
                MC.YMov = MC.YMov + Math.floor((MC._y - (game.Player._y - 20)) / 10);
            }
            else if (MC._x < 50 && game.bomb.Limit > 0)
            {
                MC.XMov = MC.XMov * -1;
                MC.XMov = MC.XMov + 1;
                game.bomb.Limit = game.bomb.Limit - 25;
            }
            else
            {
                MC._x = MC._x + MC.XMov;
            } // end else if
        } // end else if
    }
    else if (MC.XMov > 0)
    {
        if (pongPaddleHit(MC, game.Yukari))
        {
            MC._x = game.Yukari._x - (MC.XMov - (MC._x - game.Yukari._x));
            MC.XMov = MC.XMov * -1;
            MC.YMov = MC.YMov + Math.floor((MC._y - (game.Yukari._y - 20)) / 10);
            pongDamageYukari(1);
        }
        else if (game.Yuyuko._visible && pongPaddleHit(MC, game.Yuyuko))
        {
            MC._x = game.Yuyuko._x - (MC.XMov - (MC._x - game.Yuyuko._x));
            MC.XMov = MC.XMov * -1;
            MC.YMov = MC.YMov + Math.floor((MC._y - (game.Yuyuko._y - 20)) / 10);
        }
        else
        {
            MC._x = MC._x + MC.XMov;
        } // end else if
    } // end else if
    if (MC._y + MC.YMov < GameData.Pong.Top && MC.YMov < 0)
    {
        MC._y = GameData.Pong.Top - (MC.YMov - (MC._y - GameData.Pong.Top));
        MC.YMov = MC.YMov * -1;
    }
    else if (MC._y + MC.YMov > GameData.Pong.Bottom && MC.YMov > 0)
    {
        MC._y = GameData.Pong.Bottom - (MC.YMov - (MC._y - GameData.Pong.Bottom));
        MC.YMov = MC.YMov * -1;
    }
    else
    {
        MC._y = MC._y + MC.YMov;
    } // end else if
    MC._rotation = MC._rotation + MC.Spin;
    if (MC._x < -100 && game.Yukari.GapC == 0)
    {
        pongYukariGap(MC);
        pongLoseLife();
    }
    else if (MC._x > 800 && game.Yukari.GapC == 0)
    {
        pongDamageYukari(10);
        pongSpawnBonus(MC._x + (random(21) - 10) * 5, MC._y + (random(21) - 10) * 5, "S");
        pongSpawnBonus(MC._x + (random(21) - 10) * 5, MC._y + (random(21) - 10) * 5, "S");
        if (game.Yukari.Life < 1)
        {
            pongSpawnBonus(MC._x + (random(21) - 10) * 5, MC._y + (random(21) - 10) * 5, "S");
            pongSpawnBonus(MC._x + (random(21) - 10) * 5, MC._y + (random(21) - 10) * 5, "S");
        }
        else
        {
            pongSpawnBonus(MC._x, MC._y, "P1");
            pongSpawnBonus(MC._x + (random(21) - 10) * 5, MC._y + (random(21) - 10) * 5, "P1");
            pongSpawnBonus(MC._x + (random(21) - 10) * 5, MC._y + (random(21) - 10) * 5, "P1");
            pongYukariGap(MC);
        } // end else if
    } // end else if
} // End of the function
function pongDamageYukari(D)
{
    game.Yukari.Life = game.Yukari.Life - D * (game.Player.Power / 100 + 1);
    pongAddScore(D);
    if (game.Yukari.Life < 1)
    {
        pongAddScore(game.TimeBonus);
        game.Yukari.Life = 0;
        for (s in game.shots)
        {
            pongSpawnBonus(game.shots[s]._x, game.shots[s]._y, "S");
            game.shots[s].removeMovieClip();
        } // end of for...in
        pongSpawnBonus(game.Yukari._x, game.Yukari._y, "P2");
        pongStage();
    } // end if
} // End of the function
function pongSpawnBonus(X, Y, T)
{
    if (game.Player.Power == 500 || T == "S")
    {
        game.bonus.attachMovie("PointItem", "BonusPoint" + game.B, game.B);
        game.bonus["BonusPoint" + game.B]._x = X;
        game.bonus["BonusPoint" + game.B]._y = Y;
        game.bonus["BonusPoint" + game.B].Speed = 5;
        game.bonus["BonusPoint" + game.B].XMov = -10;
        game.bonus["BonusPoint" + game.B].Type = "S";
        game.bonus["BonusPoint" + game.B]._xscale = 30;
        game.bonus["BonusPoint" + game.B]._yscale = 30;
    }
    else
    {
        game.bonus.attachMovie("Powerup", "PowerUp" + game.B, game.B);
        game.bonus["PowerUp" + game.B]._x = X;
        game.bonus["PowerUp" + game.B]._y = Y;
        game.bonus["PowerUp" + game.B].Speed = 5;
        game.bonus["PowerUp" + game.B].XMov = -10;
        game.bonus["PowerUp" + game.B].Type = T;
        if (T == "P2")
        {
            game.bonus["PowerUp" + game.B]._xscale = 50;
            game.bonus["PowerUp" + game.B]._yscale = 50;
        }
        else
        {
            game.bonus["PowerUp" + game.B]._xscale = 30;
            game.bonus["PowerUp" + game.B]._yscale = 30;
        } // end else if
    } // end else if
    ++game.B;
} // End of the function
function pongResetBall(T)
{
    if (T._name == "Ran")
    {
        T.XMov = T.Speed * -1;
        if (game.Yukari._y > game.Player._y)
        {
            T.YMov = 1;
        }
        else
        {
            T.YMov = -1;
        } // end else if
        T.Spin = T.Speed * -1;
    }
    else if (T._name == "Chen")
    {
        T.XMov = T.Speed * -1;
        if (game.Yukari._y > game.Player._y)
        {
            T.YMov = T.Speed;
        }
        else
        {
            T.YMov = T.Speed * -1;
        } // end else if
        T.Spin = T.Speed * -1;
    }
    else if (T._name == "Youmu")
    {
        T.XMov = T.Speed * -1;
        T.YMov = 0;
        T.Spin = 0;
    } // end else if
    T._rotation = T.Spin;
    T.Mode = "Ball";
} // End of the function
function pongShowPower()
{
    trace (game.Player.Power);
    var _loc1 = game.Player.Power / 100;
    var _loc2 = String(_loc1);
    if (_loc2.length == 3)
    {
        game.Interface.Power.D.text = _loc1 + "0/5.00";
    }
    else if (_loc2.length == 1)
    {
        game.Interface.Power.D.text = _loc1 + ".00/5.00";
    }
    else
    {
        game.Interface.Power.D.text = _loc1 + "/5.00";
    } // end else if
} // End of the function
function pongGetPower(N)
{
    if (game.Player.Power < 500)
    {
        if (game.Player.Power + N >= 500)
        {
            playSound("PowerUp");
            for (b in game.bonus)
            {
                if (game.bonus[b].T != "S")
                {
                    pongSpawnBonus(game.bonus[b]._x, game.bonus[b]._y, "S");
                    game.bonus[b].removeMovieClip();
                } // end if
            } // end of for...in
            game.Player.Power = 500;
        }
        else
        {
            game.Player.Power = game.Player.Power + N;
        } // end else if
        pongShowPower();
        var _loc1 = Math.floor(game.Player.Power / 100 - 1);
        if (_loc1 >= 0 && _loc1 < 4 && !game["Op" + _loc1]._visible)
        {
            playSound("PowerUp");
            game["Op" + _loc1]._x = game.Player._x;
            game["Op" + _loc1]._y = game.Player._y;
            game["Op" + _loc1]._visible = true;
            pongPaddleFormation(_loc1);
        } // end if
    } // end if
} // End of the function
function pongPaddleFormation(N)
{
    if (N == 0)
    {
        game.Op0.XMod = 50;
        game.Op0.YMod = 0;
        game.Op0.fXMod = 100;
        game.Op0.fYMod = 0;
    }
    else if (N == 1)
    {
        game.Op0.XMod = 0;
        game.Op0.YMod = 50;
        game.Op0.fXMod = 50;
        game.Op0.fYMod = 35;
        game.Op1.XMod = 0;
        game.Op1.YMod = -100;
        game.Op1.fXMod = 50;
        game.Op1.fYMod = -50;
    }
    else if (N == 2)
    {
        game.Op0.XMod = 0;
        game.Op0.YMod = 50;
        game.Op0.fXMod = 50;
        game.Op0.fYMod = 35;
        game.Op1.XMod = 0;
        game.Op1.YMod = -100;
        game.Op1.fXMod = 50;
        game.Op1.fYMod = -50;
        game.Op2.XMod = 50;
        game.Op2.YMod = 0;
        game.Op2.fXMod = 100;
        game.Op2.fYMod = 0;
    }
    else if (N == 3)
    {
        game.Op0.XMod = 0;
        game.Op0.YMod = 50;
        game.Op0.fXMod = 50;
        game.Op0.fYMod = 35;
        game.Op1.XMod = 0;
        game.Op1.YMod = -100;
        game.Op1.fXMod = 50;
        game.Op1.fYMod = -50;
        game.Op2.XMod = 50;
        game.Op2.YMod = 35;
        game.Op2.fXMod = 0;
        game.Op2.fYMod = 200;
        game.Op3.XMod = 50;
        game.Op3.YMod = -50;
        game.Op3.fXMod = 0;
        game.Op3.fYMod = -250;
    } // end else if
} // End of the function
function pongLoseLife()
{
    if (!game.bomb._visible)
    {
        pongSpawnBonus(700, game.Player._y + 30, "P1");
        pongSpawnBonus(700, game.Player._y - 30, "P1");
        playSound("Death");
        if (game.Player.Lives == 0)
        {
            game.Player.eyes.gotoAndStop(9);
            game.Player.mouth.gotoAndStop(14);
            game.Player.mouth._visible = true;
            game.onEnterFrame = function ()
            {
                if (game.Player._xscale > 0)
                {
                    --game.Player._xscale;
                    --game.Player._yscale;
                    game.Player._rotation = game.Player._rotation - 15;
                }
                else
                {
                    game.Interface._visible = false;
                    game.TopBoundry._visible = false;
                    game.BottomBoundry._visible = false;
                    game.Yukari.gap._visible = false;
                    game.Yukari.wings._visible = false;
                    game.Yukari._xscale = -150;
                    game.Yukari._yscale = 150;
                    game.Yukari._x = 450;
                    game.Yukari._y = 450;
                    game.Yukari.eyes.gotoAndStop(1);
                    game.Yukari.mouth.gotoAndStop(1);
                    game.Yukari.mouth._visible = true;
                    game.Yuyuko._visible = false;
                    game.Ran._visible = false;
                    game.Chen._visible = false;
                    game.Youmu._visible = false;
                    game.shots._visible = false;
                    game.bonus._visible = false;
                    game.attachMovie("WhiteText", "GameOver", 43);
                    setFontSize(game.GameOver.D, 50);
                    game.GameOver.D.text = "Game Over";
                    game.GameOver.D._height = 60;
                    game.GameOver.D._width = 500;
                    game.GameOver._x = 100;
                    game.GameOver._y = 30;
                    game.attachMovie("WhiteText", "GameOverStats", 44);
                    setFontSize(game.GameOverStats.D, 20);
                    game.GameOverStats.D.text = "Your Score:\nHi-Score:";
                    game.GameOverStats.D._height = 60;
                    game.GameOverStats.D._width = 500;
                    game.GameOverStats._x = 17;
                    game.GameOverStats._y = 253;
                    game.Exit._x = 50;
                    game.Exit._y = 330;
                    game.Exit._xscale = 200;
                    game.Exit._yscale = 200;
                    game.attachMovie("WhiteText", "YourScore", 45);
                    setFontSize(game.YourScore.D, 20);
                    game.YourScore.D.text = game.Score;
                    game.YourScore.D._height = 60;
                    game.YourScore.D._width = 500;
                    game.YourScore._x = 160;
                    game.YourScore._y = 251;
                    game.attachMovie("WhiteText", "HiScore", 46);
                    setFontSize(game.HiScore.D, 20);
                    game.HiScore.D.text = GameData.Pong.HiScore;
                    my_so.data.PongHiScore = GameData.Pong.HiScore;
                    my_so.flush();
                    game.HiScore.D._height = 60;
                    game.HiScore.D._width = 500;
                    game.HiScore._x = 120;
                    game.HiScore._y = 275;
                    popTalk(game.Talky, "Bow before me\nweakling!", 258, 250, 118, 118, 0, -129.850000, -91.350000, 0, 5, -84, -56, 35, 0);
                    delete game.onEnterFrame;
                } // end else if
            };
        }
        else
        {
            --game.Player.Lives;
            game.Interface["Life" + game.Player.Lives]._visible = false;
            game.bomb._alpha = 100;
            game.bomb._visible = true;
            game.bomb.Limit = 100;
        } // end if
    } // end else if
} // End of the function
function pongMainLoop()
{
    if (Key.isDown(80))
    {
        if (!GameData.Keys.P)
        {
            if (game.Paused)
            {
                game.Paused = false;
                game.Interface.Pause._visible = false;
            }
            else
            {
                game.Paused = true;
                game.Interface.Pause._visible = true;
            } // end else if
            GameData.Keys.P = true;
        } // end if
    }
    else
    {
        GameData.Keys.P = false;
    } // end else if
    if (game.ShowScore < game.Score)
    {
        if (game.Score - game.ShowScore > 100)
        {
            game.ShowScore = game.ShowScore + 10;
        }
        else
        {
            ++game.ShowScore;
        } // end else if
        if (game.ShowScore > game.Player.NextLife)
        {
            if (game.Player.Lives < 5)
            {
                playSound("PowerUp");
                game.Interface["Life" + game.Player.Lives]._visible = true;
                ++game.Player.Lives;
            } // end if
            game.Player.NextLife = game.Player.NextLife + 1000;
        } // end if
        game.Interface.Score.D.text = game.ShowScore;
        if (game.ShowScore > Number(game.Interface.HiScore.D.text))
        {
            game.Interface.HiScore.D.text = game.ShowScore;
        } // end if
    } // end if
    if (!game.Paused)
    {
        pongYukariLifeFix();
        if (game.TimeBonus > 0)
        {
            if (game.TimeBonusC > 0)
            {
                --game.TimeBonusC;
            }
            else
            {
                --game.TimeBonus;
                game.TimeBonusC = 30;
                game.Interface.TimeBonus.D.text = game.TimeBonus;
            } // end if
        } // end else if
        for (s in game.shots)
        {
            game.shots[s]._x = game.shots[s]._x + game.shots[s].XMov;
            game.shots[s]._y = game.shots[s]._y + game.shots[s].YMov;
            if (game.shots[s]._x < -300)
            {
                game.shots[s].removeMovieClip();
                continue;
            } // end if
            if (getDist(game.shots[s], game.Player._x, game.Player._y) < 6)
            {
                pongLoseLife();
                game.shots[s].removeMovieClip();
                continue;
            } // end if
            if (getDist(game.shots[s], game.Player._x, game.Player._y) < 20)
            {
                game.shots[s].Graze = true;
                continue;
            } // end if
            if (game.shots[s].Graze)
            {
                pongSpawnBonus(700, game.Player._y, "P1");
                playSound("Graze");
                ++game.Graze;
                game.Interface.Graze.D.text = game.Graze;
                game.shots[s].Graze = false;
            } // end if
        } // end of for...in
        if (Key.isDown(192) && GameData.DevMode)
        {
            if (!GameData.Keys.Dev)
            {
                pongDamageYukari(game.Yukari.Life);
                pongSpawnBonus(game.Player._x + 100, game.Player._y, "P2");
                GameData.Keys.Dev = true;
            } // end if
        }
        else
        {
            GameData.Keys.Dev = false;
        } // end else if
        for (b in game.bonus)
        {
            if (game.bonus[b]._x < -300)
            {
                game.bonus[b].removeMovieClip();
                continue;
            } // end if
            if (getDist(game.bonus[b], game.Player._x, game.Player._y) < 30)
            {
                playSound("ItemGet");
                if (game.bonus[b].Type == "P1")
                {
                    game.bonus[b].removeMovieClip();
                    pongGetPower(5);
                }
                else if (game.bonus[b].Type == "P2")
                {
                    game.bonus[b].removeMovieClip();
                    pongGetPower(100);
                }
                else
                {
                    game.bonus[b].removeMovieClip();
                    pongAddScore(10);
                } // end else if
                continue;
            } // end if
            if (getDist(game.bonus[b], game.Player._x, game.Player._y) < 60)
            {
                game.bonus[b]._x = game.bonus[b]._x + (game.Player._x - game.bonus[b]._x) / 10;
                game.bonus[b]._y = game.bonus[b]._y + (game.Player._y - game.bonus[b]._y) / 10;
                continue;
            } // end if
            if (game.bonus[b].XMov < game.bonus[b].Speed)
            {
                ++game.bonus[b].XMov;
            } // end if
            game.bonus[b]._x = game.bonus[b]._x - game.bonus[b].XMov;
        } // end of for...in
        if (game.bomb.Limit > 0)
        {
            --game.bomb.Limit;
        }
        else if (game.bomb._visible)
        {
            game.bomb._alpha = game.bomb._alpha - 5;
            if (game.bomb._alpha < 0)
            {
                game.bomb._visible = false;
            } // end if
        }
        else if (Key.isDown(88) && game.Player.Power >= 100)
        {
            pongBomb();
        } // end else if
        if (game.Player.hitStun > 0)
        {
            --game.Player.hitStun;
            if (game.Player.hitStun == 0)
            {
                game.Player._rotation = 0;
                game.Player.eyes.gotoAndStop(game.Player.eF);
                game.Player.mouth.gotoAndStop(game.Player.mF);
                game.Player.mouth._visible = game.Player.mV;
            } // end if
        }
        else
        {
            pongController();
        } // end else if
        if (game.Ran.Mode == "Ball")
        {
            pongBallMove(game.Ran);
        } // end if
        if (game.Chen.Mode == "Ball")
        {
            pongBallMove(game.Chen);
        } // end if
        if (game.Youmu.Mode == "Ball")
        {
            if (game.Youmu._x > 225 && game.Youmu.XMov > 0)
            {
                game.Youmu.XMov = Math.floor(game.Youmu.XMov * 0.900000);
            }
            else
            {
                game.Youmu.XMov = game.Youmu.XMov - 1;
            } // end else if
            pongBallMove(game.Youmu);
            game.Youmu._rotation = game.Youmu.XMov;
        } // end if
        pongYukariAI();
        if (game.Yuyuko._visible)
        {
            pongYuyukoAI();
        } // end if
    } // end if
} // End of the function
function pongAddScore(N)
{
    game.Score = game.Score + N;
    if (game.Score > GameData.Pong.HiScore)
    {
        GameData.Pong.HiScore = game.Score;
    } // end if
} // End of the function
function pongYukariLifeFix()
{
    var _loc1 = 480 * (game.Yukari.Life / game.Yukari.MaxLife);
    game.Interface.YukariLife._width = game.Interface.YukariLife._width + (_loc1 - game.Interface.YukariLife._width) / 10;
} // End of the function
function pongBomb()
{
    game.Player.Power = game.Player.Power - 100;
    pongShowPower();
    var _loc1 = Math.floor(game.Player.Power / 100);
    if (game["Op" + _loc1]._visible)
    {
        game["Op" + _loc1]._visible = false;
    } // end if
    pongPaddleFormation(_loc1 - 1);
    game.bomb._alpha = 100;
    game.bomb._visible = true;
    game.bomb.Limit = 120;
} // End of the function
function pongYukariAI()
{
    if (game.Level > 1)
    {
        if (game.Yukari.ShotDelay > 0)
        {
            --game.Yukari.ShotDelay;
            if (game.Level > 5)
            {
                if (game.Yukari.ShotDelay == 50)
                {
                    pongSprayShot(getAngle(game.Yukari._x, game.Yukari._y, game.Player._x, game.Player._y), 25, game.Level + 2);
                } // end if
            } // end if
        }
        else
        {
            pongSprayShot(getAngle(game.Yukari._x, game.Yukari._y, game.Player._x, game.Player._y), 30, game.Level + 1);
            game.Yukari.ShotDelay = 100;
        } // end if
    } // end else if
    if (game.Yukari.GapC > 0)
    {
        game.Yukari.gap.char._x = game.Yukari.gap.char._x - 20;
        --game.Yukari.GapC;
        if (game.Yukari.GapC == 0)
        {
            game.Yukari.gap._visible = false;
            game.Yukari.Target._x = game.Yukari._x - 50;
            game.Yukari.Target._y = game.Yukari._y;
            game.Yukari.Target._visible = true;
            pongResetBall(game.Yukari.Target);
        } // end if
    } // end if
    if (game.Yukari._y < game.Ran._y)
    {
        if (game.Yukari._y + game.Yukari.Speed > game.Ran._y)
        {
            game.Yukari._y = game.Ran._y;
        }
        else
        {
            game.Yukari._y = game.Yukari._y + game.Yukari.Speed;
        } // end else if
    }
    else if (game.Yukari._y > game.Ran._y)
    {
        if (game.Yukari._y - game.Yukari.Speed < game.Ran._y)
        {
            game.Yukari._y = game.Ran._y;
        }
        else
        {
            game.Yukari._y = game.Yukari._y - game.Yukari.Speed;
        } // end else if
    } // end else if
} // End of the function
function pongYuyukoAI()
{
    game.Yuyuko._x = game.Yuyuko._x + (500 - game.Yuyuko._x) / 5;
    if (game.Yuyuko._y < game.Chen._y)
    {
        if (game.Yuyuko._y + game.Yuyuko.Speed > game.Chen._y)
        {
            game.Yuyuko._y = game.Chen._y;
        }
        else
        {
            game.Yuyuko._y = game.Yuyuko._y + game.Yuyuko.Speed;
        } // end else if
    }
    else if (game.Yuyuko._y > game.Chen._y)
    {
        if (game.Yuyuko._y - game.Yuyuko.Speed < game.Chen._y)
        {
            game.Yuyuko._y = game.Chen._y;
        }
        else
        {
            game.Yuyuko._y = game.Yuyuko._y - game.Yuyuko.Speed;
        } // end else if
    } // end else if
    if (game.Yuyuko._y > game.Yukari._y && game.Yuyuko.getDepth() < game.Yukari.getDepth())
    {
        game.Yuyuko.swapDepths(game.Yukari);
    }
    else if (game.Yuyuko._y < game.Yukari._y && game.Yuyuko.getDepth() > game.Yukari.getDepth())
    {
        game.Yuyuko.swapDepths(game.Yukari);
    } // end else if
} // End of the function
function pongExit()
{
    if (GameData.StageCache)
    {
        stageShot.removeMovieClip();
        stage._visible = true;
        if (GameData.BG != 0)
        {
            bg._visible = true;
        } // end if
    } // end if
    GameData.Target._xscale = GameData.Characters[GameData.Target._name].Scale * GameData.Target.XFace;
    GameData.Target._yscale = GameData.Characters[GameData.Target._name].Scale * GameData.Target.YFace;
    GameData.Target._visible = true;
    Scramble(GameData.Target);
    GameData.GameOn = false;
    game._visible = false;
    ClickBlocker._visible = false;
    game.onEnterFrame = function ()
    {
        if (TopDimmer._alpha > 0)
        {
            TopDimmer._alpha = TopDimmer._alpha - 10;
        }
        else
        {
            this.removeMovieClip();
        } // end else if
    };
} // End of the function
GameData = new Object();
var my_so = SharedObject.getLocal("walfas_create_savedata", "/");
GameData.Pong = new Object();
GameData.Depths = new Object();
GameData.Menus = new Object();
GameData.Menus.Functions = new Object();
GameData.Menus.OnLoad = new Object();
GameData.Menus.OnSetFocus = new Object();
GameData.Keys = new Object();
GameData.Keys.Functions = new Object();
GameData.Windows = new Object();
GameData.BGFunctions = new Object();
GameData.Version = 3.390000;
GameData.DevMode = true;
GameData.Action = "";
GameData.Target = "";
GameData.Friction = 0.900000;
GameData.ScaleLimit = 10;
GameData.DCrate = 15;
GameData.SysID = 0;
GameData.CharID = 0;
GameData.LogicID = 0;
GameData.ObjID = 0;
GameData.BubbleID = 0;
GameData.SSID = 0;
GameData.ClusterID = 0;
GameData.RainID = 0;
GameData.BG = 0;
GameData.BGAnim = 1;
GameData.DLSelect = 0;
GameData.MSRate = 10;
GameData.GameOn = false;
GameData.ShowManipulator = false;
GameData.ShowManipulatorMenu = true;
GameData.BGAutoScale = true;
GameData.StageCache = true;
GameData.Hotkeys = new Array();
GameData.Settings = new Object();
newSetting("SysMessages", true, "Show System Messages");
newSetting("RandomBubbles", false, "Spawn Random Bubble Text");
newSetting("PinnedLoading", true, "Pinned Scene Loading");
newSetting("TheaterMode", true, "Theater Mode");
newSetting("AutoScrollMenu", false, "Auto-Scroll Menus");
newSetting("UntargetablePinned", false, "Untargetable Pinned");
newSetting("KeylockPinned", false, "Keylock Pinned");
newSetting("SwitchArrows", false, "Switch Ctrl/Shift Arrows");
newSetting("HeadRotates", true, "Head Rotates Characters");
newSetting("KeepColor", false, "Keep Colors");
newSetting("OldQS", true, "Old Quick Change");
newSetting("MassLocking", false, "Mass Character Locks");
newSetting("PresetWithItems", true, "Spawn Presets with Items");
newSetting("Mute", false, "Mute All Sounds");
newSetting("ClickStopsSpin", true, "Click Stops Spin");
newSetting("ASpeed", false, "Arrow Speed", 1);
newSetting("DefaultChar", false, "Default Character", "Meiling");
GameData.Characters = new Object();
GameData.SpeechBubbles = new Object();
GameData.Objects = new Object();
GameData.Screenshots = new Object();
GameData.Clusters = new Object();
GameData.Rain = new Object();
GameData.Logics = new Object();
GameData.Images = new Object();
GameData.Presets = new Object();
GameData.Pong.HiScore = 0;
GameData.Depths.Max = 0;
GameData.Depths.StageList = new Array();
GameData.CurrentScene = new Object();
GameData.CurrentScene.Name = "untitled";
GameData.CurrentScene.Prev = "";
GameData.CurrentScene.Next = "";
GameData.CurrentScene.ClearStage = true;
GameData.CurrentScene.CurrentAct = 0;
GameData.SceneActs = new Array();
GameData.Buttons = new Object();
GameData.Buttons.Opacity = 85;
GameData.Locks = new Object();
GameData.Locks.Mouth = false;
GameData.Locks.Eyes = false;
GameData.Locks.Hair = false;
GameData.Locks.Body = false;
GameData.Locks.Arms = false;
GameData.Locks.Shoes = false;
GameData.Locks.Back = false;
GameData.Locks.Accessory = false;
GameData.Locks.Items = false;
GameData.Locks.Hats = false;
GameData.Chat = new Object();
GameData.Chat.Active = true;
GameData.Chat.D = 0;
GameData.Chat.L = 0;
GameData.Chat.Delay = 15;
GameData.Chat.Doom = 0;
GameData.Chat.Users = new Object();
GameData.Chat.Users.LOLSpark = new Array();
GameData.Chat.Users.LOLSpark.push("Hey Reimu!");
GameData.Chat.Users.LOLSpark.push("Hey Reimu!!");
GameData.Chat.Users.LOLSpark.push("Hey Reimu!!!!");
GameData.Chat.Users.LOLSpark.push("Reimu!!");
GameData.Chat.Users.LOLSpark.push("Reimuuuuu!!");
GameData.Chat.Users.LOLSpark.push("Raymoooooo!!");
GameData.Chat.Users.LOLSpark.push("Reimu Reimu Reimu");
GameData.Chat.Users.LOLSpark.push("Reimu!! Are you there???");
GameData.Chat.Users.WakiMiko = new Array();
GameData.Chat.Users.WakiMiko.push("stop it please");
GameData.Chat.Users.WakiMiko.push("STOOOOOOOOOOP");
GameData.Chat.Users.WakiMiko.push("SHUT THE HELL UP ALREADY");
GameData.Chat.Users.Cirno9 = new Array();
GameData.Chat.Users.Cirno9.push("Hooray!");
GameData.Chat.Users.Cirno9.push("I AM A GENIUS");
GameData.Chat.Users.Cirno9.push("I AM THE STRONGEST");
GameData.Chat.Users.Patchy = new Array();
GameData.Chat.Users.Patchy.push("Please stop spamming.");
GameData.Chat.Users.Patchy.push("Marisa, when are you returning my book?");
GameData.Chat.Users.Patchy.push("You are all a bunch of noobs...");
GameData.Chat.Users.Patchy.push("So I have this idea for a rocket...");
GameData.Chat.Users.YuKaRi = new Array();
GameData.Chat.Users.YuKaRi.push("HeY gUyS wAtS gOiNg On?!!1!");
GameData.Chat.Users.YuKaRi.push("OmG mY cAt Is StUcK uP a TrEe AgAiN!!!1!");
GameData.Chat.Users.YuKaRi.push("LOLOL DiD yOu SeE tHe ViD oF rEiMu In K1???");
GameData.Chat.Users.YuKaRi.push("OMG MY SHIFT BUTTON IS STUCK");
GameData.Chat.Users.YuKaRi.push("MaRiSa Is On DrUgS LOL");
GameData.Chat.Users.YuKaRi.push("I nUkEd YuKa LOLOL");
GameData.Chat.UserList = new Array();
for (u in GameData.Chat.Users)
{
    GameData.Chat.UserList.push(u);
} // end of for...in
GameData.Palette = new Object();
GameData.Palette.Skin = new Array();
GameData.Palette.Skin.push("0xFFF1DD");
GameData.Palette.Skin.push("0xFFE7DD");
GameData.Palette.Skin.push("0xDED4BB");
GameData.Palette.Skin.push("0xCC9900");
GameData.Palette.Skin.push("0x663300");
GameData.Palette.Skin.push("0xFFFFCC");
GameData.Palette.Skin.push("0xFFCCFF");
GameData.Palette.Skin.push("0xCCCCFF");
GameData.Palette.Buttons = new Array();
GameData.Palette.Buttons.push("0xFFFFFF");
GameData.Palette.Buttons.push("0xCCCCCC");
GameData.Palette.Buttons.push("0x999999");
GameData.Palette.Buttons.push("0x000000");
GameData.Palette.ScrollBar = new Array();
GameData.Palette.ScrollBar.push("0xFFFFFF");
GameData.Palette.ScrollBar.push("0xE1E1E1");
GameData.Palette.ScrollBar.push("0x999999");
GameData.Sounds = new Object();
GameData.Sounds.Boom = new Sound();
GameData.Sounds.Boom.attachSound("Fire");
GameData.Sounds.ChatBeep = new Sound();
GameData.Sounds.ChatBeep.attachSound("IMbeep");
GameData.Sounds.Boxing = new Sound();
GameData.Sounds.Boxing.attachSound("Owned");
GameData.Sounds.KO = new Sound();
GameData.Sounds.KO.attachSound("KOsound");
GameData.Sounds.Meow = new Sound();
GameData.Sounds.Meow.attachSound("Meow");
GameData.Sounds.Cash = new Sound();
GameData.Sounds.Cash.attachSound("Cash");
GameData.Sounds.Pop = new Sound();
GameData.Sounds.Pop.attachSound("Bubble");
GameData.Sounds.Death = new Sound();
GameData.Sounds.Death.attachSound("Death");
GameData.Sounds.Graze = new Sound();
GameData.Sounds.Graze.attachSound("Graze");
GameData.Sounds.ItemGet = new Sound();
GameData.Sounds.ItemGet.attachSound("ItemGet");
GameData.Sounds.MenuSelect = new Sound();
GameData.Sounds.MenuSelect.attachSound("MenuSelect");
GameData.Sounds.PowerUp = new Sound();
GameData.Sounds.PowerUp.attachSound("PowerUpS");
GameData.Sounds.Truck = new Sound();
GameData.Sounds.Truck.attachSound("TruckHonk");
GameData.Sounds.Kyuh = new Sound();
GameData.Sounds.Kyuh.attachSound("Kyuh");
GameData.Sounds.Whoosh = new Sound();
GameData.Sounds.Whoosh.attachSound("Whoosh");
GameData.Fusion = new Object();
GameData.Fusion.Names = new Array();
GameData.Fusion.Names.push(["Alice", "Marisa", "Malice"]);
GameData.Fusion.Names.push(["Patchouli", "Marisa", "Matchouli"]);
GameData.Fusion.Names.push(["Nitori", "Marisa", "Matori"]);
GameData.Imageboard = new Object();
GameData.Imageboard.PostHeaders = new Array();
GameData.Imageboard.PostHeaders.push(["My NaMe Is YuKaRi", "4/1/08 (Tues) 13:37 No.123"]);
GameData.Imageboard.PostHeaders.push(["wakimiko", "4/1/08 (Tues) 13:39 No.125"]);
GameData.Imageboard.PostHeaders.push(["iLikeKFC", "4/1/08 (Tues) 13:50 No.135"]);
GameData.Imageboard.PostHeaders.push(["Patchy", "4/1/08 (Tues) 13:56 No.138"]);
GameData.Imageboard.PostHeaders.push(["cirno9", "4/1/08 (Tues) 14:00 No.141"]);
GameData.Keys.Up = false;
GameData.Keys.Down = false;
GameData.Keys.Left = false;
GameData.Keys.Right = false;
GameData.TextFormats = new Object();
GameData.TextFormats.Base = new TextFormat();
GameData.TextFormats.Base.font = "Wild Words";
GameData.TextFormats.Base.size = 14;
GameData.TextFormats.Base.color = 0;
GameData.TextFormats.BaseOff = new TextFormat();
GameData.TextFormats.BaseOff.font = "Wild Words";
GameData.TextFormats.BaseOff.size = 14;
GameData.TextFormats.BaseOff.color = 10526880;
GameData.TextFormats.Labels = new TextFormat();
GameData.TextFormats.Labels.font = "Wild Words";
GameData.TextFormats.Labels.size = 14;
GameData.TextFormats.Labels.align = "right";
GameData.TextFormats.Tab = new TextFormat();
GameData.TextFormats.Tab.font = "Wild Words";
GameData.TextFormats.Tab.size = 16;
GameData.TextFormats.Tab.align = "center";
GameData.TextFormats.Header = new TextFormat();
GameData.TextFormats.Header.font = "Wild Words";
GameData.TextFormats.Header.size = 24;
GameData.TextFormats.Header.align = "center";
GameData.TextFormats.FURL = new TextFormat();
GameData.TextFormats.FURL.font = "Arial";
GameData.TextFormats.FURL.size = 14;
GameData.PresetBubbles = new Object();
var i = 1;
while (i <= 5)
{
    GameData.PresetBubbles["Type" + i] = new Array();
    ++i;
} // end while
GameData.PresetBubbles.Type1.push([335, 28, 10, 1, 1, 3, 5, 0, -131, -1, 0, "Hooray!", "Wild Words"]);
GameData.PresetBubbles.Type1.push([335, 28, 10, 1, 1, 3, 5, 0, -131, -1, 0, "Yippy!", "Wild Words"]);
GameData.PresetBubbles.Type1.push([335, 28, 10, 1, 1, 3, 5, 0, -131, -1, 0, "Wohoo!", "Wild Words"]);
GameData.PresetBubbles.Type1.push([201, 28, 18, 1, 1, 3, 5, 0, -128, -6, 0, "we get\nsignal.", "Wild Words"]);
GameData.PresetBubbles.Type1.push([210, 34, 24, 1, 1, 6, -3, 0, -128, -13, 0, "It\'s about\nstuff.", "Wild Words"]);
GameData.PresetBubbles.Type1.push([201, 42, 16, 1, 1, 4, 3, 0, -125, -4, 0, "Is that so...", "Wild Words"]);
GameData.PresetBubbles.Type1.push([207, 55, 20, 1, 1, 3, 5, 0, -132, -6, 0, "It\'s so delicious\nand moist.", "Wild Words"]);
GameData.PresetBubbles.Type1.push([207, 77, 32, 1, 1, -1, 8, 0, -132, -6, 0, "it\'s like my rattata is\nin the top percentage of\nrattata!", "Wild Words"]);
GameData.PresetBubbles.Type1.push([207, 39, 19, 1, 1, 1, 4, 0, -132, -6, 0, "Stop poking\nme!", "Wild Words"]);
GameData.PresetBubbles.Type1.push([207, 39, 19, 1, 1, 1, 4, 0, -132, -6, 0, "Do a barrel\nroll!", "Wild Words"]);
GameData.PresetBubbles.Type1.push([207, 47, 15, 1, 1, 3, 0, 0, -132, -6, 0, "Where am I?!", "Wild Words"]);
GameData.PresetBubbles.Type2.push([141, 50, 18, 1, 1, 6, 4, 0, -125, -9, 0, "What was I\nthinking about?", "Wild Words"]);
GameData.PresetBubbles.Type2.push([141, 50, 18, 1, 1, 5, 6, 0, -127, 0, 0, "Mmmm....waffles.", "Wild Words"]);
GameData.PresetBubbles.Type3.push([100, 70, 19, 1, 1, 5, -4, 0, -121, -8, 0, "Once Upon a time...", "Wild Words"]);
GameData.PresetBubbles.Type3.push([100, 70, 19, 1, 1, 5, -4, 0, -121, -8, 0, "A moment later...", "Wild Words"]);
GameData.PresetBubbles.Type3.push([100, 73, 26, 1, 1, 7, 3, 0, -121, -8, 0, "and then there\nwas none.", "Wild Words"]);
GameData.PresetBubbles.Type4.push([227, 100, 100, 1, 1, 3, -17, 0, -129.850000, 0, 0, "poke", "Geek a byte"]);
GameData.PresetBubbles.Type4.push([227, 100, 100, 1, 1, 3, -17, 0, -127, -8, 0, "skreeeeee", "Brankovic"]);
GameData.PresetBubbles.Type4.push([227, 100, 100, 1, 1, 3, -17, 0, -127, -8, 0, "slash", "Necropsy"]);
GameData.PresetBubbles.Type4.push([153, 100, 100, 1, 1, 3, -17, 0, -127, -8, 0, "\"No way! That\'s impossible!\"\n- Marisa Kirisame", "GungsuhChe"]);
GameData.PresetBubbles.Type5.push([289, 22, 15, 1, 1, 5, -13, 0, -129, -27, 0, "Wham", "Geek a byte"]);
GameData.PresetBubbles.Type5.push([289, 22, 15, 1, 1, 5, -13, 0, -129, -27, 0, "smack", "Geek a byte"]);
GameData.PresetBubbles.Type5.push([289, 22, 15, 1, 1, 5, -13, 0, -129, -27, 0, "whack", "Geek a byte"]);
GameData.PresetBubbles.Type5.push([289, 22, 15, 1, 1, 5, -13, 0, -129, -27, 0, "smash", "Geek a byte"]);
GameData.PresetBubbles.Type5.push([289, 22, 15, 1, 1, 5, -13, 0, -129, -27, 0, "slam", "Geek a byte"]);
GameData.PresetBubbles.Type5.push([289, 29, 16, 1, 1, 5, -13, 0, -129, -28, 0, "blammo", "Geek a byte"]);
grayscaleA = [];
colorscaleA = [];
inversecolorsA = [];
grayscaleA = grayscaleA.concat([0.330000, 0.330000, 0.330000, 0, 0]);
grayscaleA = grayscaleA.concat([0.330000, 0.330000, 0.330000, 0, 0]);
grayscaleA = grayscaleA.concat([0.330000, 0.330000, 0.330000, 0, 0]);
grayscaleA = grayscaleA.concat([0, 0, 0, 1, 0]);
colorscaleA = colorscaleA.concat([1, 0, 0, 0, 0]);
colorscaleA = colorscaleA.concat([0, 1, 0, 0, 0]);
colorscaleA = colorscaleA.concat([0, 0, 1, 0, 0]);
colorscaleA = colorscaleA.concat([0, 0, 0, 1, 0]);
inversecolorsA = inversecolorsA.concat([0, 1, 1, 0, 0]);
inversecolorsA = inversecolorsA.concat([1, 0, 1, 0, 0]);
inversecolorsA = inversecolorsA.concat([1, 1, 0, 0, 0]);
inversecolorsA = inversecolorsA.concat([0, 0, 0, 1, 0]);
grayfilter = new flash.filters.ColorMatrixFilter(grayscaleA);
colorfilter = new flash.filters.ColorMatrixFilter(colorscaleA);
inversefilter = new flash.filters.ColorMatrixFilter(inversecolorsA);
GameData.BGFunctions.BG76 = function ()
{
    if (bg.yuyuko._currentframe == 1)
    {
        bg.yuyuko.gotoAndStop(2);
    }
    else
    {
        StopYuyuko();
    } // end else if
};
GameData.BGFunctions.BG40 = function ()
{
    if (bg.fusionlab.fusion1.char._visible && bg.fusionlab.fusion2.char._visible)
    {
        activateFusion();
    } // end if
};
GameData.Windows.New = function ()
{
    Interface.createEmptyMovieClip("Win", 9420);
    Interface.Win.createEmptyMovieClip("bg", 10);
    Interface.Win._visible = false;
    Interface.Win.createTextField("Title", 20, 0, 0, 10, 30);
    Interface.Win.Title.setNewTextFormat(GameData.TextFormats.Header);
    Interface.Win.Title.selectable = false;
    Interface.Win.Title.embedFonts = true;
    Interface.Win.createEmptyMovieClip("CloseB", 10000);
    Interface.Win.CloseB.createTextField("D", 20, 0, 0, 100, 20);
    Interface.Win.CloseB.D.setNewTextFormat(GameData.TextFormats.Tab);
    Interface.Win.CloseB.D.selectable = false;
    Interface.Win.CloseB.D.border = true;
    Interface.Win.CloseB.D.background = true;
    Interface.Win.CloseB.D.embedFonts = true;
    Interface.Win.CloseB.D.text = "Close";
    Interface.Win.CloseB.onRelease = function ()
    {
        this._parent._visible = false;
    };
};
GameData.Windows.Options = new Object();
GameData.Windows.Options.Open = function ()
{
    Interface.Win._visible = true;
    Interface.Win.vSpace = 60;
    var _loc4 = 300;
    var _loc5 = 300;
    Interface.Win.bg.clear();
    Interface.Win.bg.beginFill(GameData.Palette.Buttons[0], 80);
    Interface.Win.bg.lineStyle();
    Interface.Win.bg.moveTo(0, 0);
    Interface.Win.bg.lineTo(0, _loc5);
    Interface.Win.bg.lineTo(_loc4, _loc5);
    Interface.Win.bg.lineTo(_loc4, 0);
    Interface.Win.bg.lineTo(0, 0);
    Interface.Win.bg.endFill();
    Interface.Win.bg.moveTo(10, 30);
    Interface.Win.bg.lineTo(_loc4 - 10, 30);
    Interface.Win.bg.onPress = function ()
    {
        this._parent.startDrag();
    };
    Interface.Win.bg.onRelease = Interface.Win.bg.onReleaseOutside = function ()
    {
        this._parent.stopDrag();
    };
    Interface.Win.Title._width = _loc4;
    Interface.Win.Title.text = "Options";
    Interface.Win.CloseB._x = (_loc4 - 100) / 2;
    Interface.Win.CloseB._y = _loc5 - 30;
    var tabArray = new Array("Options", "Settings", "Hotkeys");
    var tabW = _loc4 / tabArray.length;
    var _loc3 = 20;
    Interface.Win.createEmptyMovieClip("Tabs", 30);
    Interface.Win.Tabs._y = 35;
    Interface.Win.Tabs.ID = 0;
    Interface.Win.Tabs.createEmptyMovieClip("Hit", 0);
    Interface.Win.Tabs.Hit.beginFill(GameData.Palette.Buttons[1], 0);
    Interface.Win.Tabs.Hit.lineStyle();
    Interface.Win.Tabs.Hit.moveTo(0, 0);
    Interface.Win.Tabs.Hit.lineTo(0, _loc3);
    Interface.Win.Tabs.Hit.lineTo(_loc4, _loc3);
    Interface.Win.Tabs.Hit.lineTo(_loc4, 0);
    Interface.Win.Tabs.Hit.lineTo(0, 0);
    Interface.Win.Tabs.Hit.endFill();
    Interface.Win.Tabs.Hit.onRelease = function ()
    {
        this._parent.ID = Math.floor(this._xmouse / tabW);
        this._parent._parent.CloseB._visible = true;
        GameData.Windows.Options[tabArray[this._parent.ID]]();
    };
    Interface.Win.Tabs.createEmptyMovieClip("Marker", 10);
    Interface.Win.Tabs.Marker.beginFill(GameData.Palette.Buttons[1], 80);
    Interface.Win.Tabs.Marker.lineStyle();
    Interface.Win.Tabs.Marker.moveTo(5, 0);
    Interface.Win.Tabs.Marker.lineTo(5, _loc3);
    Interface.Win.Tabs.Marker.lineTo(tabW - 5, _loc3);
    Interface.Win.Tabs.Marker.lineTo(tabW - 5, 0);
    Interface.Win.Tabs.Marker.lineTo(5, 0);
    Interface.Win.Tabs.Marker.endFill();
    Interface.Win.Tabs.Marker.onEnterFrame = function ()
    {
        this._x = this._x + (this._parent.ID * tabW - this._x) / 5;
    };
    for (var _loc2 = 0; _loc2 < tabArray.length; ++_loc2)
    {
        Interface.Win.Tabs.createTextField("Tab" + _loc2, 20 + _loc2, tabW * _loc2, 0, tabW, _loc3);
        Interface.Win.Tabs["Tab" + _loc2].setNewTextFormat(GameData.TextFormats.Tab);
        Interface.Win.Tabs["Tab" + _loc2].selectable = false;
        Interface.Win.Tabs["Tab" + _loc2].embedFonts = true;
        Interface.Win.Tabs["Tab" + _loc2].text = tabArray[_loc2];
    } // end of for
    GameData.Windows.Options.Options();
};
GameData.Windows.Options.Options = function ()
{
    Interface.Win.createEmptyMovieClip("Main", 50);
    Interface.Win.Main._y = Interface.Win.vSpace;
    Interface.Win.Main.createTextField("Labels", 10, 25, 0, 250, 300);
    Interface.Win.Main.Labels.setNewTextFormat(GameData.TextFormats.Base);
    Interface.Win.Main.Labels.selectable = falsre;
    Interface.Win.Main.Labels.embedFonts = true;
    var _loc3 = "";
    var _loc2 = 0;
    for (m in GameData.Settings)
    {
        if (GameData.Settings[m].Value == undefined)
        {
            Interface.Win.Main.attachMovie("checkbox", "ID" + _loc2, _loc2 + 50);
            Interface.Win.Main["ID" + _loc2]._x = 15;
            Interface.Win.Main["ID" + _loc2]._y = _loc2 * 13.500000 + 8;
            Interface.Win.Main["ID" + _loc2]._xscale = 60;
            Interface.Win.Main["ID" + _loc2]._yscale = 60;
            Interface.Win.Main["ID" + _loc2].Op = m;
            if (GameData.Settings[m].Check)
            {
                Interface.Win.Main["ID" + _loc2].gotoAndStop(2);
            }
            else
            {
                Interface.Win.Main["ID" + _loc2].gotoAndStop(1);
            } // end else if
            Interface.Win.Main["ID" + _loc2].onRelease = function ()
            {
                ToggleSetting(this, this.Op);
            };
            ++_loc2;
            _loc3 = _loc3 + (GameData.Settings[m].Info + "\n");
        } // end if
    } // end of for...in
    Interface.Win.Main.Labels.text = _loc3;
};
GameData.Windows.Options.Settings = function ()
{
    Interface.Win.createEmptyMovieClip("Main", 50);
    Interface.Win.Main._y = Interface.Win.vSpace;
    var _loc2 = 0;
    for (m in GameData.Settings)
    {
        if (GameData.Settings[m].Value)
        {
            Interface.Win.Main.createEmptyMovieClip("S" + _loc2, 10 + _loc2);
            Interface.Win.Main["S" + _loc2]._y = _loc2 * 20;
            Interface.Win.Main["S" + _loc2].ID = m;
            Interface.Win.Main["S" + _loc2].createTextField("L", 10, 0, 0, 150, 16);
            Interface.Win.Main["S" + _loc2].L.setNewTextFormat(GameData.TextFormats.Labels);
            Interface.Win.Main["S" + _loc2].L.selectable = false;
            Interface.Win.Main["S" + _loc2].L.embedFonts = true;
            Interface.Win.Main["S" + _loc2].L.text = GameData.Settings[m].Info + ":";
            Interface.Win.Main["S" + _loc2].createTextField("I", 20, 155, 0, 100, 16);
            Interface.Win.Main["S" + _loc2].I.setNewTextFormat(GameData.TextFormats.Base);
            Interface.Win.Main["S" + _loc2].I.type = "input";
            Interface.Win.Main["S" + _loc2].I.embedFonts = true;
            Interface.Win.Main["S" + _loc2].I.border = true;
            Interface.Win.Main["S" + _loc2].I.text = GameData.Settings[m].Value;
            Interface.Win.Main["S" + _loc2].I.onSetFocus = function ()
            {
                GameData.KeyLock = true;
            };
            Interface.Win.Main["S" + _loc2].I.onKillFocus = function ()
            {
                GameData.Settings[this._parent.ID].Value = this.text;
                my_so.data[this._parent.ID] = GameData.Settings[this._parent.ID].Value;
                my_so.flush();
                GameData.KeyLock = false;
            };
            ++_loc2;
        } // end if
    } // end of for...in
};
GameData.Windows.Options.Hotkeys = function ()
{
    Interface.Win.CloseB._visible = false;
    Interface.Win.createEmptyMovieClip("Main", 50);
    Interface.Win.Main._y = Interface.Win.vSpace;
    Interface.Win.Main.createTextField("Labels", 30, 110, 0, 200, 16);
    Interface.Win.Main.Labels.setNewTextFormat(GameData.TextFormats.Base);
    Interface.Win.Main.Labels.selectable = false;
    Interface.Win.Main.Labels.embedFonts = true;
    Interface.Win.Main.Labels.text = "Eyes    Mouth";
    for (var _loc2 = 0; _loc2 < 10; ++_loc2)
    {
        Interface.Win.Main.createEmptyMovieClip("S" + _loc2, 10 + _loc2);
        Interface.Win.Main["S" + _loc2]._y = _loc2 * 20;
        Interface.Win.Main["S" + _loc2].ID = _loc2;
        Interface.Win.Main["S" + _loc2].createTextField("L", 10, 0, 0, 100, 16);
        Interface.Win.Main["S" + _loc2].L.setNewTextFormat(GameData.TextFormats.Labels);
        Interface.Win.Main["S" + _loc2].L.selectable = false;
        Interface.Win.Main["S" + _loc2].L.embedFonts = true;
        Interface.Win.Main["S" + _loc2].L.text = "Hotkey" + _loc2 + ":";
        Interface.Win.Main.attachMovie("checkbox", "cbE" + _loc2, _loc2 + 50);
        Interface.Win.Main["cbE" + _loc2]._x = 110;
        Interface.Win.Main["cbE" + _loc2]._y = _loc2 * 20 + 8;
        Interface.Win.Main["cbE" + _loc2]._xscale = 70;
        Interface.Win.Main["cbE" + _loc2]._yscale = 70;
        Interface.Win.Main["cbE" + _loc2].Op = _loc2;
        if (GameData.Hotkeys[_loc2][0])
        {
            Interface.Win.Main["cbE" + _loc2].gotoAndStop(2);
        }
        else
        {
            Interface.Win.Main["cbE" + _loc2].gotoAndStop(1);
        } // end else if
        Interface.Win.Main["cbE" + _loc2].onRelease = function ()
        {
            if (GameData.Hotkeys[this.Op][0])
            {
                GameData.Hotkeys[this.Op][0] = false;
                Interface.Win.Main["S" + this.Op].Eye.setTextFormat(GameData.TextFormats.BaseOff);
                Interface.Win.Main["S" + this.Op].Eye.setNewTextFormat(GameData.TextFormats.BaseOff);
                this.gotoAndStop(1);
            }
            else
            {
                GameData.Hotkeys[this.Op][0] = true;
                Interface.Win.Main["S" + this.Op].Eye.setTextFormat(GameData.TextFormats.Base);
                Interface.Win.Main["S" + this.Op].Eye.setNewTextFormat(GameData.TextFormats.Base);
                this.gotoAndStop(2);
            } // end else if
            my_so.data.Hotkeys = GameData.Hotkeys;
            my_so.flush();
        };
        Interface.Win.Main["S" + _loc2].createTextField("Eye", 20, 125, 0, 30, 16);
        if (GameData.Hotkeys[_loc2][0])
        {
            Interface.Win.Main["S" + _loc2].Eye.setNewTextFormat(GameData.TextFormats.Base);
        }
        else
        {
            Interface.Win.Main["S" + _loc2].Eye.setNewTextFormat(GameData.TextFormats.BaseOff);
        } // end else if
        Interface.Win.Main["S" + _loc2].Eye.type = "input";
        Interface.Win.Main["S" + _loc2].Eye.embedFonts = true;
        Interface.Win.Main["S" + _loc2].Eye.border = true;
        Interface.Win.Main["S" + _loc2].Eye.text = Number(GameData.Hotkeys[_loc2][2]) + 1;
        Interface.Win.Main["S" + _loc2].Eye.onSetFocus = function ()
        {
            GameData.KeyLock = true;
        };
        Interface.Win.Main["S" + _loc2].Eye.onKillFocus = function ()
        {
            GameData.Hotkeys[this._parent.ID][2] = Number(this.text) - 1;
            my_so.data.Hotkeys = GameData.Hotkeys;
            my_so.flush();
            GameData.KeyLock = false;
        };
        Interface.Win.Main.attachMovie("checkbox", "cbM" + _loc2, _loc2 + 70);
        Interface.Win.Main["cbM" + _loc2]._x = 170;
        Interface.Win.Main["cbM" + _loc2]._y = _loc2 * 20 + 8;
        Interface.Win.Main["cbM" + _loc2]._xscale = 70;
        Interface.Win.Main["cbM" + _loc2]._yscale = 70;
        Interface.Win.Main["cbM" + _loc2].Op = _loc2;
        if (GameData.Hotkeys[_loc2][1])
        {
            Interface.Win.Main["cbM" + _loc2].gotoAndStop(2);
        }
        else
        {
            Interface.Win.Main["cbM" + _loc2].gotoAndStop(1);
        } // end else if
        Interface.Win.Main["cbM" + _loc2].onRelease = function ()
        {
            if (GameData.Hotkeys[this.Op][1])
            {
                GameData.Hotkeys[this.Op][1] = false;
                Interface.Win.Main["S" + this.Op].Mouth.setTextFormat(GameData.TextFormats.BaseOff);
                Interface.Win.Main["S" + this.Op].Mouth.setNewTextFormat(GameData.TextFormats.BaseOff);
                this.gotoAndStop(1);
            }
            else
            {
                GameData.Hotkeys[this.Op][1] = true;
                Interface.Win.Main["S" + this.Op].Mouth.setTextFormat(GameData.TextFormats.Base);
                Interface.Win.Main["S" + this.Op].Mouth.setNewTextFormat(GameData.TextFormats.Base);
                this.gotoAndStop(2);
            } // end else if
            my_so.data.Hotkeys = GameData.Hotkeys;
            my_so.flush();
        };
        Interface.Win.Main["S" + _loc2].createTextField("Mouth", 30, 190, 0, 30, 16);
        if (GameData.Hotkeys[_loc2][1])
        {
            Interface.Win.Main["S" + _loc2].Mouth.setNewTextFormat(GameData.TextFormats.Base);
        }
        else
        {
            Interface.Win.Main["S" + _loc2].Mouth.setNewTextFormat(GameData.TextFormats.BaseOff);
        } // end else if
        Interface.Win.Main["S" + _loc2].Mouth.type = "input";
        Interface.Win.Main["S" + _loc2].Mouth.embedFonts = true;
        Interface.Win.Main["S" + _loc2].Mouth.border = true;
        Interface.Win.Main["S" + _loc2].Mouth.text = Number(GameData.Hotkeys[_loc2][3]) + 1;
        Interface.Win.Main["S" + _loc2].Mouth.onSetFocus = function ()
        {
            GameData.KeyLock = true;
        };
        Interface.Win.Main["S" + _loc2].Mouth.onKillFocus = function ()
        {
            GameData.Hotkeys[this._parent.ID][3] = Number(this.text) - 1;
            my_so.data.Hotkeys = GameData.Hotkeys;
            my_so.flush();
            GameData.KeyLock = false;
        };
        ++sID;
    } // end of for
    Interface.Win.Main.cbE0._y = 208;
    Interface.Win.Main.cbM0._y = 208;
    Interface.Win.Main.S0._y = 200;
};
GameData.Keys.Functions.Main = function ()
{
    if (!GameData.KeyLock)
    {
        for (k in GameData.Keys.Buttons)
        {
            var _loc1 = false;
            if (GameData.Keys.Buttons[k].Check == "Dev")
            {
                if (GameData.DevMode)
                {
                    _loc1 = true;
                }
                else
                {
                    _loc1 = false;
                } // end else if
            }
            else if (GameData.Keys.Buttons[k].Check == "Pin")
            {
                if (GameData.Settings.KeylockPinned.Check && !GameData.Target.Pin || !GameData.Settings.KeylockPinned.Check)
                {
                    _loc1 = true;
                }
                else
                {
                    _loc1 = false;
                } // end else if
            }
            else
            {
                _loc1 = true;
            } // end else if
            if (Key.isDown(GameData.Keys.Buttons[k].Code) && _loc1)
            {
                if (!GameData.Keys.Buttons[k].Pressed)
                {
                    if (GameData.Keys.Buttons[k].ID != undefined)
                    {
                        GameData.Keys.Functions[k](GameData.Keys.Buttons[k].ID);
                    }
                    else
                    {
                        GameData.Keys.Functions[k]();
                    } // end else if
                    GameData.Keys.Buttons[k].Pressed = true;
                } // end if
                continue;
            } // end if
            GameData.Keys.Buttons[k].Pressed = false;
        } // end of for...in
        GameData.Keys.Functions.ArrowKeyMain();
    } // end if
};
GameData.Keys.Buttons = new Object();
var i = 0;
while (i < 10)
{
    newKey("Hotkey" + i, 48 + i, "Pin");
    GameData.Keys.Buttons["Hotkey" + i].ID = i;
    GameData.Keys.Functions["Hotkey" + i] = function (ID)
    {
        if (GameData.TargetType == "Character")
        {
            if (GameData.Hotkeys[ID][0])
            {
                RootPartSwap(GameData.Target.eyes, "Eyes", String(GameData.Hotkeys[ID][2]));
            } // end if
            if (GameData.Hotkeys[ID][1])
            {
                RootPartSwap(GameData.Target.mouth, "Mouth", String(GameData.Hotkeys[ID][3]));
            } // end if
        } // end if
    };
    ++i;
} // end while
newKey("DevKey", 192, "Dev");
GameData.Keys.Functions.DevKey = function ()
{
    if (GameData.TargetType == "SpeechBubble")
    {
        var _loc1 = GameData.Target._name;
        trace ("GameData.PresetBubbles.Type" + GameData.SpeechBubbles[_loc1].Type + ".push([" + GameData.SpeechBubbles[_loc1].Scale + "," + GameData.SpeechBubbles[_loc1].XScale + "," + GameData.SpeechBubbles[_loc1].YScale + "," + stage[_loc1].Bubble.XFace + "," + stage[_loc1].Bubble.YFace + "," + stage[_loc1].Bubble._x + "," + stage[_loc1].Bubble._y + "," + stage[_loc1].Bubble._rotation + "," + stage[_loc1].D._x + "," + stage[_loc1].D._y + "," + stage[_loc1].D._rotation + ",\"" + stage[_loc1].D.text + "\",\"" + stage[_loc1].FontType + "\"]);");
    }
    else if (GameData.TargetType == "Character")
    {
        trace ("newPreset(\"" + GameData.Characters[GameData.Target._name].Name + "\"," + GameData.Characters[GameData.Target._name].bodyFrame + "," + GameData.Characters[GameData.Target._name].eyeFrame + "," + GameData.Characters[GameData.Target._name].mouthFrame + "," + GameData.Characters[GameData.Target._name].headFrame + "," + GameData.Characters[GameData.Target._name].hatFrame + "," + GameData.Characters[GameData.Target._name].armFrame + "," + GameData.Characters[GameData.Target._name].shoeFrame + "," + GameData.Characters[GameData.Target._name].itemFrame + "," + GameData.Characters[GameData.Target._name].wingFrame + "," + GameData.Characters[GameData.Target._name].accFrame + ");");
    } // end else if
};
newKey("UIKey", 32);
GameData.Keys.Functions.UIKey = function ()
{
    if (Interface._visible)
    {
        Interface._visible = false;
        SysConsole._visible = false;
        if (GameData.Settings.TheaterMode.Check)
        {
            ClearClickHandlers();
        } // end if
        Manipulator._visible = false;
    }
    else
    {
        Interface._visible = true;
        SysConsole._visible = true;
        if (!GameData.Settings.UntargetablePinned.Check)
        {
            SetClickHandlers();
        } // end if
        if (GameData.Target && GameData.ShowManipulator)
        {
            Manipulator._visible = true;
        } // end if
    } // end else if
};
newKey("GravKey", 71);
GameData.Keys.Functions.GravKey = function ()
{
    if (stage["Gravity Well"]._visible)
    {
        stage["Gravity Well"]._x = _root._xmouse;
        stage["Gravity Well"]._y = _root._ymouse;
        clickCheck(stage["Gravity Well"], "drag");
        GameData.DoubleClick = 0;
    } // end if
};
GameData.Keys.Functions.RightBudge = function ()
{
    if (Key.isDown(16) && !GameData.Settings.SwitchArrows.Check || Key.isDown(17) && GameData.Settings.SwitchArrows.Check)
    {
        GameData.Target._rotation = GameData.Target._rotation + GameData.Settings.ASpeed.Value;
    }
    else if (Key.isDown(16) && GameData.Settings.SwitchArrows.Check || Key.isDown(17) && !GameData.Settings.SwitchArrows.Check)
    {
        GameData[getArray()][GameData.Target._name].Scale = GameData[getArray()][GameData.Target._name].Scale + GameData.Settings.ASpeed.Value;
        fixTargetScale(GameData[getArray()][GameData.Target._name].Scale);
    }
    else
    {
        GameData.Target._x = GameData.Target._x + GameData.Settings.ASpeed.Value;
    } // end else if
};
GameData.Keys.Functions.LeftBudge = function ()
{
    if (Key.isDown(16) && !GameData.Settings.SwitchArrows.Check || Key.isDown(17) && GameData.Settings.SwitchArrows.Check)
    {
        GameData.Target._rotation = GameData.Target._rotation - GameData.Settings.ASpeed.Value;
    }
    else if (Key.isDown(16) && GameData.Settings.SwitchArrows.Check || Key.isDown(17) && !GameData.Settings.SwitchArrows.Check)
    {
        if (GameData[getArray()][GameData.Target._name].Scale - GameData.Settings.ASpeed.Value >= GameData.ScaleLimit)
        {
            GameData[getArray()][GameData.Target._name].Scale = GameData[getArray()][GameData.Target._name].Scale - GameData.Settings.ASpeed.Value;
            fixTargetScale(GameData[getArray()][GameData.Target._name].Scale);
        }
        else
        {
            GameData[getArray()][GameData.Target._name].Scale = GameData.ScaleLimit;
            fixTargetScale(GameData[getArray()][GameData.Target._name].Scale);
        } // end else if
    }
    else
    {
        GameData.Target._x = GameData.Target._x - GameData.Settings.ASpeed.Value;
    } // end else if
};
newKey("NextTarget", 221);
GameData.Keys.Functions.NextTarget = function ()
{
    var _loc1 = false;
    if (Key.isDown(16))
    {
        for (i = GameData.Depths.StageList.length - 1; i >= 0; i--)
        {
            if (stage[GameData.Depths.StageList[i].Name].Pin && !ft)
            {
                var ft = stage[GameData.Depths.StageList[i].Name];
            } // end if
            if (GameData.Depths.StageList[i].Depth > GameData.DLSelect)
            {
                if (stage[GameData.Depths.StageList[i].Name].Pin)
                {
                    Target(stage[GameData.Depths.StageList[i].Name]);
                    GameData.DLSelect = GameData.Depths.StageList[i].Depth;
                    _loc1 = true;
                    break;
                } // end if
            } // end if
        } // end of for
    }
    else
    {
        var ft = stage[GameData.Depths.StageList[GameData.Depths.StageList.length - 1].Name];
        for (i = GameData.Depths.StageList.length - 1; i >= 0; i--)
        {
            if (GameData.Depths.StageList[i].Depth > GameData.DLSelect)
            {
                Target(stage[GameData.Depths.StageList[i].Name]);
                GameData.DLSelect = GameData.Depths.StageList[i].Depth;
                _loc1 = true;
                break;
            } // end if
        } // end of for
    } // end else if
    if (!_loc1)
    {
        Target(ft);
    } // end if
};
newKey("PrevTarget", 219);
GameData.Keys.Functions.PrevTarget = function ()
{
    var _loc1 = false;
    if (Key.isDown(16))
    {
        for (i = 0; i < GameData.Depths.StageList.length; i++)
        {
            if (stage[GameData.Depths.StageList[i].Name].Pin && !ft)
            {
                var ft = stage[GameData.Depths.StageList[i].Name];
            } // end if
            if (GameData.Depths.StageList[i].Depth < GameData.DLSelect)
            {
                if (stage[GameData.Depths.StageList[i].Name].Pin)
                {
                    Target(stage[GameData.Depths.StageList[i].Name]);
                    GameData.DLSelect = GameData.Depths.StageList[i].Depth;
                    _loc1 = true;
                    break;
                } // end if
            } // end if
        } // end of for
    }
    else
    {
        var ft = stage[GameData.Depths.StageList[0].Name];
        for (i = 0; i < GameData.Depths.StageList.length; i++)
        {
            if (GameData.Depths.StageList[i].Depth < GameData.DLSelect)
            {
                Target(stage[GameData.Depths.StageList[i].Name]);
                GameData.DLSelect = GameData.Depths.StageList[i].Depth;
                _loc1 = true;
                break;
            } // end if
        } // end of for
    } // end else if
    if (!_loc1)
    {
        Target(ft);
    } // end if
};
newKey("ActivateBG", 66);
GameData.Keys.Functions.ActivateBG = function ()
{
    if (bg._visible && GameData.BGFunctions["BG" + bg._currentframe])
    {
        GameData.BGFunctions["BG" + bg._currentframe]();
    }
    else
    {
        bg.Anim.play();
    } // end else if
};
newKey("Snapshot", 83);
GameData.Keys.Functions.Snapshot = function ()
{
    makeScreenShot();
};
newKey("Colorize", 67, "Pin");
GameData.Keys.Functions.Colorize = function ()
{
    if (GameData.TargetType == "Character" || GameData.TargetType == "SpeechBubble")
    {
        GameData.Menus.Functions.ColorizeMenu();
    }
    else if (GameData.TargetType == "Object")
    {
        GameData.Target.Obj.play();
    }
    else if (GameData.TargetType == "Cluster")
    {
        if (GameData.Clusters[GameData.Target._name].cFrame == GameData.Clusters[GameData.Target._name].mFrame)
        {
            GameData.Clusters[GameData.Target._name].cFrame = 1;
        }
        else
        {
            ++GameData.Clusters[GameData.Target._name].cFrame;
        } // end else if
        fixCluster(GameData.Target);
    }
    else if (GameData.TargetType == "Rain")
    {
        if (GameData.Rain[GameData.Target._name].cFrame == GameData.Rain[GameData.Target._name].mFrame)
        {
            GameData.Rain[GameData.Target._name].cFrame = 1;
        }
        else
        {
            ++GameData.Rain[GameData.Target._name].cFrame;
        } // end else if
        fixRain(GameData.Target);
    } // end else if
};
newKey("Clusterize", 68, "Pin");
GameData.Keys.Functions.Clusterize = function ()
{
    if (GameData.TargetType == "Object")
    {
        GameData.Menus.Functions.Clusterize();
    }
    else if (GameData.TargetType == "Character")
    {
        GameData.Menus.Functions.DupeChar();
    } // end else if
};
newKey("TargetKey", 84, "Pin");
GameData.Keys.Functions.TargetKey = function ()
{
    if (GameData.Target._visible)
    {
        GameData.Target._x = _root._xmouse;
        GameData.Target._y = _root._ymouse;
        clickCheck(GameData.Target, "drag");
        GameData.DoubleClick = 0;
    } // end if
};
newKey("RandomKey", 82, "Pin");
GameData.Keys.Functions.RandomKey = function ()
{
    if (GameData.TargetType == "Character")
    {
        if (Key.isDown(16))
        {
            GameData.Menus.Functions.SetRandomColor();
        }
        else
        {
            RandomizeAll(GameData.Target);
        } // end else if
    }
    else if (GameData.TargetType == "Object")
    {
        if (!GameData.Keys.R)
        {
            GameData.Menus.Functions.TurnIntoRain();
            GameData.Keys.R = true;
        } // end if
    } // end else if
};
newKey("Delete", 46, "Pin");
GameData.Keys.Functions.Delete = function ()
{
    if (GameData.TargetType == "Toy")
    {
        if (GameData.Target._name == "Boxing Chen")
        {
            resetBoxingChen();
        } // end if
        GameData.Target._visible = false;
        Target();
    }
    else if (GameData.Target && !Interface.COMenu._visible && !Interface.BubbleWindow._visible)
    {
        Delete(GameData.Target);
    } // end else if
    Manipulator._visible = false;
};
newKey("LockAll", 76, "Pin");
GameData.Keys.Functions.LockAll = function ()
{
    if (GameData.TargetType == "Character")
    {
        if (Key.isDown(16))
        {
            for (i = 0; i < GameData.PartsArray.length; i++)
            {
                GameData.Characters[GameData.Target._name].Locks[GameData.PartsArray[i]] = false;
            } // end of for
        }
        else
        {
            for (i = 0; i < GameData.PartsArray.length; i++)
            {
                GameData.Characters[GameData.Target._name].Locks[GameData.PartsArray[i]] = true;
            } // end of for
        } // end if
    } // end else if
};
newKey("Flip", 70, "Pin");
GameData.Keys.Functions.Flip = function ()
{
    if (Key.isDown(16))
    {
        VFlip();
    }
    else
    {
        HFlip();
    } // end else if
};
newKey("ManipTool", 77);
GameData.Keys.Functions.ManipTool = function ()
{
    if (GameData.ShowManipulator)
    {
        GameData.ShowManipulator = false;
        Manipulator._visible = false;
    }
    else
    {
        GameData.ShowManipulator = true;
        if (GameData.Target)
        {
            setManipulator();
        } // end if
    } // end else if
};
newKey("NewChar", 45);
GameData.Keys.Functions.NewChar = function ()
{
    makeChar();
};
newKey("SaveScene", 81);
GameData.Keys.Functions.SaveScene = function ()
{
    if (Key.isDown(16))
    {
        GameData.Menus.Functions.SaveScene();
    }
    else
    {
        GameData.Menus.Functions.MakeNewAct();
    } // end else if
};
newKey("PinToggle", 80);
GameData.Keys.Functions.PinToggle = function ()
{
    if (GameData.Target.Pin)
    {
        GameData.Target.Pin = false;
        Interface.TargetFrame.pin._visible = false;
        if (GameData.Settings.UntargetablePinned.Check)
        {
            AddClickHandler(GameData.Target, GameData.TargetType);
        } // end if
    }
    else
    {
        GameData.Target.Pin = true;
        Interface.TargetFrame.pin._visible = true;
        if (GameData.Settings.UntargetablePinned.Check)
        {
            RemoveClickHandler(GameData.Target, GameData.TargetType);
        } // end if
    } // end else if
};
GameData.Keys.Functions.ArrowKeyMain = function ()
{
    if (GameData.Settings.KeylockPinned.Check && !GameData.Target.Pin || !GameData.Settings.KeylockPinned.Check)
    {
        if (Key.isDown(38))
        {
            if (Key.isDown(16))
            {
                if (!GameData.Keys.Up)
                {
                    BringForward(GameData.Target);
                    GameData.Keys.Up = true;
                } // end if
            }
            else if (Key.isDown(17))
            {
                if (!GameData.Keys.Up)
                {
                    BringToFront(GameData.Target);
                    GameData.Keys.Up = true;
                } // end if
            }
            else if (!GameData.Keys.Up)
            {
                GameData.Target._y = GameData.Target._y - GameData.Settings.ASpeed.Value;
                GameData.Keys.Up = true;
                GameData.Keys.UpHold = 0;
            }
            else if (GameData.Keys.UpHold < 15)
            {
                ++GameData.Keys.UpHold;
            }
            else
            {
                GameData.Target._y = GameData.Target._y - GameData.Settings.ASpeed.Value;
            } // end else if
        }
        else
        {
            GameData.Keys.Up = false;
        } // end else if
        if (Key.isDown(40))
        {
            if (Key.isDown(16))
            {
                if (!GameData.Keys.Down)
                {
                    SendBackward(GameData.Target);
                    GameData.Keys.Down = true;
                } // end if
            }
            else if (Key.isDown(17))
            {
                if (!GameData.Keys.Down)
                {
                    SendToBack(GameData.Target);
                    GameData.Keys.Down = true;
                } // end if
            }
            else if (!GameData.Keys.Down)
            {
                GameData.Target._y = GameData.Target._y + GameData.Settings.ASpeed.Value;
                GameData.Keys.Down = true;
                GameData.Keys.DownHold = 0;
            }
            else if (GameData.Keys.DownHold < 15)
            {
                ++GameData.Keys.DownHold;
            }
            else
            {
                GameData.Target._y = GameData.Target._y + GameData.Settings.ASpeed.Value;
            } // end else if
        }
        else
        {
            GameData.Keys.Down = false;
        } // end else if
        if (Key.isDown(37))
        {
            if (!GameData.Keys.Left)
            {
                GameData.Keys.Left = true;
                GameData.Keys.LeftHold = 0;
                if (GameData.Settings.TheaterMode.Check && !Interface._visible)
                {
                    if (GameData.CurrentScene.CurrentAct > 0)
                    {
                        GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Name, GameData.CurrentScene.CurrentAct - 1);
                    }
                    else if (GameData.SavedSceneData[GameData.CurrentScene.Prev.toLowerCase()])
                    {
                        GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Prev.toLowerCase(), GameData.SavedSceneData[GameData.CurrentScene.Prev.toLowerCase()].Acts.length - 1);
                    } // end else if
                }
                else
                {
                    GameData.Keys.Functions.LeftBudge();
                } // end else if
            }
            else if (GameData.Keys.LeftHold < 15)
            {
                ++GameData.Keys.LeftHold;
            }
            else if (GameData.Settings.TheaterMode.Check && !Interface._visible)
            {
            }
            else
            {
                GameData.Keys.Functions.LeftBudge();
            } // end else if
        }
        else
        {
            GameData.Keys.Left = false;
        } // end else if
        if (Key.isDown(39))
        {
            if (!GameData.Keys.Right)
            {
                GameData.Keys.Right = true;
                GameData.Keys.RightHold = 0;
                if (GameData.Settings.TheaterMode.Check && !Interface._visible)
                {
                    if (GameData.CurrentScene.CurrentAct < GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.length - 1)
                    {
                        GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Name, GameData.CurrentScene.CurrentAct + 1);
                    }
                    else if (GameData.SavedSceneData[GameData.CurrentScene.Next.toLowerCase()])
                    {
                        GameData.Menus.Functions.LoadScene(this, GameData.CurrentScene.Next.toLowerCase(), 0);
                    } // end else if
                }
                else
                {
                    GameData.Keys.Functions.RightBudge();
                } // end else if
            }
            else if (GameData.Keys.RightHold < 15)
            {
                ++GameData.Keys.RightHold;
            }
            else if (GameData.Settings.TheaterMode.Check && !Interface._visible)
            {
            }
            else
            {
                GameData.Keys.Functions.RightBudge();
            } // end else if
        }
        else
        {
            GameData.Keys.Right = false;
        } // end if
    } // end else if
};
GameData.Menus.Functions.GenerateSceneXML = function (S)
{
    trace ("Put scene xml here.");
};
GameData.Menus.Functions.LoadScene = function (S, LS, actN)
{
    var _loc3 = GameData.SavedSceneData[LS].Acts[actN];
    if (!GameData.SavedSceneData[LS].Ver)
    {
        for (sfix in GameData.SavedSceneData[LS][_loc3])
        {
            if (GameData.SavedSceneData[LS][_loc3][sfix][0] == "Object")
            {
                GameData.SavedSceneData[LS][_loc3][sfix][1] = GameData.ObjectList[GameData.SavedSceneData[LS][_loc3][sfix][1]][1];
            } // end if
        } // end of for...in
        GameData.SavedSceneData[LS].Ver = 3.360000;
    } // end if
    GameData.CurrentScene.Name = LS;
    GameData.CurrentScene.Prev = GameData.SavedSceneData[LS].Prev;
    GameData.CurrentScene.Next = GameData.SavedSceneData[LS].Next;
    GameData.Menus.Functions.Clear(this, "All");
    for (sa = 0; sa < GameData.SavedSceneData[LS][_loc3].length; sa++)
    {
        if (GameData.SavedSceneData[LS][_loc3][sa][0] == "Background")
        {
            SwapBG(GameData.SavedSceneData[LS][_loc3][sa][1]);
            var _loc11 = GameData.SavedSceneData[LS][_loc3][sa][2].split(":");
            bg._x = Number(_loc11[0]);
            bg._y = Number(_loc11[1]);
            bg._xscale = Number(_loc11[2]);
            bg._yscale = Number(_loc11[3]);
            bg._rotation = Number(_loc11[4]);
            Dimmer._alpha = Number(_loc11[5]);
            GameData.Friction = Number(_loc11[6]);
            GameData.BGAutoScale = false;
            Interface.BGMenu.AScheck.gotoAndStop(1);
            if (bg.Anim)
            {
                bg.Anim.gotoAndPlay(Number(_loc11[8]));
            } // end if
            Interface.BGMenu.lX.text = bg._x;
            Interface.BGMenu.lY.text = bg._y;
            Interface.BGMenu.sX.text = bg._xscale;
            Interface.BGMenu.rD.text = bg._rotation;
            Interface.BGMenu.Fr.text = (1 - GameData.Friction) * 100;
            Interface.BGMenu.Br.text = 100 - Dimmer._alpha;
            continue;
        } // end if
        if (GameData.SavedSceneData[LS][_loc3][sa][0] == "Character")
        {
            var _loc10 = makeChar("dna-" + GameData.SavedSceneData[LS][_loc3][sa][1]);
            var _loc12 = GameData.SavedSceneData[LS][_loc3][sa][2].split(":");
            if (GameData.Settings.PinnedLoading.Check)
            {
                _loc10.Pin = true;
            } // end if
            _loc10._x = Number(_loc12[0]);
            _loc10._y = Number(_loc12[1]);
            _loc10._rotation = Number(_loc12[2]);
            _loc10.XFace = Number(_loc12[3]);
            _loc10._xscale = _loc10._xscale * Number(_loc12[3]);
            _loc10.YFace = Number(_loc12[4]);
            _loc10._yscale = _loc10._yscale * Number(_loc12[4]);
            continue;
        } // end if
        if (GameData.SavedSceneData[LS][_loc3][sa][0] == "Object")
        {
            var _loc7 = GameData.SavedSceneData[LS][_loc3][sa][2].split(":");
            var _loc9 = new Object();
            _loc9.X = Number(_loc7[0]);
            _loc9.Y = Number(_loc7[1]);
            _loc9.XFace = Number(_loc7[2]);
            _loc9.YFace = Number(_loc7[3]);
            _loc9.Name = _loc7[4];
            _loc9.Scale = Number(_loc7[5]);
            _loc9.cFrame = Number(_loc7[6]);
            _loc9.Rotation = Number(_loc7[7]);
            makeObject(GameData.SavedSceneData[LS][_loc3][sa][1], _loc9);
            continue;
        } // end if
        if (GameData.SavedSceneData[LS][_loc3][sa][0] == "Cluster")
        {
            _loc7 = GameData.SavedSceneData[LS][_loc3][sa][2].split(":");
            var _loc4 = new Object();
            _loc4.X = Number(_loc7[0]);
            _loc4.Y = Number(_loc7[1]);
            _loc4.XFace = Number(_loc7[2]);
            _loc4.YFace = Number(_loc7[3]);
            _loc4.cFrame = Number(_loc7[4]);
            _loc4.Name = _loc7[5];
            _loc4.Rows = Number(_loc7[6]);
            _loc4.Cols = Number(_loc7[7]);
            _loc4.Spread = Number(_loc7[8]);
            _loc4.Dist = Number(_loc7[9]);
            _loc4.SDist = Number(_loc7[10]);
            _loc4.Px = Number(_loc7[11]);
            _loc4.Py = Number(_loc7[12]);
            _loc4.Dir = _loc7[13];
            _loc4.Scale = Number(_loc7[14]);
            _loc4.Spiral = Number(_loc7[15]);
            _loc4.RMod = Number(_loc7[16]);
            _loc4.Rotation = Number(_loc7[17]);
            makeCluster(Number(GameData.SavedSceneData[LS][_loc3][sa][1]), _loc4);
            continue;
        } // end if
        if (GameData.SavedSceneData[LS][_loc3][sa][0] == "Bubble")
        {
            _loc7 = GameData.SavedSceneData[LS][_loc3][sa][2].split(":");
            var _loc5 = new Object();
            _loc5.Name = _loc7[0];
            _loc5.Scale = Number(_loc7[1]);
            _loc5.XScale = Number(_loc7[2]);
            _loc5.YScale = Number(_loc7[3]);
            _loc5.FontColor = _loc7[4];
            _loc5.X = Number(_loc7[5]);
            _loc5.Y = Number(_loc7[6]);
            _loc5.Rotation = Number(_loc7[7]);
            _loc5.XFace = Number(_loc7[8]);
            _loc5.YFace = Number(_loc7[9]);
            _loc5.BX = Number(_loc7[10]);
            _loc5.BY = Number(_loc7[11]);
            _loc5.BRotation = Number(_loc7[12]);
            _loc5.TX = Number(_loc7[13]);
            _loc5.TY = Number(_loc7[14]);
            _loc5.TRotation = Number(_loc7[15]);
            var _loc14 = _loc7[16].split("//cln//");
            var _loc13 = _loc14.join(":");
            _loc5.MSG = _loc13;
            _loc5.FontType = _loc7[17];
            makeSpeechBubble(Number(GameData.SavedSceneData[LS][_loc3][sa][1]), _loc5);
            continue;
        } // end if
        if (GameData.SavedSceneData[LS][_loc3][sa][0] == "Image")
        {
            _loc7 = GameData.SavedSceneData[LS][_loc3][sa][2].split(":");
            var _loc8 = new Object();
            _loc8.X = Number(_loc7[0]);
            _loc8.Y = Number(_loc7[1]);
            _loc8.XFace = Number(_loc7[2]);
            _loc8.YFace = Number(_loc7[3]);
            _loc8.Name = _loc7[4];
            _loc8.Scale = Number(_loc7[5]);
            _loc8.Rotation = Number(_loc7[6]);
            _loc8.colorMode = _loc7[7];
            if (_loc7[8] == "false")
            {
                _loc8.Blur = false;
            }
            else
            {
                _loc8.Blur = true;
            } // end else if
            _loc8.BlurX = Number(_loc7[9]);
            _loc8.BlurY = Number(_loc7[10]);
            _loc8.BlurQ = Number(_loc7[11]);
            makeImage(GameData.SavedSceneData[LS][_loc3][sa][1], _loc8);
            continue;
        } // end if
        if (GameData.SavedSceneData[LS][_loc3][sa][0] == "Rain")
        {
            _loc7 = GameData.SavedSceneData[LS][_loc3][sa][2].split(":");
            var _loc6 = new Object();
            _loc6.X = Number(_loc7[0]);
            _loc6.Y = Number(_loc7[1]);
            _loc6.XFace = Number(_loc7[2]);
            _loc6.YFace = Number(_loc7[3]);
            _loc6.Name = _loc7[4];
            _loc6.Scale = Number(_loc7[5]);
            _loc6.Qty = Number(_loc7[6]);
            _loc6.Rmin = Number(_loc7[7]);
            _loc6.Rmax = Number(_loc7[8]);
            _loc6.Xmin = Number(_loc7[9]);
            _loc6.Xmax = Number(_loc7[10]);
            _loc6.Ymin = Number(_loc7[11]);
            _loc6.Ymax = Number(_loc7[12]);
            _loc6.Px = Number(_loc7[13]);
            _loc6.Py = Number(_loc7[14]);
            _loc6.cFrame = Number(_loc7[15]);
            makeRain(Number(GameData.SavedSceneData[LS][_loc3][sa][1]), _loc6);
        } // end if
    } // end of for
    GameData.CurrentScene.CurrentAct = actN;
    Interface.SceneFrame.bName.text = LS + " : Part " + (actN + 1);
    RefreshActList();
    if (GameData.TheaterMode && !Interface._visible)
    {
        ClearClickHandlers();
    } // end if
};
GameData.Menus.Functions.MakeNewAct = function (S)
{
    Sys("Scene Saved. New Part Added.", "MenuSelect");
    SaveCurrentScene();
    var _loc1 = "Act" + GameData.SavedSceneData[GameData.CurrentScene.Name].ActID++;
    ++GameData.CurrentScene.CurrentAct;
    GameData.SavedSceneData[GameData.CurrentScene.Name].Acts.splice(GameData.CurrentScene.CurrentAct, 0, _loc1);
    GameData.SavedSceneData[GameData.CurrentScene.Name][_loc1] = new Array();
    SaveCurrentScene();
    Interface.SceneFrame.bName.text = GameData.CurrentScene.Name + " : Part " + (GameData.CurrentScene.CurrentAct + 1);
    RefreshActList();
};
GameData.Menus.Functions.SaveScene = function (S)
{
    Sys("Scene Saved.", "MenuSelect");
    SaveCurrentScene();
};
GameData.Menus.Functions.SaveChar = function (S)
{
    GameData.SavedChars.push([GameData.Characters[GameData.Target._name].Name, "dna-" + getDNA(GameData.Characters[GameData.Target._name])]);
    GameData.SavedChars.sort(Array.CASEINSENSITIVE);
    makeListMenu(Interface.SavedCharMenu, "SavedChars", 100, 100);
    PositionMenu(Interface.SavedCharMenu, "C", "C", 117, -238, Interface.MainMenu, Interface.MainMenu);
    Sys(GameData.Characters[GameData.Target._name].Name + " Saved.", "MenuSelect");
};
GameData.Menus.Functions.DupeChar = function (S)
{
    if (Key.isDown(16))
    {
        for (var _loc1 = 0; _loc1 < 9; ++_loc1)
        {
            Scramble(makeChar("dna-" + getDNA(GameData.Characters[GameData.Target._name])));
        } // end of for
    }
    else
    {
        makeChar("dna-" + getDNA(GameData.Characters[GameData.Target._name]));
    } // end else if
};
GameData.Menus.Functions.CloseWindow = function (S)
{
    S._parent._visible = false;
};
GameData.Menus.Functions.Delete = function (S)
{
    Delete(GameData.Target);
    Interface.Level1Menu._visible = false;
};
GameData.Menus.Functions.DefaultColor = function (S)
{
    GameData.Screenshots[GameData.Target._name].Greyscale = false;
    GameData.Screenshots[GameData.Target._name].Blur = false;
    GameData.Target.pic.filters = [colorfilter];
};
GameData.Menus.Functions.Greyscale = function (S)
{
    if (GameData.Screenshots[GameData.Target._name].ColorMode == "greyscale")
    {
        GameData.Screenshots[GameData.Target._name].ColorMode = "normal";
    }
    else
    {
        GameData.Screenshots[GameData.Target._name].ColorMode = "greyscale";
    } // end else if
    applyFilters();
};
GameData.Menus.Functions.InverseColors = function (S)
{
    if (GameData.Screenshots[GameData.Target._name].ColorMode == "inverse")
    {
        GameData.Screenshots[GameData.Target._name].ColorMode = "normal";
    }
    else
    {
        GameData.Screenshots[GameData.Target._name].ColorMode = "inverse";
    } // end else if
    applyFilters();
};
GameData.Menus.Functions.Blur = function (S)
{
    if (GameData.Screenshots[GameData.Target._name].Blur)
    {
        GameData.Screenshots[GameData.Target._name].Blur = false;
    }
    else
    {
        GameData.Screenshots[GameData.Target._name].Blur = true;
    } // end else if
    applyFilters();
};
GameData.Menus.Functions.SetFilter = function (S, T)
{
    if (T == "Blur")
    {
        GameData.Screenshots[GameData.Target._name].BlurSettings.X = Number(S._parent.xI.text);
        GameData.Screenshots[GameData.Target._name].BlurSettings.Y = Number(S._parent.yI.text);
        GameData.Screenshots[GameData.Target._name].BlurSettings.Q = Number(S._parent.qI.text);
        GameData.Screenshots[GameData.Target._name].Blur = true;
    } // end if
    applyFilters();
};
GameData.Menus.Functions.ClearFilter = function (S, T)
{
    GameData.Screenshots[GameData.Target._name][T] = false;
    applyFilters();
};
GameData.Menus.Functions.Glow = function (S)
{
    var _loc1 = new flash.filters.GlowFilter(102, 0.700000, 9, 9, 3, 3, true, false);
    GameData.Target.pic.filters = new Array(_loc1);
};
GameData.Menus.Functions.ImportImage = function (S, T)
{
    OpenMenu(1, Interface.DNAMenu);
    Interface.DNAMenu.Title.text = "Import Image";
    Interface.DNAMenu.DNAdata.setNewTextFormat(GameData.TextFormats.FURL);
    Interface.DNAMenu.DNAdata.text = "Enter URL";
    Interface.DNAMenu.OK.bName.text = "Import";
    Interface.DNAMenu.OK.onRelease = function ()
    {
        SwapColor(MC.BG, "Buttons", 1);
        if (GameData.Origin != "Local")
        {
            var _loc2 = GameData.Origin.length;
            var _loc3 = Interface.DNAMenu.DNAdata.text.substr(0, _loc2);
            if (_loc3 == GameData.Origin)
            {
                makeImage(Interface.DNAMenu.DNAdata.text);
                CloseMenus(1);
            }
            else
            {
                GameData.Menus.Functions.OpenHelp();
                Interface.HelpWindow.BasicHelpMenu._visible = false;
                playSound("Pop");
                Interface.HelpWindow.Next._visible = true;
                SwapColor(this.BG, "Buttons", 1);
                Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Import;
                Interface.HelpWindow.Next.onRelease = function ()
                {
                    resetHelp();
                };
            } // end else if
        }
        else
        {
            makeImage(Interface.DNAMenu.DNAdata.text);
            CloseMenus(1);
        } // end else if
    };
};
GameData.Menus.Functions.MakeBubble = function (S, T)
{
    makeSpeechBubble(T);
};
GameData.Menus.Functions.Randomize = function (S, T)
{
    if (T == "All")
    {
        for (c in GameData.Characters)
        {
            RandomizeAll(stage[c]);
        } // end of for...in
    }
    else
    {
        RandomizeAll(GameData.Target);
    } // end else if
};
GameData.Menus.Functions.OpenWindow = function (S, T)
{
    if (GameData.Windows[T])
    {
        GameData.Windows[T].Open();
    }
    else
    {
        OpenMenu(1, Interface[T]);
        OnLoadHandler(Interface[T]);
    } // end else if
};
GameData.Menus.Functions.GeneralOptions = function (S)
{
    OpenMenu(1, Interface.GeneralOptions);
    OnLoadHandler(Interface.GeneralOptions);
};
GameData.Menus.Functions.BubbleOptions = function (S)
{
    OpenMenu(1, Interface.BubbleWindow, this.BG);
    Interface.BubbleWindow.gX.text = GameData.Target._x;
    Interface.BubbleWindow.gY.text = GameData.Target._y;
    Interface.BubbleWindow.gXs.text = GameData.Target._xscale;
    Interface.BubbleWindow.gYs.text = GameData.Target._yscale;
    Interface.BubbleWindow.gR.text = GameData.Target._rotation;
    Interface.BubbleWindow.bX.text = GameData.Target.Bubble._x;
    Interface.BubbleWindow.bY.text = GameData.Target.Bubble._y;
    Interface.BubbleWindow.bXs.text = GameData.Target.Bubble._xscale;
    Interface.BubbleWindow.bYs.text = GameData.Target.Bubble._yscale;
    Interface.BubbleWindow.bR.text = GameData.Target.Bubble._rotation;
    Interface.BubbleWindow.tX.text = GameData.Target.D._x;
    Interface.BubbleWindow.tY.text = GameData.Target.D._y;
    Interface.BubbleWindow.tR.text = GameData.Target.D._rotation;
};
GameData.Menus.Functions.SetText = function (S)
{
    CloseMenus(1);
    editBubble(GameData.Target);
};
GameData.Menus.Functions.SetFont = function (S, T)
{
    var _loc1 = new TextFormat();
    _loc1.font = T;
    GameData.Target.FontType = T;
    GameData.Target.D.setTextFormat(_loc1);
    GameData.Target.D.setNewTextFormat(_loc1);
};
GameData.Menus.Functions.SetDefaultColor = function (S)
{
    if (GameData.TargetType == "Character")
    {
        colorHex = "0x" + GameData.Parts.Hair[GameData.Characters[GameData.Target._name].headFrame][6];
        GameData.Characters[GameData.Target._name].HairColor = colorHex;
        ColorPalette(GameData.Target.head.HairColor, colorHex);
        ColorPalette(Interface.TargetFrame.preview.char.hair.HairColor, colorHex);
        ColorPalette(GameData.Target.head2.HairColor, colorHex);
        ColorPalette(Interface.TargetFrame.preview.char.head2.HairColor, colorHex);
    }
    else if (GameData.TargetType == "SpeechBubble")
    {
        colorHex = "0x000000";
        var _loc1 = new TextFormat();
        _loc1.color = colorHex;
        GameData.Target.D.setTextFormat(_loc1);
        GameData.Target.D.setNewTextFormat(_loc1);
    } // end else if
    ColorPalette(Interface.ColorizeMenu.palette.Cp.BG, colorHex);
    Interface.ColorizeMenu.palette.Rs._x = toRGB(colorHex.charAt(2)) * 16 + toRGB(colorHex.charAt(3));
    Interface.ColorizeMenu.palette.Gs._x = toRGB(colorHex.charAt(4)) * 16 + toRGB(colorHex.charAt(5));
    Interface.ColorizeMenu.palette.Bs._x = toRGB(colorHex.charAt(6)) * 16 + toRGB(colorHex.charAt(7));
};
GameData.Menus.Functions.SetRandomColor = function (S)
{
    Interface.ColorizeMenu.palette.Rs._x = random(256);
    Interface.ColorizeMenu.palette.Gs._x = random(256);
    Interface.ColorizeMenu.palette.Bs._x = random(256);
    SwapPalette(Interface.ColorizeMenu.palette);
};
GameData.Menus.Functions.ColorizeMenu = function (S)
{
    colorHex = GameData.Characters[GameData.Target._name].HairColor;
    ColorPalette(Interface.ColorizeMenu.palette.Cp.BG, colorHex);
    Interface.ColorizeMenu.palette.Rs._x = toRGB(colorHex.charAt(2)) * 16 + toRGB(colorHex.charAt(3));
    Interface.ColorizeMenu.palette.Gs._x = toRGB(colorHex.charAt(4)) * 16 + toRGB(colorHex.charAt(5));
    Interface.ColorizeMenu.palette.Bs._x = toRGB(colorHex.charAt(6)) * 16 + toRGB(colorHex.charAt(7));
    OpenMenu(1, Interface.ColorizeMenu);
    OnLoadHandler(Interface.ColorizeMenu);
};
GameData.Menus.Functions.ClusterDir = function (S)
{
    if (GameData.Clusters[GameData.Target._name].Dir == "Out")
    {
        GameData.Clusters[GameData.Target._name].Dir = "In";
        S.bName.text = "In";
    }
    else if (GameData.Clusters[GameData.Target._name].Dir == "In")
    {
        GameData.Clusters[GameData.Target._name].Dir = "Linear";
        S.bName.text = "Linear";
    }
    else if (GameData.Clusters[GameData.Target._name].Dir == "Linear")
    {
        GameData.Clusters[GameData.Target._name].Dir = "Random";
        S.bName.text = "Random";
    }
    else
    {
        GameData.Clusters[GameData.Target._name].Dir = "Out";
        S.bName.text = "Out";
    } // end else if
    fixCluster(GameData.Target);
    OnLoadHandler(Interface.ClusterOptions);
};
GameData.Menus.Functions.LocksMenu = function (S)
{
    if (Interface.LockMenu._visible)
    {
        CloseMenus(2);
        SwapColor(S.BG, "Buttons", 1);
    }
    else
    {
        checkLocks(GameData.Characters[GameData.Target._name], Interface.LockMenu);
        OpenMenu(2, Interface.LockMenu, this.BG);
        SwapColor(S.BG, "Buttons", 2);
    } // end else if
};
GameData.Menus.Functions.Clusterize = function (S)
{
    var _loc2 = GameData.Objects[GameData.Target._name].Scale;
    var _loc1 = makeCluster(GameData.Objects[GameData.Target._name].Type);
    _loc1._xscale = _loc2;
    _loc1._yscale = _loc2;
    GameData.Clusters[_loc1._name].Scale = _loc2;
    Delete(GameData.Target);
    Target(_loc1);
};
GameData.Menus.Functions.TurnIntoRain = function (S)
{
    var _loc2 = GameData.Objects[GameData.Target._name].Scale;
    var _loc1 = makeRain(GameData.Objects[GameData.Target._name].Type);
    _loc1._xscale = _loc2;
    _loc1._yscale = _loc2;
    GameData.Rain[_loc1._name].Scale = _loc2;
    Delete(GameData.Target);
    Target(_loc1);
};
GameData.Menus.Functions.CharOptions = function (S)
{
    openCOMenu();
};
GameData.Menus.Functions.ShowTargetDNA = function (S)
{
    showDNAstrand(GameData.Characters[GameData.Target._name]);
};
GameData.Menus.Functions.BringToFront = function (S)
{
    BringToFront(GameData.Target);
};
GameData.Menus.Functions.BringForward = function (S)
{
    BringForward(GameData.Target);
};
GameData.Menus.Functions.SendBackward = function (S)
{
    SendBackward(GameData.Target);
};
GameData.Menus.Functions.SendToBack = function (S)
{
    SendToBack(GameData.Target);
};
GameData.Menus.Functions.VerticalFlip = function (S)
{
    VFlip();
};
GameData.Menus.Functions.HorizontalFlip = function (S)
{
    HFlip();
};
GameData.Menus.Functions.Rename = function (S)
{
    if (Interface.RenameMenu._visible)
    {
        CloseMenus(3);
        SwapColor(this.BG, "Buttons", 1);
    }
    else
    {
        resetRenameMenu();
        var _loc2 = new TextFormat();
        _loc2.font = "Wild Words";
        Interface.RenameMenu.iName.setNewTextFormat(_loc2);
        if (GameData.TargetType == "Character")
        {
            Interface.RenameMenu.iName.text = GameData.Characters[GameData.Target._name].Name;
        }
        else if (GameData.TargetType == "Object")
        {
            Interface.RenameMenu.iName.text = GameData.Objects[GameData.Target._name].Name;
        }
        else if (GameData.TargetType == "SpeechBubble")
        {
            Interface.RenameMenu.iName.text = GameData.SpeechBubbles[GameData.Target._name].Name;
        }
        else if (GameData.TargetType == "Screenshot")
        {
            Interface.RenameMenu.iName.text = GameData.Screenshots[GameData.Target._name].Name;
        } // end else if
        Selection.setFocus(Interface.RenameMenu.iName);
        OpenMenu(3, Interface.RenameMenu, this.BG);
        SwapColor(this.BG, "Buttons", 2);
    } // end else if
};
GameData.Menus.Functions.PartsList = function (S)
{
    if (S.bName.text == "Mouth")
    {
        var _loc3 = Interface.MouthMenu;
    }
    else if (S.bName.text == "Eyes")
    {
        _loc3 = Interface.EyesMenu;
    }
    else if (S.bName.text == "Hair")
    {
        _loc3 = Interface.HairMenu;
    }
    else if (S.bName.text == "Body")
    {
        _loc3 = Interface.BodyMenu;
    }
    else if (S.bName.text == "Arms")
    {
        _loc3 = Interface.ArmsMenu;
    }
    else if (S.bName.text == "Shoes")
    {
        _loc3 = Interface.ShoesMenu;
    }
    else if (S.bName.text == "Back")
    {
        _loc3 = Interface.BackMenu;
    }
    else if (S.bName.text == "Accessory")
    {
        _loc3 = Interface.AccMenu;
    }
    else if (S.bName.text == "Items")
    {
        _loc3 = Interface.ItemMenu;
    }
    else if (S.bName.text == "Hat")
    {
        _loc3 = Interface.HatMenu;
    } // end else if
    if (GameData.Locks[S.bName.text] || GameData.Characters[GameData.Target._name].Locks[S.bName.text])
    {
        OpenMenu(3, Interface.HelpWindow, this);
        resetHelp();
        Interface.HelpWindow.BasicHelpMenu._visible = false;
        Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Locks;
        Interface.HelpWindow.Next._visible = true;
        Interface.HelpWindow.Next.onRelease = function ()
        {
            Interface.HelpWindow._visible = false;
        };
    }
    else if (_loc3._visible)
    {
        CloseMenus(3);
        SwapColor(S.BG, "Buttons", 1);
    }
    else
    {
        _loc3._x = S._parent._x + 210;
        OpenMenu(3, _loc3, S);
        SwapColor(S.BG, "Buttons", 2);
    } // end else if
};
GameData.Menus.Functions.OpenHelp = function (S)
{
    if (Interface.HelpWindow._visible)
    {
        CloseMenus(2);
        SwapColor(S.BG, "Buttons", 1);
    }
    else
    {
        resetHelp();
        CloseMenus(1);
        OpenMenu(2, Interface.HelpWindow, S);
        SwapColor(S.BG, "Buttons", 2);
    } // end else if
};
GameData.Menus.Functions.NewChar = function (S)
{
    makeChar();
};
GameData.Menus.Functions.OpenMenu = function (S, T, L)
{
    if (GameData.Menus[T])
    {
        SetMenu(L, T, S, S._parent._x, S._parent._y);
    }
    else
    {
        var _loc4 = Interface[T];
        _loc4._x = S._parent._x + 110;
        NewOpenMenu(S, _loc4, L);
        if (T == "SceneActMenu")
        {
            var _loc2 = GameData.SceneActs.length;
            if (_loc2 > 11)
            {
                _loc2 = 11;
            } // end if
            Interface.SceneActMenu._y = -155 + 20 * _loc2;
        } // end if
    } // end else if
};
GameData.Menus.Functions.Shrink = function (S, T)
{
    if (T == "Characters" || T == "All")
    {
        for (c in GameData.Characters)
        {
            if (GameData.Characters[c].Scale > 40)
            {
                GameData.Characters[c].Scale = 40;
                stage[c]._xscale = 40 * stage[c].XFace;
                stage[c]._yscale = 40 * stage[c].YFace;
            } // end if
        } // end of for...in
    } // end if
    if (T == "Objects" || T == "All")
    {
        for (c in GameData.Objects)
        {
            if (GameData.Objects[c].Scale > 40)
            {
                GameData.Objects[c].Scale = 40;
                stage[c]._xscale = 40 * stage[c].XFace;
                stage[c]._yscale = 40 * stage[c].YFace;
            } // end if
        } // end of for...in
    } // end if
    if (T == "Bubbles" || T == "All")
    {
        for (c in GameData.SpeechBubbles)
        {
            if (GameData.SpeechBubbles[c].Scale > 40)
            {
                GameData.SpeechBubbles[c].Scale = 40;
                stage[c]._xscale = 40 * stage[c].XFace;
                stage[c]._yscale = 40 * stage[c].YFace;
            } // end if
        } // end of for...in
    } // end if
    if (T == "Screenshots" || T == "All")
    {
        for (c in GameData.Screenshots)
        {
            if (GameData.Screenshots[c].Scale > 40)
            {
                GameData.Screenshots[c].Scale = 40;
                stage[c]._xscale = 40 * stage[c].XFace;
                stage[c]._yscale = 40 * stage[c].YFace;
            } // end if
        } // end of for...in
    } // end if
};
GameData.Menus.Functions.Clear = function (S, T)
{
    if (T == "Characters" || T == "All")
    {
        for (c in GameData.Characters)
        {
            Delete(stage[c]);
        } // end of for...in
    } // end if
    if (T == "Clusters" || T == "All")
    {
        for (c in GameData.Clusters)
        {
            Delete(stage[c]);
        } // end of for...in
    } // end if
    if (T == "Objects" || T == "All")
    {
        for (c in GameData.Objects)
        {
            Delete(stage[c]);
        } // end of for...in
    } // end if
    if (T == "Bubbles" || T == "All")
    {
        for (c in GameData.SpeechBubbles)
        {
            Delete(stage[c]);
        } // end of for...in
    } // end if
    if (T == "Rain" || T == "All")
    {
        for (c in GameData.Rain)
        {
            Delete(stage[c]);
        } // end of for...in
    } // end if
    if (T == "Screenshots" || T == "All")
    {
        for (c in GameData.Screenshots)
        {
            Delete(stage[c]);
        } // end of for...in
    } // end if
    if (T == "BG" || T == "All")
    {
        SwapBG(0);
    } // end if
};
GameData.Menus.Functions.Scramble = function (S)
{
    for (c in GameData.Characters)
    {
        Scramble(stage[c]);
    } // end of for...in
};
GameData.Menus.Functions.ShowToy = function (S, T)
{
    if (stage[T]._visible)
    {
        Delete(stage[T]);
    }
    else
    {
        GameData.Depths.StageList.push({Name: T, Type: "Toys", Depth: stage[T].getDepth()});
        GameData.Depths.StageList.sortOn("Depth", Array.DESCENDING | Array.NUMERIC);
        stage[T]._visible = true;
        if (T == "GravityWell")
        {
            SendToBack(stage[T]);
        }
        else if (T != "Mysterious Gap")
        {
            BringToFront(stage[T]);
        } // end else if
    } // end else if
};
GameData.Menus.OnSetFocus.isXLoc = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Target._x = Number(this.text);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isYLoc = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Target._y = Number(this.text);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRotation = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Target._rotation = Number(this.text);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isAlpha = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Target._alpha = Number(this.text);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isScale = function (T)
{
    T.onKillFocus = function ()
    {
        if (Number(this.text) < GameData.ScaleLimit)
        {
            this.text = GameData.ScaleLimit;
        } // end if
        GameData[getArray()][GameData.Target._name].Scale = Number(this.text);
        GameData.Target._xscale = Number(this.text) * GameData.Target.XFace;
        GameData.Target._yscale = Number(this.text) * GameData.Target.YFace;
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRScale = function (T)
{
    T.onKillFocus = function ()
    {
        if (Number(this.text) < GameData.ScaleLimit)
        {
            this.text = GameData.ScaleLimit;
        } // end if
        GameData[getArray()][GameData.Target._name].Scale = Number(this.text);
        for (d in GameData.Target)
        {
            fixDropScale(GameData.Target[d]);
        } // end of for...in
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRDensity = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Rain[GameData.Target._name].Qty = Number(this.text);
        fixRain(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isClusterRows = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Clusters[GameData.Target._name].Rows = Number(this.text);
        fixCluster(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isClusterCols = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Clusters[GameData.Target._name].Cols = Number(this.text);
        fixCluster(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isClusterDist = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Clusters[GameData.Target._name].Distance = Number(this.text);
        fixCluster(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isClusterSpiral = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Clusters[GameData.Target._name].Spiral = Number(this.text);
        fixCluster(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isClusterSpread = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Clusters[GameData.Target._name].Spread = Number(this.text);
        fixCluster(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isClusterRMod = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Clusters[GameData.Target._name].RMod = Number(this.text);
        fixCluster(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isClusterSD = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Clusters[GameData.Target._name].StartDist = Number(this.text);
        fixCluster(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRTwirlMin = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Rain[GameData.Target._name].Rmin = Number(this.text);
        if (Number(this.text) > GameData.Rain[GameData.Target._name].Rmax)
        {
            GameData.Rain[GameData.Target._name].Rmax = Number(this.text);
            this._parent.tmaxI.text = this.text;
        } // end if
        fixRain(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRTwirlMax = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Rain[GameData.Target._name].Rmax = Number(this.text);
        if (GameData.Rain[GameData.Target._name].Rmin > Number(this.text))
        {
            GameData.Rain[GameData.Target._name].Rmin = Number(this.text);
            this._parent.tminI.text = this.text;
        } // end if
        fixRain(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRXMin = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Rain[GameData.Target._name].Xmin = Number(this.text);
        if (Number(this.text) > GameData.Rain[GameData.Target._name].Xmax)
        {
            GameData.Rain[GameData.Target._name].Xmax = Number(this.text);
            this._parent.xmaxI.text = this.text;
        } // end if
        fixRain(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRXMax = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Rain[GameData.Target._name].Xmax = Number(this.text);
        if (GameData.Rain[GameData.Target._name].Xmin > Number(this.text))
        {
            GameData.Rain[GameData.Target._name].Xmin = Number(this.text);
            this._parent.xminI.text = this.text;
        } // end if
        fixRain(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRYMin = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Rain[GameData.Target._name].Ymin = Number(this.text);
        if (Number(this.text) > GameData.Rain[GameData.Target._name].Ymax)
        {
            GameData.Rain[GameData.Target._name].Ymax = Number(this.text);
            this._parent.ymaxI.text = this.text;
        } // end if
        fixRain(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRYMax = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.Rain[GameData.Target._name].Ymax = Number(this.text);
        if (GameData.Rain[GameData.Target._name].Ymin > Number(this.text))
        {
            GameData.Rain[GameData.Target._name].Ymin = Number(this.text);
            this._parent.yminI.text = this.text;
        } // end if
        fixRain(GameData.Target);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isRGB = function (T)
{
    T.onKillFocus = function ()
    {
        colorHex = "0x" + this.text;
        Interface.ColorizeMenu.palette.Rs._x = toRGB(colorHex.charAt(2)) * 16 + toRGB(colorHex.charAt(3));
        Interface.ColorizeMenu.palette.Gs._x = toRGB(colorHex.charAt(4)) * 16 + toRGB(colorHex.charAt(5));
        Interface.ColorizeMenu.palette.Bs._x = toRGB(colorHex.charAt(6)) * 16 + toRGB(colorHex.charAt(7));
        SwapPalette(Interface.ColorizeMenu.palette);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isSceneName = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.CurrentScene.Name = this.text.toLowerCase();
        Interface.SceneFrame.bName.text = GameData.CurrentScene.Name + " : Part " + (GameData.CurrentScene.CurrentAct + 1);
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isPrevScene = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.CurrentScene.Prev = this.text.toLowerCase();
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnSetFocus.isNextScene = function (T)
{
    T.onKillFocus = function ()
    {
        GameData.CurrentScene.Next = this.text.toLowerCase();
        GameData.KeyLock = false;
    };
};
GameData.Menus.OnLoad.isSceneName = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.CurrentScene.Name;
};
GameData.Menus.OnLoad.isPrevScene = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.CurrentScene.Prev;
};
GameData.Menus.OnLoad.isNextScene = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.CurrentScene.Next;
};
GameData.Menus.OnLoad.cStageCheck = function (MC, i)
{
    if (GameData.CurrentScene.ClearStage)
    {
        MC[MC.OnLoad[i][0]].gotoAndStop(2);
    }
    else
    {
        MC[MC.OnLoad[i][0]].gotoAndStop(1);
    } // end else if
};
GameData.Menus.OnLoad.isXLoc = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Target._x;
};
GameData.Menus.OnLoad.isYLoc = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Target._y;
};
GameData.Menus.OnLoad.isScale = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData[getArray()][GameData.Target._name].Scale;
};
GameData.Menus.OnLoad.isRotation = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Target._rotation;
};
GameData.Menus.OnLoad.isAlpha = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Target._alpha;
};
GameData.Menus.OnLoad.isClusterRows = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Clusters[GameData.Target._name].Rows;
};
GameData.Menus.OnLoad.isClusterCols = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Clusters[GameData.Target._name].Cols;
};
GameData.Menus.OnLoad.isClusterDist = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Clusters[GameData.Target._name].Distance;
};
GameData.Menus.OnLoad.isClusterSpiral = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Clusters[GameData.Target._name].Spiral;
};
GameData.Menus.OnLoad.isClusterSpread = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Clusters[GameData.Target._name].Spread;
};
GameData.Menus.OnLoad.isClusterRMod = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Clusters[GameData.Target._name].RMod;
};
GameData.Menus.OnLoad.isClusterSD = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Clusters[GameData.Target._name].StartDist;
};
GameData.Menus.OnLoad.ClusterPoint = function (MC, i)
{
    if (GameData.Clusters[GameData.Target._name].TowardsPoint)
    {
        MC[MC.OnLoad[i][0]].gotoAndStop(2);
    }
    else
    {
        MC[MC.OnLoad[i][0]].gotoAndStop(1);
    } // end else if
};
GameData.Menus.OnLoad.isClusterDir = function (MC, i)
{
    MC[MC.OnLoad[i][0]].bName.text = GameData.Clusters[GameData.Target._name].Dir;
};
GameData.Menus.OnLoad.isRDensity = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Rain[GameData.Target._name].Qty;
};
GameData.Menus.OnLoad.isRTwirlMin = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Rain[GameData.Target._name].Rmin;
};
GameData.Menus.OnLoad.isRTwirlMax = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Rain[GameData.Target._name].Rmax;
};
GameData.Menus.OnLoad.isRXMin = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Rain[GameData.Target._name].Xmin;
};
GameData.Menus.OnLoad.isRXMax = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Rain[GameData.Target._name].Xmax;
};
GameData.Menus.OnLoad.isRYMin = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Rain[GameData.Target._name].Ymin;
};
GameData.Menus.OnLoad.isRYMax = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Rain[GameData.Target._name].Ymax;
};
GameData.Menus.OnLoad.isRGB = function (MC, i)
{
    if (GameData.TargetType == "Character")
    {
        MC[MC.OnLoad[i][0]].text = GameData.Characters[GameData.Target._name].HairColor.substr(2, 6);
    }
    else if (GameData.TargetType == "SpeechBubble")
    {
        MC[MC.OnLoad[i][0]].text = GameData.SpeechBubbles[GameData.Target._name].FontColor.substr(2, 6);
    } // end else if
};
GameData.Menus.OnLoad.isBlurX = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Screenshots[GameData.Target._name].BlurSettings.X;
};
GameData.Menus.OnLoad.isBlurY = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Screenshots[GameData.Target._name].BlurSettings.Y;
};
GameData.Menus.OnLoad.isBlurQ = function (MC, i)
{
    MC[MC.OnLoad[i][0]].text = GameData.Screenshots[GameData.Target._name].BlurSettings.Q;
};
GameData.Settings.UntargetablePinned.Trigger = function ()
{
    if (GameData.Settings.UntargetablePinned.Check)
    {
        ClearClickHandlers();
    }
    else
    {
        SetClickHandlers();
    } // end else if
};
GameData.Menus.Max = 4;
GameData.Menus.AutoScale = true;
GameData.Menus.DMax = 0;
GameData.Menus.Size = 100;
GameData.Menus.Targets = new Object();
GameData.Menus.MainMenu = new Object();
GameData.Menus.MainMenu.Size = 140;
GameData.Menus.MainMenu.XMod = 0;
GameData.Menus.MainMenu.YMod = 0;
GameData.Menus.MainMenu.Items = new Array();
AddMenuItem("MainMenu", "Options", "OpenWindow-Options");
AddMenuItem("MainMenu", "Insert", "Open-InsertMenu-2");
AddMenuItem("MainMenu", "Global Locks", "Open-GlobalLockMenu-2");
AddMenuItem("MainMenu", "Stage", "Open-StageMenu-2");
AddMenuItem("MainMenu", "Background", "Open-BGMenu-2");
AddMenuItem("MainMenu", "Toys", "Open-ToyMenu-2");
AddMenuItem("MainMenu", "Load Preset", "Open-PresetMenu-2");
AddMenuItem("MainMenu", "New Character", "NewChar");
AddMenuItem("MainMenu", "File", "Open-FileMenu-2");
AddMenuItem("MainMenu", "Help Me Eirin!", "OpenHelp");
GameData.Menus.SceneMenu = new Object();
GameData.Menus.SceneMenu.Size = 140;
GameData.Menus.SceneMenu.XMod = 20;
GameData.Menus.SceneMenu.YMod = 120;
GameData.Menus.SceneMenu.Items = new Array();
AddMenuItem("SceneMenu", "Scene Info", "OpenWindow-SceneSettings");
AddMenuItem("SceneMenu", "Save Scene", "SaveScene");
AddMenuItem("SceneMenu", "Parts", "Open-SceneActMenu-3");
AddMenuItem("SceneMenu", "New Part", "MakeNewAct");
AddMenuItem("SceneMenu", "Clear Stage", "Clear-All");
GameData.Menus.FileMenu = new Object();
GameData.Menus.FileMenu.Size = 140;
GameData.Menus.FileMenu.XMod = 140;
GameData.Menus.FileMenu.YMod = 20;
GameData.Menus.FileMenu.Items = new Array();
AddMenuItem("FileMenu", "Characters", "Open-SavedCharMenu-3");
AddMenuItem("FileMenu", "Scene Info", "OpenWindow-SceneSettings");
AddMenuItem("FileMenu", "Save Scene", "SaveScene");
AddMenuItem("FileMenu", "Open Scene", "Open-SavedSceneMenu-3");
GameData.Menus.CharacterMenu = new Object();
GameData.Menus.CharacterMenu.Size = 140;
GameData.Menus.CharacterMenu.XMod = 0;
GameData.Menus.CharacterMenu.YMod = 0;
GameData.Menus.CharacterMenu.Items = new Array();
AddMenuItem("CharacterMenu", "Save", "SaveChar");
AddMenuItem("CharacterMenu", "Show DNA", "ShowTargetDNA");
AddMenuItem("CharacterMenu", "Options", "CharOptions");
AddMenuItem("CharacterMenu", "Duplicate", "DupeChar");
AddMenuItem("CharacterMenu", "Colorize", "ColorizeMenu");
AddMenuItem("CharacterMenu", "Lock Parts", "LocksMenu");
AddMenuItem("CharacterMenu", "Change Parts", "Open-PartsMenu-2");
AddMenuItem("CharacterMenu", "Edit", "Open-EditMenu-2");
AddMenuItem("CharacterMenu", "Randomize", "Randomize");
AddMenuItem("CharacterMenu", "Delete", "Delete");
GameData.Menus.ObjectMenu = new Object();
GameData.Menus.ObjectMenu.Size = 140;
GameData.Menus.ObjectMenu.XMod = 0;
GameData.Menus.ObjectMenu.YMod = 0;
GameData.Menus.ObjectMenu.Items = new Array();
AddMenuItem("ObjectMenu", "Options", "OpenWindow-GeneralOptions");
AddMenuItem("ObjectMenu", "Clusterize", "Clusterize");
AddMenuItem("ObjectMenu", "Rain!", "TurnIntoRain");
AddMenuItem("ObjectMenu", "Edit", "Open-EditMenu-2");
AddMenuItem("ObjectMenu", "Delete", "Delete");
GameData.Menus.RainMenu = new Object();
GameData.Menus.RainMenu.Size = 140;
GameData.Menus.RainMenu.XMod = 0;
GameData.Menus.RainMenu.YMod = 0;
GameData.Menus.RainMenu.Items = new Array();
AddMenuItem("RainMenu", "Options", "OpenWindow-RainOptions");
AddMenuItem("RainMenu", "Edit", "Open-EditMenu-2");
AddMenuItem("RainMenu", "Delete", "Delete");
GameData.Menus.SSMenu = new Object();
GameData.Menus.SSMenu.Size = 140;
GameData.Menus.SSMenu.XMod = 0;
GameData.Menus.SSMenu.YMod = 0;
GameData.Menus.SSMenu.Items = new Array();
AddMenuItem("SSMenu", "Options", "OpenWindow-SnapshotOptions");
AddMenuItem("SSMenu", "Filters", "Open-FilterMenu-2");
AddMenuItem("SSMenu", "Edit", "Open-EditMenu-2");
AddMenuItem("SSMenu", "Delete", "Delete");
GameData.Menus.FilterMenu = new Object();
GameData.Menus.FilterMenu.Size = 140;
GameData.Menus.FilterMenu.XMod = 140;
GameData.Menus.FilterMenu.YMod = 40;
GameData.Menus.FilterMenu.Items = new Array();
AddMenuItem("FilterMenu", "Reset", "DefaultColor");
AddMenuItem("FilterMenu", "Greyscale", "Greyscale");
AddMenuItem("FilterMenu", "Inverse Colors", "InverseColors");
AddMenuItem("FilterMenu", "Blur", "OpenWindow-BlurSettings");
GameData.Menus.ClusterMenu = new Object();
GameData.Menus.ClusterMenu.Size = 140;
GameData.Menus.ClusterMenu.XMod = 0;
GameData.Menus.ClusterMenu.YMod = 0;
GameData.Menus.ClusterMenu.Items = new Array();
AddMenuItem("ClusterMenu", "Options", "OpenWindow-ClusterOptions");
AddMenuItem("ClusterMenu", "Edit", "Open-EditMenu-2");
AddMenuItem("ClusterMenu", "Delete", "Delete");
GameData.Menus.BubbleMenu = new Object();
GameData.Menus.BubbleMenu.Size = 140;
GameData.Menus.BubbleMenu.XMod = 0;
GameData.Menus.BubbleMenu.YMod = 0;
GameData.Menus.BubbleMenu.Items = new Array();
AddMenuItem("BubbleMenu", "Options", "BubbleOptions");
AddMenuItem("BubbleMenu", "Colorize", "ColorizeMenu");
AddMenuItem("BubbleMenu", "Set Font", "Open-FontMenu-2");
AddMenuItem("BubbleMenu", "Edit", "Open-EditMenu-2");
AddMenuItem("BubbleMenu", "Set Text", "SetText");
AddMenuItem("BubbleMenu", "Delete", "Delete");
GameData.Menus.FontMenu = new Object();
GameData.Menus.FontMenu.Size = 140;
GameData.Menus.FontMenu.XMod = 140;
GameData.Menus.FontMenu.YMod = 40;
GameData.Menus.FontMenu.Items = new Array();
AddMenuItem("FontMenu", "Arial", "SetFont-Arial");
AddMenuItem("FontMenu", "Brankovic", "SetFont-Brankovic");
AddMenuItem("FontMenu", "Geek a byte", "SetFont-Geek a byte");
AddMenuItem("FontMenu", "GungsuhChe", "SetFont-GungsuhChe");
AddMenuItem("FontMenu", "MS UI Gothic", "SetFont-MS UI Gothic");
AddMenuItem("FontMenu", "Necropsy", "SetFont-Necropsy");
AddMenuItem("FontMenu", "Wild Words", "SetFont-Wild Words");
AddMenuItem("FontMenu", "Wingdings", "SetFont-Wingdings");
GameData.Menus.EditMenu = new Object();
GameData.Menus.EditMenu.Size = 140;
GameData.Menus.EditMenu.XMod = 140;
GameData.Menus.EditMenu.YMod = 40;
GameData.Menus.EditMenu.Items = new Array();
AddMenuItem("EditMenu", "Rename", "Rename");
AddMenuItem("EditMenu", "Horizontal Flip", "HorizontalFlip");
AddMenuItem("EditMenu", "Vertical Flip", "VerticalFlip");
AddMenuItem("EditMenu", "Send to Back", "SendToBack");
AddMenuItem("EditMenu", "Send Backward", "SendBackward");
AddMenuItem("EditMenu", "Bring Forward", "BringForward");
AddMenuItem("EditMenu", "Bring to Front", "BringToFront");
GameData.Menus.PartsMenu = new Object();
GameData.Menus.PartsMenu.Size = 100;
GameData.Menus.PartsMenu.XMod = -100;
GameData.Menus.PartsMenu.YMod = 40;
GameData.Menus.PartsMenu.Items = new Array();
AddMenuItem("PartsMenu", "Mouth", "PartsList");
AddMenuItem("PartsMenu", "Eyes", "PartsList");
AddMenuItem("PartsMenu", "Hair", "PartsList");
AddMenuItem("PartsMenu", "Body", "PartsList");
AddMenuItem("PartsMenu", "Arms", "PartsList");
AddMenuItem("PartsMenu", "Shoes", "PartsList");
AddMenuItem("PartsMenu", "Back", "PartsList");
AddMenuItem("PartsMenu", "Accessory", "PartsList");
AddMenuItem("PartsMenu", "Items", "PartsList");
AddMenuItem("PartsMenu", "Hat", "PartsList");
GameData.Menus.StageMenu = new Object();
GameData.Menus.StageMenu.Size = 140;
GameData.Menus.StageMenu.XMod = 140;
GameData.Menus.StageMenu.YMod = 40;
GameData.Menus.StageMenu.Items = new Array();
AddMenuItem("StageMenu", "Clear", "Open-ClearMenu-3");
AddMenuItem("StageMenu", "Randomize All", "Randomize-All");
AddMenuItem("StageMenu", "Scramble!", "Scramble");
AddMenuItem("StageMenu", "Shrink", "Open-ShrinkMenu-3");
GameData.Menus.ShrinkMenu = new Object();
GameData.Menus.ShrinkMenu.Size = 140;
GameData.Menus.ShrinkMenu.XMod = 140;
GameData.Menus.ShrinkMenu.YMod = 40;
GameData.Menus.ShrinkMenu.Items = new Array();
AddMenuItem("ShrinkMenu", "Characters", "Shrink-Characters");
AddMenuItem("ShrinkMenu", "Objects", "Shrink-Objects");
AddMenuItem("ShrinkMenu", "Bubbles", "Shrink-Bubbles");
AddMenuItem("ShrinkMenu", "Screenshots", "Shrink-Screenshots");
AddMenuItem("ShrinkMenu", "Everything", "Shrink-All");
GameData.Menus.ClearMenu = new Object();
GameData.Menus.ClearMenu.Size = 140;
GameData.Menus.ClearMenu.XMod = 140;
GameData.Menus.ClearMenu.YMod = 100;
GameData.Menus.ClearMenu.Items = new Array();
AddMenuItem("ClearMenu", "Characters", "Clear-Characters");
AddMenuItem("ClearMenu", "Clusters", "Clear-Clusters");
AddMenuItem("ClearMenu", "Objects", "Clear-Objects");
AddMenuItem("ClearMenu", "Bubbles", "Clear-Bubbles");
AddMenuItem("ClearMenu", "Rain", "Clear-Rain");
AddMenuItem("ClearMenu", "Screenshots", "Clear-Screenshots");
AddMenuItem("ClearMenu", "Background", "Clear-BG");
AddMenuItem("ClearMenu", "Everything", "Clear-All");
GameData.Menus.InsertMenu = new Object();
GameData.Menus.InsertMenu.Size = 140;
GameData.Menus.InsertMenu.XMod = 140;
GameData.Menus.InsertMenu.YMod = 40;
GameData.Menus.InsertMenu.Items = new Array();
AddMenuItem("InsertMenu", "Object", "Open-ObjectList-3");
AddMenuItem("InsertMenu", "Bubble", "Open-makeBubbleMenu-3");
AddMenuItem("InsertMenu", "Image", "ImportImage");
GameData.Menus.makeBubbleMenu = new Object();
GameData.Menus.makeBubbleMenu.Size = 140;
GameData.Menus.makeBubbleMenu.XMod = 140;
GameData.Menus.makeBubbleMenu.YMod = 40;
GameData.Menus.makeBubbleMenu.Items = new Array();
AddMenuItem("makeBubbleMenu", "Speech", "MakeBubble-1");
AddMenuItem("makeBubbleMenu", "Thought", "MakeBubble-2");
AddMenuItem("makeBubbleMenu", "Box", "MakeBubble-3");
AddMenuItem("makeBubbleMenu", "Floating", "MakeBubble-4");
AddMenuItem("makeBubbleMenu", "Action", "MakeBubble-5");
GameData.Menus.ToyMenu = new Object();
GameData.Menus.ToyMenu.Size = 140;
GameData.Menus.ToyMenu.XMod = 140;
GameData.Menus.ToyMenu.YMod = 40;
GameData.Menus.ToyMenu.Items = new Array();
AddMenuItem("ToyMenu", "Mysterious Gap", "ShowToy-Mysterious Gap");
AddMenuItem("ToyMenu", "Clone Capsule", "ShowToy-Clone Capsule");
AddMenuItem("ToyMenu", "Boxing Chen", "ShowToy-Boxing Chen");
AddMenuItem("ToyMenu", "Gravity Well", "ShowToy-Gravity Well");
AddMenuItem("ToyMenu", "Grouchy Reimu", "ShowToy-Grouchy Reimu");
GameData.Help = new Object();
GameData.Help.WalfasLinkX = -40;
GameData.Help.WalfasLinkY = 50;
GameData.Help.Locks = "That part is locked!\n\n";
GameData.Help.Locks = GameData.Help.Locks + "Go to target character\'s\nlock settings to unlock it.\n\n";
GameData.Help.Locks = GameData.Help.Locks + "If the character\'s lock for this part is unchecked, then try the global lock settings under the main menu.\n\n";
GameData.Help.Locks = GameData.Help.Locks + "The global lock and unlock all will also affect each character\'s locks.";
GameData.Help.Intro = "Hello, Eirin here to\nhelp you with learning\nhow to use this program.\n\n";
GameData.Help.Intro = GameData.Help.Intro + "What would you like to know?";
GameData.Help.Basics = "Click \"New Character\"\nto spawn a new character.\n";
GameData.Help.Basics = GameData.Help.Basics + "You can click on characters\nto select them. ";
GameData.Help.Basics = GameData.Help.Basics + "Dragging their body will move them. ";
GameData.Help.Basics = GameData.Help.Basics + "Dragging their head will rotate them. ";
GameData.Help.Basics = GameData.Help.Basics + "Holding shift while dragging will scale them.\n\n";
GameData.Help.Basics = GameData.Help.Basics + "When you click on a character, a target frame will appear on the bottom. ";
GameData.Help.Basics = GameData.Help.Basics + "Clicking this will bring up more options.";
GameData.Help.Updates = "Welcome to version " + GameData.Version + " of create.swf!\n\n";
GameData.Help.Updates = GameData.Help.Updates + "Check out the new options menu!\n\n";
GameData.Help.Updates = GameData.Help.Updates + "Keys 1-0 now change character faces!\n\n";
GameData.Help.Updates = GameData.Help.Updates + "Text bubbles can now spawn randomized!\n\n";
GameData.Help.Import = "\n\nYou\'re viewing this online!\n\n";
GameData.Help.Import = GameData.Help.Import + "You will only be able to import images from walfas.org.\n\n";
GameData.Help.Import = GameData.Help.Import + "If you wish to import images from anywhere, download the create.swf and run it locally.";
GameData.Help.About = "This is version " + GameData.Version + " of\ncreate.swf.\n\n";
GameData.Help.About = GameData.Help.About + "This program is property of\n\n\n\nand was originally created by KirbyM. ";
GameData.Help.About = GameData.Help.About + "The new version was coded by Thefre.";
GameData.Help.Rumors = new Array();
GameData.Help.Rumors.push("\n\n\n\nI hear Nitori is researching cloning technology.");
GameData.Help.Rumors.push("\n\n\n\nSuika has been playing tricks on people lately.");
GameData.Help.Rumors.push("\n\n\n\nBetter not get Reimu angry!");
GameData.Help.Rumors.push("\n\n\n\nI heard there\'s been a mysterious gap floating around Gensokyo.");
GameData.Help.Rumors.push("\n\n\n\nI think Chen is lurking around somewhere.");
GameData.Help.Rumors.push("\n\n\n\nI hear some of the backgrounds are interactive!");
GameData.Help.Rumors.push("\n\n\n\nI think Marisa stole some of my...\"Precious Things\".");
GameData.Parts = new Object();
GameData.Parts.Hats = new Array();
GameData.Parts.Hats.push("none");
GameData.Parts.Hats.push(["China Hat", 1, 0, 0, 0]);
GameData.Parts.Hats.push(["Red Ribbon", 2, 0, 0, 0]);
GameData.Parts.Hats.push(["Witch Hat", 3, 0, 0, 0]);
GameData.Parts.Hats.push(["Sakuya Band", 4, 0, 0, 0]);
GameData.Parts.Hats.push(["Yukari Cap", 5, 0, 0, 0]);
GameData.Parts.Hats.push(["Flandre Cap", 6, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuyuko Cap", 7, 0, 0, 0]);
GameData.Parts.Hats.push(["Headphones", 8, 0, -20, -5]);
GameData.Parts.Hats.push(["Blue Ribbon", 9, 0, 0, 0]);
GameData.Parts.Hats.push(["Eirin Hat", 10, 0, 0, 0]);
GameData.Parts.Hats.push(["Youmu Band", 11, 0, 0, 0]);
GameData.Parts.Hats.push(["Patchy Cap", 12, 0, 0, 0]);
GameData.Parts.Hats.push(["Hairband", 13, 0, 0, 0]);
GameData.Parts.Hats.push(["Reisen\'s Ears", 14, 0, 0, 0]);
GameData.Parts.Hats.push(["Mokou\'s Bow", 15, 0, 0, 0]);
GameData.Parts.Hats.push(["Sparrow Cap", 16, 0, 0, 0]);
GameData.Parts.Hats.push(["Bunny Ears", 17, 0, 0, 0]);
GameData.Parts.Hats.push(["Bento Hat", 18, 0, 0, 0]);
GameData.Parts.Hats.push(["Ran\'s Cap", 19, 0, 0, 0]);
GameData.Parts.Hats.push(["Letty\'s Cap", 20, 0, 0, 0]);
GameData.Parts.Hats.push(["Chen\'s Cap", 21, 0, 0, 0]);
GameData.Parts.Hats.push(["Suika\'s Horns", 22, 0, 0, 0]);
GameData.Parts.Hats.push(["Remilia\'s Cap", 23, 0, 0, 0]);
GameData.Parts.Hats.push(["Lily White\'s Cap", 24, 0, 0, 0]);
GameData.Parts.Hats.push(["Lily Black\'s Cap", 25, 0, 0, 0]);
GameData.Parts.Hats.push(["Hair Beads", 26, 0, 0, 0]);
GameData.Parts.Hats.push(["Kappa Cap", 27, 0, 0, 0]);
GameData.Parts.Hats.push(["Judgement Helm", 28, 0, 0, 0]);
GameData.Parts.Hats.push(["Bug Feelers", 29, 0, 0, 0]);
GameData.Parts.Hats.push(["Rumia\'s Amulet", 30, 0, 0, 0]);
GameData.Parts.Hats.push(["Tengu Hat", 31, 0, 0, 0]);
GameData.Parts.Hats.push(["Mini Tengu Hat", 32, 0, 0, 0]);
GameData.Parts.Hats.push(["Devil Wings", 33, 0, 0, 0]);
GameData.Parts.Hats.push(["Lunasa\'s Hat", 34, 0, 0, 0]);
GameData.Parts.Hats.push(["Merlin\'s Hat", 35, 0, 0, 0]);
GameData.Parts.Hats.push(["Lyrica\'s Hat", 36, 0, 0, 0]);
GameData.Parts.Hats.push(["Yellow Ribbon", 37, 0, 0, 0]);
GameData.Parts.Hats.push(["Medicine\'s Knot", 38, 0, 0, 0]);
GameData.Parts.Hats.push(["EX-Keine\'s Horns", 39, 0, 0, 0]);
GameData.Parts.Hats.push(["Top Hat", 40, 0, 0, 0]);
GameData.Parts.Hats.push(["The Frog God", 41, 0, 0, 0]);
GameData.Parts.Hats.push(["Hina Ribbon", 42, 0, 0, 0]);
GameData.Parts.Hats.push(["Frog Clip", 43, 0, 0, 0]);
GameData.Parts.Hats.push(["Rope Bandana", 44, 0, 0, 0]);
GameData.Parts.Hats.push(["Harvest Cap", 45, 0, 0, 0]);
GameData.Parts.Hats.push(["Maple Leaves", 46, 0, 0, 0]);
GameData.Parts.Hats.push(["Shinki\'s Beads", 47, 0, 0, 0]);
GameData.Parts.Hats.push(["Mima Cap", 48, 0, 0, 0]);
GameData.Parts.Hats.push(["Safety Hat", 49, 0, 0, 0]);
GameData.Parts.Hats.push(["Tokiko\'s Clip", 50, 0, 0, 0]);
GameData.Parts.Hats.push(["Sunny Band", 51, 0, 0, 0]);
GameData.Parts.Hats.push(["Star Ribbon", 52, 0, 0, 0]);
GameData.Parts.Hats.push(["Luna Cap", 53, 0, 0, 0]);
GameData.Parts.Hats.push(["Flower Clip", 54, 0, 0, 0]);
GameData.Parts.Hats.push(["Fedora", 55, 0, 0, 0]);
GameData.Parts.Hats.push(["Maribel\'s Cap", 56, 0, 0, 0]);
GameData.Parts.Hats.push(["Sailor Hat", 57, 0, 0, 0]);
GameData.Parts.Hats.push(["Summer Hat", 58, 0, 0, 0]);
GameData.Parts.Hats.push(["Old Red Ribbon", 59, 0, 0, 0]);
GameData.Parts.Hats.push(["Black Ribbon", 60, 0, 0, 0]);
GameData.Parts.Hats.push(["Peach Hat", 61, 0, 0, 0]);
GameData.Parts.Hats.push(["Iku\'s Hat", 62, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuugi\'s Horn", 63, 0, 0, 0]);
GameData.Parts.Hats.push(["Kisume\'s Beads", 64, 0, 0, 0]);
GameData.Parts.Hats.push(["Headset", 65, 0, -20, -5]);
GameData.Parts.Hats.push(["Orange Band", 66, 0, 0, 0]);
GameData.Parts.Hats.push(["Toyohime\'s Hat", 67, 0, 0, 0]);
GameData.Parts.Hats.push(["PC-98 Witch Hat", 68, 0, 0, 0]);
GameData.Parts.Hats.push(["Chef\'s Hat", 69, 0, 0, 0]);
GameData.Parts.Hats.push(["Alice Bow (PC-98)", 70, 0, 0, 0]);
GameData.Parts.Hats.push(["Kurumi\'s Bow", 71, 0, 0, 0]);
GameData.Parts.Hats.push(["Luize\'s Hat", 72, 0, 0, 0]);
GameData.Parts.Hats.push(["Utsuho\'s Bow", 73, 0, 0, 0]);
GameData.Parts.Hats.push(["Orin\'s Cat Ears", 74, 0, 0, 0]);
GameData.Parts.Hats.push(["Satori Band", 75, 0, 0, 0]);
GameData.Parts.Hats.push(["Koishi\'s Hat", 76, 0, 0, 0]);
GameData.Parts.Hats.push(["Yumeko Band", 77, 0, 0, 0]);
GameData.Parts.Hats.push(["Ruukoto Band", 78, 0, 0, 0]);
GameData.Parts.Hats.push(["Mugetsu Band", 79, 0, 0, 0]);
GameData.Parts.Hats.push(["VIVIT Band", 80, 0, 0, 0]);
GameData.Parts.Hats.push(["Gengetsu\'s Bow", 81, 0, 0, 0]);
GameData.Parts.Hats.push(["Halo", 82, 0, 0, 0]);
GameData.Parts.Hats.push(["Konngara\'s Horn", 83, 0, 0, 0]);
GameData.Parts.Hats.push(["Police Cap", 84, 0, 0, 0]);
GameData.Parts.Hats.push(["Orange\'s Hat", 85, 0, 0, 0]);
GameData.Parts.Hats.push(["Rikako Band", 86, 0, 0, 0]);
GameData.Parts.Hats.push(["Rika\'s Hat", 87, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuki\'s Hat", 88, 0, 0, 0]);
GameData.Parts.Hats.push(["Mai\'s Bow", 89, 0, 0, 0]);
GameData.Parts.Hats.push(["Ellen\'s Band", 90, 0, 0, 0]);
GameData.Parts.Hats.push(["Kana\'s Hat", 91, 0, 0, 0]);
GameData.Parts.Hats.push(["Elly\'s Hat", 92, 0, 0, 0]);
GameData.Parts.Hats.push(["Orange Planet", 93, 0, 0, 0]);
GameData.Parts.Hats.push(["Meira\'s Band", 94, 0, 0, 0]);
GameData.Parts.Hats.push(["Elis\' Bow", 95, 0, 0, 0]);
GameData.Parts.Hats.push(["Shingyoku F", 96, 0, 0, 0]);
GameData.Parts.Hats.push(["Shingyoku M", 97, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuka (PJ\'s)", 98, 0, 0, 0]);
GameData.Parts.Hats.push(["Yukari Cap 2", 99, 0, 0, 0]);
GameData.Parts.Hats.push(["Marisa Hat (SA)", 100, 0, 0, 0]);
GameData.Parts.Hats.push(["MoonRabbit Helm", 101, 0, 0, 0]);
GameData.Parts.Hats.push(["Mouse Ears", 102, 0, 0, 0]);
GameData.Parts.Hats.push(["ZUN Hat", 103, 0, 0, 0]);
GameData.Parts.Hats.push(["Ichirin\'s Veil", 104, 0, 0, 0]);
GameData.Parts.Hats.push(["Marisa Hat (UFO)", 105, 0, 0, 0]);
GameData.Parts.Hats.push(["Zombie Halo", 106, 0, 0, 0]);
GameData.Parts.Hats.push(["Shanghai Bow", 107, 0, 0, 0]);
GameData.Parts.Hats.push(["Motorcycle Helm", 108, 0, 0, 0]);
GameData.Parts.Hats.push(["Meimu Bow", 109, 0, 0, 0]);
GameData.Parts.Hats.push(["China Hat (2)", 110, 0, 0, 0]);
GameData.Parts.Hats.push(["Lie Meiling", 111, 0, 0, 0]);
GameData.Parts.Hats.push(["Reimu Ribbon", 112, 0, 0, 0]);
GameData.Parts.Hats.push(["Marisa (PCB)", 113, 0, 0, 0]);
GameData.Parts.Hats.push(["Sakuya Band 2", 114, 0, 0, 0]);
GameData.Parts.Hats.push(["Flandre Hat 2", 115, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuyuko Hat 2", 116, 0, 0, 0]);
GameData.Parts.Hats.push(["Cirno Bow (Blue)", 117, 0, 0, 0]);
GameData.Parts.Hats.push(["Cirno Bow (Green)", 118, 0, 0, 0]);
GameData.Parts.Hats.push(["Cirno Simple Bow", 119, 0, 0, 0]);
GameData.Parts.Hats.push(["Cirno Bonnet", 120, 0, 0, 0]);
GameData.Parts.Hats.push(["Eirin Hat 2", 121, 0, 0, 0]);
GameData.Parts.Hats.push(["Virt.Reality Helm", 122, 0, 0, 0]);
GameData.Parts.Hats.push(["Youmu Band 2", 123, 0, 0, 0]);
GameData.Parts.Hats.push(["Patchy Cap 2", 124, 0, 0, 0]);
GameData.Parts.Hats.push(["Alice Band 2", 125, 0, 0, 0]);
GameData.Parts.Hats.push(["Reisen Ears 2", 126, 0, 0, 0]);
GameData.Parts.Hats.push(["Mokou\'s Bow 2", 127, 0, 0, 0]);
GameData.Parts.Hats.push(["Mystia Cap 2", 128, 0, 0, 0]);
GameData.Parts.Hats.push(["Bandana", 129, 0, 0, 0]);
GameData.Parts.Hats.push(["Tewi Ears 2", 130, 0, 0, 0]);
GameData.Parts.Hats.push(["Bento Hat 2", 131, 0, 0, 0]);
GameData.Parts.Hats.push(["EX Keine Horns", 132, 0, 0, 0]);
GameData.Parts.Hats.push(["Ran Hat 2", 133, 0, 0, 0]);
GameData.Parts.Hats.push(["Letty Hat 2", 134, 0, 0, 0]);
GameData.Parts.Hats.push(["Chen Hat 2", 135, 0, 0, 0]);
GameData.Parts.Hats.push(["Suika Horns 2", 136, 0, 0, 0]);
GameData.Parts.Hats.push(["Murasa\'s Cap", 137, 0, 0, 0]);
GameData.Parts.Hats.push(["Shou\'s Ornament", 138, 0, 0, 0]);
GameData.Parts.Hats.push(["Remilia\'s Hat 2", 139, 0, 0, 0]);
GameData.Parts.Hats.push(["Lily White Hat 2", 140, 0, 0, 0]);
GameData.Parts.Hats.push(["Lily Black Hat 2", 141, 0, 0, 0]);
GameData.Parts.Hats.push(["Komachi Beads 2", 142, 0, 0, 0]);
GameData.Parts.Hats.push(["Kappa Cap 2", 143, 0, 0, 0]);
GameData.Parts.Hats.push(["Judgement Helm 2", 144, 0, 0, 0]);
GameData.Parts.Hats.push(["Antennae", 145, 0, 0, 0]);
GameData.Parts.Hats.push(["Rumia\'s Amulet 2", 146, 0, 0, 0]);
GameData.Parts.Hats.push(["Tengu Hat 2A", 147, 0, 0, 0]);
GameData.Parts.Hats.push(["Tengu Hat 2B", 148, 0, 0, 0]);
GameData.Parts.Hats.push(["Momizi Hat+Ears", 149, 0, 0, 0]);
GameData.Parts.Hats.push(["Devil Wings 2", 150, 0, 0, 0]);
GameData.Parts.Hats.push(["Witch Hat 2", 151, 0, 0, 0]);
GameData.Parts.Hats.push(["Lunasa\'s Hat 2", 152, 0, 0, 0]);
GameData.Parts.Hats.push(["Merlin\'s Hat 2", 153, 0, 0, 0]);
GameData.Parts.Hats.push(["Lyrica\'s Hat 2", 154, 0, 0, 0]);
GameData.Parts.Hats.push(["Sanae (Magical)", 155, 0, 0, 0]);
GameData.Parts.Hats.push(["Yellow Ribbon 2", 156, 0, 0, 0]);
GameData.Parts.Hats.push(["Medicine\'s Knot 2", 157, 0, 0, 0]);
GameData.Parts.Hats.push(["Santa Hat", 158, 0, 0, 0]);
GameData.Parts.Hats.push(["The Frog God 2", 159, 0, 0, 0]);
GameData.Parts.Hats.push(["Hina Ribbon 2A", 160, 0, 0, 0]);
GameData.Parts.Hats.push(["Frog Clip 2", 161, 0, 0, 0]);
GameData.Parts.Hats.push(["Gas Mask", 162, 0, 0, 0]);
GameData.Parts.Hats.push(["Rope Bandana 2", 163, 0, 0, 0]);
GameData.Parts.Hats.push(["Hina Ribbon 2B", 164, 0, 0, 0]);
GameData.Parts.Hats.push(["Green Bandana", 165, 0, 0, 0]);
GameData.Parts.Hats.push(["Balaclava", 166, 0, 0, 0]);
GameData.Parts.Hats.push(["Harvest Cap 2", 167, 0, 0, 0]);
GameData.Parts.Hats.push(["InuSakuya", 168, 0, 0, 0]);
GameData.Parts.Hats.push(["Maple Leaves 2", 169, 0, 0, 0]);
GameData.Parts.Hats.push(["Black Band", 170, 0, 0, 0]);
GameData.Parts.Hats.push(["Shinki\'s Beads 2", 171, 0, 0, 0]);
GameData.Parts.Hats.push(["Darth Vader Helm", 172, 0, 0, 0]);
GameData.Parts.Hats.push(["Mima Cap 2", 173, 0, 0, 0]);
GameData.Parts.Hats.push(["Mima Cap 2 (Mima)", 174, 0, 0, 0]);
GameData.Parts.Hats.push(["Dunce Cap", 175, 0, 0, 0]);
GameData.Parts.Hats.push(["MGS Cyborg-Ninja", 176, 0, 0, 0]);
GameData.Parts.Hats.push(["MGS Cyborg-Ninja 2", 177, 0, 0, 0]);
GameData.Parts.Hats.push(["Reimu Ribbon 2P", 178, 0, 0, 0]);
GameData.Parts.Hats.push(["Straw Hat", 179, 0, 0, 0]);
GameData.Parts.Hats.push(["Ushanka", 180, 0, 0, 0]);
GameData.Parts.Hats.push(["Rengeteki Bow", 181, 0, 0, 0]);
GameData.Parts.Hats.push(["Panda Beanie", 182, 0, 0, 0]);
GameData.Parts.Hats.push(["Football Helmet", 183, 0, 0, 0]);
GameData.Parts.Hats.push(["Wedding Veil", 184, 0, 0, 0]);
GameData.Parts.Hats.push(["Motorcycle Helm 2", 185, 0, 0, 0]);
GameData.Parts.Hats.push(["Ran\'s Ears", 186, 0, 0, 0]);
GameData.Parts.Hats.push(["Chen\'s Ears", 187, 0, 0, 0]);
GameData.Parts.Hats.push(["Tokiko\'s Clip 2", 188, 0, 0, 0]);
GameData.Parts.Hats.push(["Sunny Band 2", 189, 0, 0, 0]);
GameData.Parts.Hats.push(["Momizi Ears", 190, 0, 0, 0]);
GameData.Parts.Hats.push(["Mettaur (Yellow)", 191, 0, 0, 0]);
GameData.Parts.Hats.push(["Mettaur (Blue)", 192, 0, 0, 0]);
GameData.Parts.Hats.push(["Mettaur (Red)", 193, 0, 0, 0]);
GameData.Parts.Hats.push(["Miner\'s Helm", 194, 0, 0, 0]);
GameData.Parts.Hats.push(["Star Ribbon 2", 195, 0, 0, 0]);
GameData.Parts.Hats.push(["Trilby Hat (Black)", 196, 0, 0, 0]);
GameData.Parts.Hats.push(["Trilby Hat (Brown)", 197, 0, 0, 0]);
GameData.Parts.Hats.push(["Ram horns", 198, 0, 0, 0]);
GameData.Parts.Hats.push(["Hatate Tokin", 199, 0, 0, 0]);
GameData.Parts.Hats.push(["Luna Cap 2", 200, 0, 0, 0]);
GameData.Parts.Hats.push(["Jason Mask", 201, 0, 0, 0]);
GameData.Parts.Hats.push(["Cabbie Hat", 202, 0, 0, 0]);
GameData.Parts.Hats.push(["Baseball Cap", 203, 0, 0, 0]);
GameData.Parts.Hats.push(["Red Bandana", 204, 0, 0, 0]);
GameData.Parts.Hats.push(["Bowler Hat", 205, 0, 0, 0]);
GameData.Parts.Hats.push(["Tied Headband", 206, 0, 0, 0]);
GameData.Parts.Hats.push(["Paper Bag", 207, 0, 0, 0]);
GameData.Parts.Hats.push(["Flower Clip 2", 208, 0, 0, 0]);
GameData.Parts.Hats.push(["Bandana+Patch", 209, 0, 0, 0]);
GameData.Parts.Hats.push(["Fedora 2", 210, 0, 0, 0]);
GameData.Parts.Hats.push(["Maribel\'s Cap 2", 211, 0, 0, 0]);
GameData.Parts.Hats.push(["Moonrabbit helm 2", 212, 0, 0, 0]);
GameData.Parts.Hats.push(["Link Hat", 213, 0, 0, 0]);
GameData.Parts.Hats.push(["Kotone Hat", 214, 0, 0, 0]);
GameData.Parts.Hats.push(["Black Ribbon 2", 215, 0, 0, 0]);
GameData.Parts.Hats.push(["Sailor Hat 2", 216, 0, 0, 0]);
GameData.Parts.Hats.push(["Mystia (Black)", 217, 0, 0, 0]);
GameData.Parts.Hats.push(["Butterfly Crown", 218, 0, 0, 0]);
GameData.Parts.Hats.push(["Keine (Alt)", 219, 0, 0, 0]);
GameData.Parts.Hats.push(["Kitsune Mask", 220, 0, 0, 0]);
GameData.Parts.Hats.push(["Tall Hat", 221, 0, 0, 0]);
GameData.Parts.Hats.push(["Ghost Triangle", 222, 0, 0, 0]);
GameData.Parts.Hats.push(["Cirno (Fire)", 223, 0, 0, 0]);
GameData.Parts.Hats.push(["Pirate", 224, 0, 0, 0]);
GameData.Parts.Hats.push(["Beret (Black)", 225, 0, 0, 0]);
GameData.Parts.Hats.push(["Beret (Green)", 226, 0, 0, 0]);
GameData.Parts.Hats.push(["Army Helm (Camo)", 227, 0, 0, 0]);
GameData.Parts.Hats.push(["Army Helm (Grey)", 228, 0, 0, 0]);
GameData.Parts.Hats.push(["Old Red Ribbon 2", 229, 0, 0, 0]);
GameData.Parts.Hats.push(["Butterfly Crown 2", 230, 0, 0, 0]);
GameData.Parts.Hats.push(["Suika Horns (Alt)", 231, 0, 0, 0]);
GameData.Parts.Hats.push(["Tie (Red)", 232, 0, 0, 0]);
GameData.Parts.Hats.push(["Crown", 233, 0, 0, 0]);
GameData.Parts.Hats.push(["Lampshade", 234, 0, 0, 0]);
GameData.Parts.Hats.push(["Tied Headband (Yellow)", 235, 0, 0, 0]);
GameData.Parts.Hats.push(["Peach Hat 2", 236, 0, 0, 0]);
GameData.Parts.Hats.push(["Mushroom Cap", 237, 0, 0, 0]);
GameData.Parts.Hats.push(["Reimu (2 Alt)", 238, 0, 0, 0]);
GameData.Parts.Hats.push(["White Band", 239, 0, 0, 0]);
GameData.Parts.Hats.push(["Yellow Band", 240, 0, 0, 0]);
GameData.Parts.Hats.push(["Snorkel", 241, 0, 0, 0]);
GameData.Parts.Hats.push(["Knight Helm", 242, 0, 0, 0]);
GameData.Parts.Hats.push(["Reisen II Ears", 243, 0, 0, 0]);
GameData.Parts.Hats.push(["Iku\'s Hat", 244, 0, 0, 0]);
GameData.Parts.Hats.push(["Mima Bandana", 245, 0, 0, 0]);
GameData.Parts.Hats.push(["Mima Bandana 2", 246, 0, 0, 0]);
GameData.Parts.Hats.push(["Aviator Hat", 247, 0, 0, 0]);
GameData.Parts.Hats.push(["Towel", 248, 0, 0, 0]);
GameData.Parts.Hats.push(["Tie (Yellow)", 249, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuugi\'s Horn 2", 250, 0, 0, 0]);
GameData.Parts.Hats.push(["Red Mushroom Cap", 251, 0, 0, 0]);
GameData.Parts.Hats.push(["Red Mushroom", 252, 0, 0, 0]);
GameData.Parts.Hats.push(["Aviator Goggles", 253, 0, 0, 0]);
GameData.Parts.Hats.push(["Mario", 254, 0, 0, 0]);
GameData.Parts.Hats.push(["Luigi", 255, 0, 0, 0]);
GameData.Parts.Hats.push(["Utsuho\'s Bow 2", 256, 0, 0, 0]);
GameData.Parts.Hats.push(["Megaman Helmet", 257, 0, 0, 0]);
GameData.Parts.Hats.push(["Orin\'s Cat Ears 2", 258, 0, 0, 0]);
GameData.Parts.Hats.push(["Jester Hat", 259, 0, 0, 0]);
GameData.Parts.Hats.push(["Black Hood", 260, 0, 0, 0]);
GameData.Parts.Hats.push(["Tiger Ears", 261, 0, 0, 0]);
GameData.Parts.Hats.push(["Baseball Cap (Green)", 262, 0, 0, 0]);
GameData.Parts.Hats.push(["Baseball Cap (Orange)", 263, 0, 0, 0]);
GameData.Parts.Hats.push(["Baseball Cap (Red)", 264, 0, 0, 0]);
GameData.Parts.Hats.push(["Satori Band 2", 265, 0, 0, 0]);
GameData.Parts.Hats.push(["Toeto", 266, 0, 0, 0]);
GameData.Parts.Hats.push(["Shou\'s Ornament 2", 267, 0, 0, 0]);
GameData.Parts.Hats.push(["Old Green Ribbon", 268, 0, 0, 0]);
GameData.Parts.Hats.push(["Baseball Cap Back", 269, 0, 0, 0]);
GameData.Parts.Hats.push(["Koishi\'s Hat 2", 270, 0, 0, 0]);
GameData.Parts.Hats.push(["Fez", 271, 0, 0, 0]);
GameData.Parts.Hats.push(["Samus", 272, 0, 0, 0]);
GameData.Parts.Hats.push(["Hair buns", 273, 0, 0, 0]);
GameData.Parts.Hats.push(["Puyo Hat", 274, 0, 0, 0]);
GameData.Parts.Hats.push(["Four Horns", 275, 0, 0, 0]);
GameData.Parts.Hats.push(["Cabbie Hat (Blue)", 276, 0, 0, 0]);
GameData.Parts.Hats.push(["Mitori\'s Hat", 277, 0, 0, 0]);
GameData.Parts.Hats.push(["Lan Headband", 278, 0, 0, 0]);
GameData.Parts.Hats.push(["Sombrero", 279, 0, 0, 0]);
GameData.Parts.Hats.push(["Box Hat", 280, 0, 0, 0]);
GameData.Parts.Hats.push(["Fedora (no bow)", 281, 0, 0, 0]);
GameData.Parts.Hats.push(["Beret (Brown)", 282, 0, 0, 0]);
GameData.Parts.Hats.push(["Cabbie Hat (Brown)", 283, 0, 0, 0]);
GameData.Parts.Hats.push(["Orange Band 2", 284, 0, 0, 0]);
GameData.Parts.Hats.push(["Toyohime\'s Hat 2", 285, 0, 0, 0]);
GameData.Parts.Hats.push(["Alice Bow (PC-98) 2", 286, 0, 0, 0]);
GameData.Parts.Hats.push(["Kurumi\'s Bow 2", 287, 0, 0, 0]);
GameData.Parts.Hats.push(["PC-98 Witch Hat 2", 288, 0, 0, 0]);
GameData.Parts.Hats.push(["Luize\'s Hat 2", 289, 0, 0, 0]);
GameData.Parts.Hats.push(["Yumeko Band 2", 290, 0, 0, 0]);
GameData.Parts.Hats.push(["Ruukoto Band 2", 291, 0, 0, 0]);
GameData.Parts.Hats.push(["Party Hat", 292, 0, 0, 0]);
GameData.Parts.Hats.push(["Mugetsu Band 2", 293, 0, 0, 0]);
GameData.Parts.Hats.push(["Gengetsu\'s Bow 2", 294, 0, 0, 0]);
GameData.Parts.Hats.push(["Konngara\'s Horn 2", 295, 0, 0, 0]);
GameData.Parts.Hats.push(["Top Hat (Pink)", 296, 0, 0, 0]);
GameData.Parts.Hats.push(["Bow (Purple)", 297, 0, 0, 0]);
GameData.Parts.Hats.push(["Bow (Yellow)", 298, 0, 0, 0]);
GameData.Parts.Hats.push(["Orange\'s Hat 2", 299, 0, 0, 0]);
GameData.Parts.Hats.push(["Rikako Band 2", 300, 0, 0, 0]);
GameData.Parts.Hats.push(["Top Hat w/ Horns", 301, 0, 0, 0]);
GameData.Parts.Hats.push(["Rika\'s Hat 2", 302, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuki\'s Hat 2", 303, 0, 0, 0]);
GameData.Parts.Hats.push(["VIVIT Band 2", 304, 0, 0, 0]);
GameData.Parts.Hats.push(["Suika Horns (Alt2)", 305, 0, 0, 0]);
GameData.Parts.Hats.push(["Mai\'s Bow 2", 306, 0, 0, 0]);
GameData.Parts.Hats.push(["Ellen\'s Band 2", 307, 0, 0, 0]);
GameData.Parts.Hats.push(["Kana\'s Hat 2", 308, 0, 0, 0]);
GameData.Parts.Hats.push(["Elly\'s Hat 2", 309, 0, 0, 0]);
GameData.Parts.Hats.push(["Rabbit Ears (Black)", 310, 0, 0, 0]);
GameData.Parts.Hats.push(["Cabbie Hat (Red)", 311, 0, 0, 0]);
GameData.Parts.Hats.push(["Headphones (Red-White)", 312, 0, 0, 0]);
GameData.Parts.Hats.push(["Meira\'s Band 2", 313, 0, 0, 0]);
GameData.Parts.Hats.push(["Elis\' Bow 2", 314, 0, 0, 0]);
GameData.Parts.Hats.push(["Trilby Hat (White)", 315, 0, 0, 0]);
GameData.Parts.Hats.push(["Reisen Ears (black)", 316, 0, 0, 0]);
GameData.Parts.Hats.push(["Shingyoku F 2", 317, 0, 0, 0]);
GameData.Parts.Hats.push(["Shingyoku M 2", 318, 0, 0, 0]);
GameData.Parts.Hats.push(["Yuka (PJ\'s) 2", 319, 0, 0, 0]);
GameData.Parts.Hats.push(["Yukari Cap 3", 320, 0, 0, 0]);
GameData.Parts.Hats.push(["Mouse Ears 2", 321, 0, 0, 0]);
GameData.Parts.Hats.push(["Reimu Ribbon (White)", 322, 0, 0, 0]);
GameData.Parts.Hats.push(["Reimu Ribbon (White 2)", 323, 0, 0, 0]);
GameData.Parts.Hats.push(["Ichirin\'s Veil 2", 324, 0, 0, 0]);
GameData.Parts.Hats.push(["Tengu Mask", 325, 0, 0, 0]);
GameData.Parts.Hats.push(["Shanghai Bow 2", 326, 0, 0, 0]);
GameData.Parts.Hats.push(["Reimu Ribbon (Green)", 327, 0, 0, 0]);
GameData.Parts.Hats.push(["Kyouko Ears 1", 328, 0, 0, 0]);
GameData.Parts.Hats.push(["Kyouko Ears 2", 329, 0, 0, 0]);
GameData.Parts.Hats.push(["Yoshika Hat", 330, 0, 0, 0]);
GameData.Parts.Hats.push(["Yoshika Hat+", 331, 0, 5, 0]);
GameData.Parts.Hats.push(["Yoshika Seal", 332, 0, -10, 0]);
GameData.Parts.Hats.push(["Seiga Hair Stick", 333, 0, 5, 0]);
GameData.Parts.Hats.push(["Seiga Hair Stick 2", 334, 0, 5, 0]);
GameData.Parts.Hats.push(["Tojiko Hat", 335, 0, 5, 0]);
GameData.Parts.Hats.push(["Futo Hat", 336, 0, 5, 0]);
GameData.Parts.Hats.push(["Miko Headphones", 337, 0, 5, 0]);
GameData.Parts.Hats.push(["Mamizou", 338, 0, 5, 0]);
GameData.Parts.Hats.push(["Mamizou Ears", 339, 0, 5, 0]);
GameData.Parts.Hats.push(["Mamizou Leaf", 340, 0, 5, 0]);
GameData.Parts.Hats.push(["Kosuzu\'s Bells", 341, 0, 5, 0]);
GameData.Parts.Hats.push(["Wakasagihime Ears", 342, 0, 5, 0]);
GameData.Parts.Hats.push(["Sekibanki Bow", 343, 0, 5, 0]);
GameData.Parts.Hats.push(["Kagerou Ears", 344, 0, 5, 0]);
GameData.Parts.Hats.push(["Kokoro\'s Mask", 345, 0, 5, 0]);
GameData.Parts.Hats.push(["Mamizou Leaf 2", 346, 0, 5, 0]);
GameData.Parts.Hats.push(["Benben\'s Flower", 347, 0, 5, 0]);
GameData.Parts.Hats.push(["Yatsuhashi\'s Band", 348, 0, 5, 0]);
GameData.Parts.Hats.push(["Seija Horns", 349, 0, 5, 0]);
GameData.Parts.Hats.push(["Shinmyoumaru Hat", 350, 0, 5, 0]);
GameData.Parts.Hats.push(["Seiran Ears", 351, 0, 5, 0]);
GameData.Parts.Hats.push(["Ringo Hat (No Ears)", 352, 0, 5, 0]);
GameData.Parts.Hats.push(["Ringo Hat", 353, 0, 5, 0]);
GameData.Parts.Hats.push(["Doremy Hat", 354, 0, 5, 0]);
GameData.Parts.Hats.push("random");
GameData.Parts.Items = new Array();
GameData.Parts.Items.push("none");
GameData.Parts.Items.push(["Miko Stick", 1, -20, 0, 0]);
GameData.Parts.Items.push(["Broom", 2, 0, 0, -10]);
GameData.Parts.Items.push(["Knife", 3, -20, 0, 0]);
GameData.Parts.Items.push(["Gap", 4, 0, 0, 0]);
GameData.Parts.Items.push(["Levatein", 5, 0, 0, 0]);
GameData.Parts.Items.push(["MEAT", 6, -20, 0, 2]);
GameData.Parts.Items.push(["Popsicle", 7, -20, 0, 2]);
GameData.Parts.Items.push(["Pet Frog", 8, -20, -18, 0]);
GameData.Parts.Items.push(["Bow", 9, 0, -2, -3]);
GameData.Parts.Items.push(["Youmu Set", 10, 6, 10, -13]);
GameData.Parts.Items.push(["Book", 11, -15, -15, 10]);
GameData.Parts.Items.push(["Alice\'s Grimoire", 12, -15, -15, 10]);
GameData.Parts.Items.push(["Mallet", 13, -6, 0, -5]);
GameData.Parts.Items.push(["Cleaver", 14, -20, 0, 1]);
GameData.Parts.Items.push(["Cell Phone", 15, -20, -10, 10]);
GameData.Parts.Items.push(["Arm Cannon", 16, -20, -10, 10]);
GameData.Parts.Items.push(["Pink Gloves", 17, 0, -10, 10]);
GameData.Parts.Items.push(["Bunny Doll", 18, -13, -10, 1]);
GameData.Parts.Items.push(["Plunger", 19, -20, 0, 0]);
GameData.Parts.Items.push(["Magic Staff", 20, -13, 0, -5]);
GameData.Parts.Items.push(["Sword & Shield", 21, 0, 7, -9]);
GameData.Parts.Items.push(["Amulet", 22, -8, -8, 0]);
GameData.Parts.Items.push(["Meat Cleaver", 23, -20, -2, 0]);
GameData.Parts.Items.push(["Kite", 24, -20, 33, -5]);
GameData.Parts.Items.push(["Water Gun", 25, -7, -3, -5]);
GameData.Parts.Items.push(["Fork and Knife", 26, 0, -2, 0]);
GameData.Parts.Items.push(["Dual Fans", 27, 0, -10, -5]);
GameData.Parts.Items.push(["Mic", 28, -5, 0, 0]);
GameData.Parts.Items.push(["Carrot", 29, -10, 0, 0]);
GameData.Parts.Items.push(["Carrot Stick", 30, -13, 8, -5]);
GameData.Parts.Items.push(["Fried Eggs", 31, -17, 3, -3]);
GameData.Parts.Items.push(["Baseball Bat", 32, -22, 0, -2]);
GameData.Parts.Items.push(["Truck", 33, -10, -8, 0]);
GameData.Parts.Items.push(["Flames of Fury!!", 34, 0, 0, 0]);
GameData.Parts.Items.push(["W-Melon Blade", 35, -8, 7, -8]);
GameData.Parts.Items.push(["Suika Shackles", 36, 0, -4, 0]);
GameData.Parts.Items.push(["Suika\'s Gourd", 37, -10, -10, 0]);
GameData.Parts.Items.push(["Beer", 38, -10, -10, 0]);
GameData.Parts.Items.push(["Gungnir", 39, -10, 0, -10]);
GameData.Parts.Items.push(["Parasol", 40, -6, 2, -10]);
GameData.Parts.Items.push(["Scythe", 41, 0, 3, -10]);
GameData.Parts.Items.push(["Wrench", 42, 1, -2, -3]);
GameData.Parts.Items.push(["Judgement Stick", 43, -5, -7, 0]);
GameData.Parts.Items.push(["Fishing Pole", 44, -17, 8, -5]);
GameData.Parts.Items.push(["Flashlight", 45, -10, 12, -15]);
GameData.Parts.Items.push(["Camera", 46, -10, -5, 0]);
GameData.Parts.Items.push(["Leaf Fan", 47, -10, -5, 0]);
GameData.Parts.Items.push(["Momizi\'s Gear", 48, 0, 2, -5]);
GameData.Parts.Items.push(["Tea", 49, -10, 0, 0]);
GameData.Parts.Items.push(["Violin", 50, -25, 0, 0]);
GameData.Parts.Items.push(["Trumpet", 51, -25, 3, 0]);
GameData.Parts.Items.push(["Keyboard", 52, -25, 0, 0]);
GameData.Parts.Items.push(["Flower", 53, -15, 0, 0]);
GameData.Parts.Items.push(["Boxing Gloves", 54, 0, 0, 0]);
GameData.Parts.Items.push(["Suzuran", 55, -15, 0, 0]);
GameData.Parts.Items.push(["Another flower", 56, -5, -2, -5]);
GameData.Parts.Items.push(["Sunflower", 57, -5, 3, -8]);
GameData.Parts.Items.push(["Leek", 58, -18, 0, 0]);
GameData.Parts.Items.push(["Sub Sandwich", 59, -15, -8, 0]);
GameData.Parts.Items.push(["Spatula", 60, -15, -8, 0]);
GameData.Parts.Items.push(["Crescent Staff", 61, -4, 5, -10]);
GameData.Parts.Items.push(["Warhead", 62, 0, 3, -10]);
GameData.Parts.Items.push(["Water Buckets", 63, 0, -8, 0]);
GameData.Parts.Items.push(["Thick Book", 64, -8, -5, 0]);
GameData.Parts.Items.push(["Milk", 65, -6, -5, 0]);
GameData.Parts.Items.push(["Ice Cream", 66, -8, 2, 0]);
GameData.Parts.Items.push(["Banana", 67, -8, -5, 0]);
GameData.Parts.Items.push(["Paintbrush", 68, -5, 2, -8]);
GameData.Parts.Items.push(["Scroll", 69, -2, -3, -10]);
GameData.Parts.Items.push(["Dual Swords", 70, 6, 10, -13]);
GameData.Parts.Items.push(["Chair", 71, -5, 0, -10]);
GameData.Parts.Items.push(["Cross", 72, 0, 3, -10]);
GameData.Parts.Items.push(["Staff", 73, 0, 3, -10]);
GameData.Parts.Items.push(["Sanae\'s Stick", 74, -13, 0, 0]);
GameData.Parts.Items.push(["Youmu\'s Sword", 75, -16, 5, -5]);
GameData.Parts.Items.push(["Dark Sword", 76, -16, 5, -5]);
GameData.Parts.Items.push(["Tenshi\'s Sword", 77, -16, 5, -5]);
GameData.Parts.Items.push(["Whip", 78, -16, 0, -5]);
GameData.Parts.Items.push(["Kendama", 79, -16, 0, 0]);
GameData.Parts.Items.push(["Sparkler", 80, -16, 0, 0]);
GameData.Parts.Items.push(["Bowl O\' Sake", 81, -16, 0, 0]);
GameData.Parts.Items.push(["Sariel\'s Staff", 82, -16, 0, 0]);
GameData.Parts.Items.push(["Konngara\'s Sword", 83, -16, 0, 0]);
GameData.Parts.Items.push(["Nightstick", 84, -16, 0, 0]);
GameData.Parts.Items.push(["Mini-Hakkero", 85, -16, 0, 5]);
GameData.Parts.Items.push(["Orange\'s Baton", 86, -16, 0, 5]);
GameData.Parts.Items.push(["Test Tubes", 87, -16, 0, 5]);
GameData.Parts.Items.push(["Christmas Blade", 88, -16, 0, -5]);
GameData.Parts.Items.push(["NEET-hime Staff", 89, -16, 0, -5]);
GameData.Parts.Items.push(["Meira\'s Sword", 90, -16, 0, -5]);
GameData.Parts.Items.push(["Star Wand", 91, -16, 0, -4]);
GameData.Parts.Items.push(["Yuka\'s Watch", 92, -16, 0, -4]);
GameData.Parts.Items.push(["Weather Vanes", 93, -16, 0, -4]);
GameData.Parts.Items.push(["Kogasa Umbrella", 94, -16, 0, -4]);
GameData.Parts.Items.push(["Ichirin\'s Ring", 95, -16, 0, 0]);
GameData.Parts.Items.push(["Marisa\'s Wand", 96, -16, 0, 0]);
GameData.Parts.Items.push(["Erhu", 97, -16, 0, 0]);
GameData.Parts.Items.push(["Claws", 98, 5, 0, 0]);
GameData.Parts.Items.push(["Halberd", 99, -20, 0, 0]);
GameData.Parts.Items.push(["Dipper", 100, -16, 0, 0]);
GameData.Parts.Items.push(["Pagoda+Spear", 101, 5, 5, -10]);
GameData.Parts.Items.push(["Jeweled Pagoda", 102, 2, 0, 0]);
GameData.Parts.Items.push(["Nue\'s Trident 1", 103, -16, 0, 0]);
GameData.Parts.Items.push(["Nue\'s Trident 2", 104, -13, 0, 0]);
GameData.Parts.Items.push(["Scythe 2", 105, -13, 0, -10]);
GameData.Parts.Items.push(["Lightsaber (Green)", 106, -24, 0, 0]);
GameData.Parts.Items.push(["Lightsaber (Red)", 107, -24, 0, 0]);
GameData.Parts.Items.push(["Momizi\'s Gear 2", 108, 0, 2, -5]);
GameData.Parts.Items.push(["Knife 2", 109, -13, 0, 0]);
GameData.Parts.Items.push(["Sakuya Staff", 110, -16, 0, 0]);
GameData.Parts.Items.push(["Sanae Staff", 111, -16, 0, 0]);
GameData.Parts.Items.push(["Broom 2", 112, 0, 2, -5]);
GameData.Parts.Items.push(["Ice Sword", 113, -16, 0, 0]);
GameData.Parts.Items.push(["Parasol Closed", 114, -10, 2, -5]);
GameData.Parts.Items.push(["Shortsword", 115, -13, 0, 0]);
GameData.Parts.Items.push(["Two-handed Sword", 116, -16, 2, -5]);
GameData.Parts.Items.push(["Duster", 117, -16, 0, 0]);
GameData.Parts.Items.push(["Miko Stick 2", 118, -16, 2, -5]);
GameData.Parts.Items.push(["Youmu Set 2", 119, -10, 2, -5]);
GameData.Parts.Items.push(["Spellcard", 120, -16, 2, -5]);
GameData.Parts.Items.push(["Whip", 121, -16, 2, -5]);
GameData.Parts.Items.push(["Hatate\'s Phone", 122, 0, 2, -5]);
GameData.Parts.Items.push(["Scimitar", 123, -16, 2, -5]);
GameData.Parts.Items.push(["Gun", 124, -16, 2, -5]);
GameData.Parts.Items.push(["Spiked Club", 125, -16, 0, 0]);
GameData.Parts.Items.push(["Syringe", 126, -16, 2, 0]);
GameData.Parts.Items.push(["Chainsaw", 127, -16, 0, -3]);
GameData.Parts.Items.push(["Sickle", 128, -16, 0, 0]);
GameData.Parts.Items.push(["Butterfly Knife", 129, -10, 2, -5]);
GameData.Parts.Items.push(["Revolver", 130, -16, 2, -5]);
GameData.Parts.Items.push(["Flaming Sword", 131, -16, 5, -5]);
GameData.Parts.Items.push(["Metal Fan", 132, -16, 2, -5]);
GameData.Parts.Items.push(["Parasol 2", 133, -10, 2, -10]);
GameData.Parts.Items.push(["Bunny Guns", 134, -16, 2, -5]);
GameData.Parts.Items.push(["Spear", 135, -16, 2, -5]);
GameData.Parts.Items.push(["Alice\'s Grimoire 2", 136, -16, 2, -5]);
GameData.Parts.Items.push(["Handgun+Sword 1", 137, -16, 2, -5]);
GameData.Parts.Items.push(["Handgun+Sword 2", 138, -16, 2, -5]);
GameData.Parts.Items.push(["Dual Handguns", 139, -16, 2, -5]);
GameData.Parts.Items.push(["Handgun", 140, -16, 2, -5]);
GameData.Parts.Items.push(["Mega Buster", 141, -10, 2, -5]);
GameData.Parts.Items.push(["Pom-poms", 142, -16, 2, -5]);
GameData.Parts.Items.push(["Yorihime\'s Sword", 143, -16, 2, -5]);
GameData.Parts.Items.push(["Toyohime\'s Fans", 144, -16, 2, -5]);
GameData.Parts.Items.push(["Wristwatch (Red)", 145, 0, 2, 1]);
GameData.Parts.Items.push(["Wristwatch (Blue)", 146, 0, 2, 1]);
GameData.Parts.Items.push(["Third Leg (Right)", 147, 0, 2, -5]);
GameData.Parts.Items.push(["Third Leg (Left)", 148, 0, 2, -5]);
GameData.Parts.Items.push(["Third Leg (Both)", 149, 0, 2, -5]);
GameData.Parts.Items.push(["Mega Buster (Dual)", 150, 0, 2, -5]);
GameData.Parts.Items.push(["Road Sign", 151, -5, 2, -8]);
GameData.Parts.Items.push(["Sanae\'s Stick 2", 152, -5, 2, -8]);
GameData.Parts.Items.push(["Sword of some sort", 153, -5, 2, -8]);
GameData.Parts.Items.push(["Kogasa Umbrella 2", 154, -16, 0, -4]);
GameData.Parts.Items.push(["Miko\'s Shaku", 155, 0, 2, 1]);
GameData.Parts.Items.push(["Miracle Mallet", 156, 0, 2, 1]);
GameData.Parts.Items.push(["Drumsticks", 157, 0, 2, 1]);
GameData.Parts.Items.push(["Bloody Mallet", 158, 0, 2, 1]);
GameData.Parts.Items.push(["Doremy\'s Things", 159, 0, 2, 1]);
GameData.Parts.Items.push("random");
GameData.Parts.Back = new Array();
GameData.Parts.Back.push("none");
GameData.Parts.Back.push(["Flandre\'s Wings", 1, 0, 0, 0]);
GameData.Parts.Back.push(["Ice Fairy Wings", 2, 0, -10, 0]);
GameData.Parts.Back.push(["Dark Wings", 3, 0, 0, 0]);
GameData.Parts.Back.push(["Night Bird Wings", 4, 0, 0, 0]);
GameData.Parts.Back.push(["Blue Bird Wings", 5, 0, 0, 0]);
GameData.Parts.Back.push(["Pixie Wings", 6, 0, -10, 0]);
GameData.Parts.Back.push(["Phoenix Wings", 7, 0, 0, 0]);
GameData.Parts.Back.push(["Pink Cape", 8, 2, -10, 0]);
GameData.Parts.Back.push(["Nine Tails", 9, 0, -10, 0]);
GameData.Parts.Back.push(["Chen\'s Tails", 10, -5, -46, 10]);
GameData.Parts.Back.push(["Remilia\'s Wings", 11, -5, -10, 0]);
GameData.Parts.Back.push(["Lily Wings", 12, -3, -10, 0]);
GameData.Parts.Back.push(["Backpack", 13, 4, -12, 2]);
GameData.Parts.Back.push(["Wriggle Cape", 14, 4, -12, 0]);
GameData.Parts.Back.push(["Tengu Wings", 15, 0, 0, 0]);
GameData.Parts.Back.push(["Wolf Tail", 16, 0, -46, 10]);
GameData.Parts.Back.push(["Devil Set", 17, 0, -10, 0]);
GameData.Parts.Back.push(["Golden Wings", 18, 0, -5, 0]);
GameData.Parts.Back.push(["EX-Keine\'s Tail", 19, -5, -85, 20]);
GameData.Parts.Back.push(["Sacred Ring", 20, 5, 10, -5]);
GameData.Parts.Back.push(["Shinki\'s Wings", 21, 7, 8, -5]);
GameData.Parts.Back.push(["Tokiko\'s Wings", 22, 0, 0, 0]);
GameData.Parts.Back.push(["Sunny Wings", 23, 3, -5, -2]);
GameData.Parts.Back.push(["Starry Wings", 24, 3, -5, -2]);
GameData.Parts.Back.push(["Lunar Wings", 25, 3, -5, -2]);
GameData.Parts.Back.push(["Myon", 26, -10, 14, 0]);
GameData.Parts.Back.push(["The Gap", 27, 0, 10, -5]);
GameData.Parts.Back.push(["Yuyuko\'s Fan", 28, 0, 10, -5]);
GameData.Parts.Back.push(["Gravity Well", 29, -10, 2, -2]);
GameData.Parts.Back.push(["Hang Rope", 30, 0, -30, 2]);
GameData.Parts.Back.push(["Evil Eye Sigma", 31, 15, 20, -5]);
GameData.Parts.Back.push(["Iku\'s Shawl", 32, 5, 10, -5]);
GameData.Parts.Back.push(["Kurumi\'s Wings", 33, 5, 10, -5]);
GameData.Parts.Back.push(["Utsuho\'s Wings", 34, 5, 10, -7]);
GameData.Parts.Back.push(["Orin\'s Tails", 35, -5, -46, 10]);
GameData.Parts.Back.push(["Heart With Eye", 36, 10, 10, 5]);
GameData.Parts.Back.push(["Gengetsu\'s Wings", 37, 5, 10, 0]);
GameData.Parts.Back.push(["Sariel\'s Wings", 38, 5, 10, 0]);
GameData.Parts.Back.push(["Mai\'s Wings", 39, 5, 10, 0]);
GameData.Parts.Back.push(["Mima\'s Wings", 40, 5, 10, 0]);
GameData.Parts.Back.push(["Elis\' Wings", 41, 5, 10, 0]);
GameData.Parts.Back.push(["Rope+Onbashiras", 42, 5, 10, 0]);
GameData.Parts.Back.push(["Mouse Tail", 43, 5, 10, 0]);
GameData.Parts.Back.push(["Z. Fairy Wings", 44, 5, 10, 0]);
GameData.Parts.Back.push(["Flandre Wings 2", 45, 5, 10, 0]);
GameData.Parts.Back.push(["Turtle Shell", 46, 5, 10, 0]);
GameData.Parts.Back.push(["Ice Fairy Wings 2", 47, 5, 10, 0]);
GameData.Parts.Back.push(["Phoenix Wings 2", 48, 5, 10, 0]);
GameData.Parts.Back.push(["Mystia Wings", 49, 5, 10, 0]);
GameData.Parts.Back.push(["Mystia Wings 2", 50, 5, 10, 0]);
GameData.Parts.Back.push(["Rabbit Tail", 51, 5, 10, 0]);
GameData.Parts.Back.push(["EX-Keine\'s Tail 2", 52, -5, -8, 0]);
GameData.Parts.Back.push(["Ran Tails", 53, -5, -8, 0]);
GameData.Parts.Back.push(["Transparent Cape", 54, -5, -8, 0]);
GameData.Parts.Back.push(["Chen Tails 2", 55, -5, -8, 0]);
GameData.Parts.Back.push(["Anchor", 56, -5, -8, 0]);
GameData.Parts.Back.push(["Shou\'s Cloth", 57, -5, -8, 0]);
GameData.Parts.Back.push(["Nue\'s Wings", 58, -5, -8, 0]);
GameData.Parts.Back.push(["Remilia\'s Wings 2", 59, -5, -8, 0]);
GameData.Parts.Back.push(["Lily\'s Wings 2", 60, -5, -8, 0]);
GameData.Parts.Back.push(["Backpack 2", 61, -5, -8, 0]);
GameData.Parts.Back.push(["Byakuren\'s Cape", 62, -5, -8, 0]);
GameData.Parts.Back.push(["Wriggle Cape 2", 63, -5, -8, 0]);
GameData.Parts.Back.push(["EX-Rumia Wings", 64, -5, -8, 0]);
GameData.Parts.Back.push(["Wolf Tail 2", 65, -5, -8, 4]);
GameData.Parts.Back.push(["Devil Set 2", 66, -5, -8, 4]);
GameData.Parts.Back.push(["Sword", 67, -5, -8, 4]);
GameData.Parts.Back.push(["Swords", 68, -5, -8, 4]);
GameData.Parts.Back.push(["Wolf Tail 2A", 69, -5, -8, 4]);
GameData.Parts.Back.push(["Golden Wings 2", 70, 0, -5, 0]);
GameData.Parts.Back.push(["Tied Bow", 71, 0, -5, 0]);
GameData.Parts.Back.push(["Yuka\'s Wings", 72, 0, -5, 0]);
GameData.Parts.Back.push(["Sacred Ring 2", 73, 5, 10, -5]);
GameData.Parts.Back.push(["Rope+Onbashiras 2", 74, 5, 10, 0]);
GameData.Parts.Back.push(["Angel\'s Wings", 75, 0, -5, 0]);
GameData.Parts.Back.push(["Angel\'s Wing", 76, 5, 10, -5]);
GameData.Parts.Back.push(["Ice Fairy Wings 3", 77, 5, -5, 0]);
GameData.Parts.Back.push(["Shinki\'s Wings 2", 78, 7, 8, -5]);
GameData.Parts.Back.push(["Shinki\'s Wings White", 79, 7, 8, -5]);
GameData.Parts.Back.push(["Mima\'s Wings 2A", 80, 5, -5, 0]);
GameData.Parts.Back.push(["Mima\'s Wings 2B", 81, 5, -5, 0]);
GameData.Parts.Back.push(["Rengeteki Wings", 82, 5, 10, -3]);
GameData.Parts.Back.push(["Tokiko\'s Wings 2", 83, 5, -5, 0]);
GameData.Parts.Back.push(["Rengeteki Wings 2", 84, 5, 10, -3]);
GameData.Parts.Back.push(["Sunny Wings", 85, 5, -5, 0]);
GameData.Parts.Back.push(["Star Wings", 86, 5, -5, 0]);
GameData.Parts.Back.push(["Butterfly", 87, 5, -5, 0]);
GameData.Parts.Back.push(["Butterfly (Pink)", 88, 5, -5, 0]);
GameData.Parts.Back.push(["Butterfly (Yellow)", 89, 5, -5, 0]);
GameData.Parts.Back.push(["Butterfly (Green)", 90, 5, -5, 0]);
GameData.Parts.Back.push(["Butterfly (Blue)", 91, 5, -5, 0]);
GameData.Parts.Back.push(["Luna Wings", 92, 5, -5, 0]);
GameData.Parts.Back.push(["Nue\'s Wings 2", 93, 5, -3, -3]);
GameData.Parts.Back.push(["Ragged Cape", 94, 5, -5, 0]);
GameData.Parts.Back.push(["Ragged Cape w/ Tail", 95, 5, -5, 0]);
GameData.Parts.Back.push(["Yumemi\'s Cape", 96, 5, -7, 0]);
GameData.Parts.Back.push(["4 Bat Wings", 97, 5, -3, -3]);
GameData.Parts.Back.push(["Pig Tail", 98, 5, -5, 0]);
GameData.Parts.Back.push(["Fox Tail", 99, 5, -5, 0]);
GameData.Parts.Back.push(["Fire Wings", 100, 5, -7, 0]);
GameData.Parts.Back.push(["Jetpack", 101, 5, -7, 0]);
GameData.Parts.Back.push(["Nazrin (Alt)", 102, 5, -7, 0]);
GameData.Parts.Back.push(["4 Bat Wings (Alt)", 103, 5, -7, 0]);
GameData.Parts.Back.push(["4 Angel Wings", 104, 5, -7, 0]);
GameData.Parts.Back.push(["Iku\'s Shawl 2", 105, 5, 10, -5]);
GameData.Parts.Back.push(["Kisume\'s Rope", 106, 5, 10, -5]);
GameData.Parts.Back.push(["Tengu Wings 2", 107, 5, 10, -5]);
GameData.Parts.Back.push(["Mystia Wings Blue", 108, 5, 10, -5]);
GameData.Parts.Back.push(["Mystia Wings 2 Blue", 109, 5, 10, -5]);
GameData.Parts.Back.push(["Utsuho\'s Wings 2", 110, 5, 10, -5]);
GameData.Parts.Back.push(["Orin\'s Tails 2", 111, 5, 10, -5]);
GameData.Parts.Back.push(["Tiger Tail", 112, 5, 10, -5]);
GameData.Parts.Back.push(["Nail", 113, 5, 10, -5]);
GameData.Parts.Back.push(["Mitori\'s Sign", 114, 5, 10, -5]);
GameData.Parts.Back.push(["Utsuho\'s Wings 2 Alt", 115, 5, 10, -5]);
GameData.Parts.Back.push(["Starry Cape", 116, 5, 10, -5]);
GameData.Parts.Back.push(["Wings With Circles", 117, 5, 10, -5]);
GameData.Parts.Back.push(["Kurumi\'s Wings 2", 118, 5, 10, -5]);
GameData.Parts.Back.push(["Gengetsu\'s Wings 2", 119, 5, 10, -5]);
GameData.Parts.Back.push(["Sariel\'s Wings 2", 120, 5, 10, -5]);
GameData.Parts.Back.push(["Dragon Tail (Blue)", 121, 5, 10, -5]);
GameData.Parts.Back.push(["Mai\'s Wings 2", 122, 5, 10, -5]);
GameData.Parts.Back.push(["Elly\'s Cape", 123, 5, 10, -5]);
GameData.Parts.Back.push(["Rabbit Tail (Black)", 124, 5, 10, -5]);
GameData.Parts.Back.push(["Small Bat Wings", 125, 5, 10, -5]);
GameData.Parts.Back.push(["Blue Dragon", 126, 5, 10, -5]);
GameData.Parts.Back.push(["Blue Dragon Wings", 127, 5, 10, -5]);
GameData.Parts.Back.push(["Green Dragon Wings", 128, 5, 10, -5]);
GameData.Parts.Back.push(["Green Dragon", 129, 5, 10, -5]);
GameData.Parts.Back.push(["Green Dragon Tail", 130, 5, 10, -5]);
GameData.Parts.Back.push(["Black Dragon Wings", 131, 5, 10, -5]);
GameData.Parts.Back.push(["Seiga Cloth", 132, 5, 10, -5]);
GameData.Parts.Back.push(["Mamizou Tail", 133, 5, 10, -5]);
GameData.Parts.Back.push(["Miko\'s Cape", 134, 5, 10, -5]);
GameData.Parts.Back.push(["Shinmyoumaru Effects", 135, 5, 10, -5]);
GameData.Parts.Back.push(["Raiko Drums", 136, 5, 10, -5]);
GameData.Parts.Back.push(["Doremy Tail", 137, 5, 10, -5]);
GameData.Parts.Back.push(["Sumireko Cape", 138, 5, 10, -5]);
GameData.Parts.Back.push("random");
GameData.Parts.Acc = new Array();
GameData.Parts.Acc.push("none");
GameData.Parts.Acc.push(["Glasses", 1, 0, 0, 0]);
GameData.Parts.Acc.push(["Monocle", 2, -6, -4, 0]);
GameData.Parts.Acc.push(["Black Mask", 3, 0, -10, 0]);
GameData.Parts.Acc.push(["Flu Mask", 4, 0, -6, 0]);
GameData.Parts.Acc.push(["Amulet", 5, 0, 8, 0]);
GameData.Parts.Acc.push(["GAR Shades", 6, 0, 0, 0]);
GameData.Parts.Acc.push(["Sun Glasses", 7, 0, 0, 0]);
GameData.Parts.Acc.push(["Rectangle Glasses", 8, 0, 0, 0]);
GameData.Parts.Acc.push(["Blush", 9, -4, -10, 6]);
GameData.Parts.Acc.push(["3D Glasses", 10, 0, 0, 0]);
GameData.Parts.Acc.push(["Knife", 11, 0, 22, 0]);
GameData.Parts.Acc.push(["Moustache", 12, 0, 0, 0]);
GameData.Parts.Acc.push(["Eye Patch", 13, 0, 3, 0]);
GameData.Parts.Acc.push(["Cross Scar", 14, 0, 0, 0]);
GameData.Parts.Acc.push(["Big Glasses 1", 15, 0, 0, 0]);
GameData.Parts.Acc.push(["Big Glasses 2", 16, 0, 0, 0]);
GameData.Parts.Acc.push(["Big Glasses 3", 17, 0, 0, 0]);
GameData.Parts.Acc.push(["Scarf (Pink)", 18, 10, -18, 0]);
GameData.Parts.Acc.push(["Knight Visor", 19, 5, 2, -5]);
GameData.Parts.Acc.push(["Melody", 20, -15, 10, -5]);
GameData.Parts.Acc.push(["Flames", 21, 8, 5, -10]);
GameData.Parts.Acc.push(["Stylish Glasses", 22, 0, -3, 0]);
GameData.Parts.Acc.push(["Happiness", 23, -5, 10, -10]);
GameData.Parts.Acc.push(["Censored", 24, 0, 0, 0]);
GameData.Parts.Acc.push(["Power Up!", 25, 10, 5, -14]);
GameData.Parts.Acc.push(["Twirly", 26, -20, 13, 0]);
GameData.Parts.Acc.push(["Wanted", 27, 11, 5, -13]);
GameData.Parts.Acc.push(["Eyebrows", 28, 0, 3, 0]);
GameData.Parts.Acc.push(["Happy Mask", 29, 0, 0, 0]);
GameData.Parts.Acc.push(["Faceguard", 30, 3, 0, -3]);
GameData.Parts.Acc.push(["Mole", 31, -5, 0, 0]);
GameData.Parts.Acc.push(["Cross Bands", 32, 10, 0, 0]);
GameData.Parts.Acc.push(["Darkness", 33, 10, 5, -15]);
GameData.Parts.Acc.push(["Crow", 34, 0, 23, 0]);
GameData.Parts.Acc.push(["Tengu Scarf 1", 35, 4, -13, -5]);
GameData.Parts.Acc.push(["Tengu Scarf 2", 36, 4, -13, -5]);
GameData.Parts.Acc.push(["Wolf Ears", 37, 2, 15, -3]);
GameData.Parts.Acc.push(["Scouter", 38, -7, 3, 0]);
GameData.Parts.Acc.push(["Gundam", 39, 5, -4, -10]);
GameData.Parts.Acc.push(["Doll", 40, 7, 23, 0]);
GameData.Parts.Acc.push(["Camo Make-up", 41, 0, -3, 0]);
GameData.Parts.Acc.push(["Clever Disguise", 42, 0, 0, 0]);
GameData.Parts.Acc.push(["Worry Brows", 43, 0, 4, 0]);
GameData.Parts.Acc.push(["Marisa", 44, -10, 10, -8]);
GameData.Parts.Acc.push(["Zap!", 45, 10, 5, -14]);
GameData.Parts.Acc.push(["Basket", 46, 4, -25, 0]);
GameData.Parts.Acc.push(["Visor", 47, 2, 10, 0]);
GameData.Parts.Acc.push(["More Glasses", 48, 0, 0, 0]);
GameData.Parts.Acc.push(["White Beard", 49, 0, -13, 0]);
GameData.Parts.Acc.push(["Bandit Mask", 50, 0, -11, 0]);
GameData.Parts.Acc.push(["Sunny", 51, -12, 7, -9]);
GameData.Parts.Acc.push(["Sweat Drop", 52, 13, 0, 0]);
GameData.Parts.Acc.push(["Toast", 53, 0, -15, 0]);
GameData.Parts.Acc.push(["Fish", 54, -3, -17, 0]);
GameData.Parts.Acc.push(["Rain Cloud", 55, -5, 12, -10]);
GameData.Parts.Acc.push(["Bandage", 56, 2, 6, 0]);
GameData.Parts.Acc.push(["Shout", 57, -7, 0, -10]);
GameData.Parts.Acc.push(["Angry Eyebrows", 58, 0, 3, 0]);
GameData.Parts.Acc.push(["Youki\'s Beard", 59, 0, -13, 0]);
GameData.Parts.Acc.push(["Inner Tube", 60, 0, -30, 2]);
GameData.Parts.Acc.push(["Satori\'s 3rd Eye", 61, 8, -2, -10]);
GameData.Parts.Acc.push(["Police Badge", 62, 0, -10, 0]);
GameData.Parts.Acc.push(["Letty\'s Pin", 63, 0, -10, 0]);
GameData.Parts.Acc.push(["Small Glasses", 64, 0, 0, 0]);
GameData.Parts.Acc.push(["Red Mark", 65, 0, -10, 0]);
GameData.Parts.Acc.push(["Koishi\'s 3rd Eye", 66, 5, -5, -10]);
GameData.Parts.Acc.push(["Smoke Pipe", 67, -5, 0, -5]);
GameData.Parts.Acc.push(["Satsuki Beads", 68, 3, 13, -5]);
GameData.Parts.Acc.push(["Advent Cirno", 69, 3, -11, -7]);
GameData.Parts.Acc.push(["Cat (Black)", 70, 6, 11, -10]);
GameData.Parts.Acc.push(["Cat (Yellow)", 71, 6, 11, -10]);
GameData.Parts.Acc.push(["Cat (White)", 72, 6, 11, -10]);
GameData.Parts.Acc.push(["Carrot charm", 73, 6, 11, -5]);
GameData.Parts.Acc.push(["Koishi\'s 3rd Eye 2", 74, 5, -5, -10]);
GameData.Parts.Acc.push(["Rose patch (Red)", 75, 5, -5, -5]);
GameData.Parts.Acc.push(["Rose patch (Purple)", 76, 5, -5, -5]);
GameData.Parts.Acc.push(["Pink Bow", 77, 5, -5, -5]);
GameData.Parts.Acc.push(["White Bow", 78, 5, -5, -5]);
GameData.Parts.Acc.push(["Scarf (Pink 2)", 79, 5, -5, -5]);
GameData.Parts.Acc.push(["Dog Leash", 80, 5, -5, -5]);
GameData.Parts.Acc.push(["Momizi Ears", 81, 5, 10, -5]);
GameData.Parts.Acc.push(["Ahoge", 82, 5, 10, -5]);
GameData.Parts.Acc.push(["Antennae Hair", 83, 5, 10, -5]);
GameData.Parts.Acc.push(["Cigarette", 84, 5, -5, -5]);
GameData.Parts.Acc.push(["Cigar", 85, 5, -5, -5]);
GameData.Parts.Acc.push(["Elf Ears", 86, 5, -2, -5]);
GameData.Parts.Acc.push(["Trenchcoat (Red)", 87, 5, -10, -5]);
GameData.Parts.Acc.push(["Aviator Shades", 88, 5, -2, -5]);
GameData.Parts.Acc.push(["Red Armband", 89, 5, -5, -5]);
GameData.Parts.Acc.push(["Headband+Mantle", 90, 5, -5, -5]);
GameData.Parts.Acc.push(["Anger Vein", 91, 5, 3, -5]);
GameData.Parts.Acc.push(["Wooden Armor", 92, 5, -14, -5]);
GameData.Parts.Acc.push(["Rectangle Glasses 2", 93, 5, -5, -5]);
GameData.Parts.Acc.push(["Eyepatch Flipped", 94, 5, 5, -5]);
GameData.Parts.Acc.push(["Trenchcoat (Purple)", 95, 5, -10, -5]);
GameData.Parts.Acc.push(["Handkerchief", 96, 5, -14, -5]);
GameData.Parts.Acc.push(["Kitsune Mask", 97, 5, -5, -5]);
GameData.Parts.Acc.push(["Evil Moustache", 98, 5, -4, -5]);
GameData.Parts.Acc.push(["Tewi Ears", 99, 5, 10, -5]);
GameData.Parts.Acc.push(["Reisen Ears", 100, 5, 10, -5]);
GameData.Parts.Acc.push(["Antennae", 101, 5, 10, -5]);
GameData.Parts.Acc.push(["Scarf (Red)", 102, 5, -14, -5]);
GameData.Parts.Acc.push(["Red Belt", 103, 5, -10, -5]);
GameData.Parts.Acc.push(["Red Scarf+Belt", 104, 5, -14, -5]);
GameData.Parts.Acc.push(["Collar", 105, 5, -5, -5]);
GameData.Parts.Acc.push(["Tewi Ears 2", 106, 5, 10, -5]);
GameData.Parts.Acc.push(["Reisen Ears 2", 107, 5, 10, -5]);
GameData.Parts.Acc.push(["Reisen II Ears 2", 108, 5, 10, -5]);
GameData.Parts.Acc.push(["Reisen II Ears", 109, 5, 10, -5]);
GameData.Parts.Acc.push(["Stubble", 110, 5, -5, -5]);
GameData.Parts.Acc.push(["Trenchcoat (Black)", 111, 5, -8, -5]);
GameData.Parts.Acc.push(["Jacket (Blue)", 112, 5, -14, -5]);
GameData.Parts.Acc.push(["Messenger Bag", 113, 5, -15, -5]);
GameData.Parts.Acc.push(["White Mask", 114, 5, -1, -5]);
GameData.Parts.Acc.push(["Robot Ears", 115, 5, -1, -5]);
GameData.Parts.Acc.push(["Scarf (Orange)", 116, 5, -5, -5]);
GameData.Parts.Acc.push(["Muzzle", 117, 5, -5, -5]);
GameData.Parts.Acc.push(["Mario Moustache", 118, 5, -5, -5]);
GameData.Parts.Acc.push(["Mario Moustache 2", 119, 5, -5, -5]);
GameData.Parts.Acc.push(["Night Vision 1", 120, 5, -2, -5]);
GameData.Parts.Acc.push(["Night Vision 2", 121, 5, 5, -5]);
GameData.Parts.Acc.push(["Satori\'s 3rd Eye 2", 122, 8, -2, -10]);
GameData.Parts.Acc.push(["Face Blush", 123, 8, -2, -10]);
GameData.Parts.Acc.push(["Aya Scarf+Ears", 124, 8, -2, -10]);
GameData.Parts.Acc.push(["Koishi\'s 3rd Eye 2", 125, 8, -2, -10]);
GameData.Parts.Acc.push(["Star Necklace", 126, 8, -5, -3]);
GameData.Parts.Acc.push(["Trenchcoat (White)", 127, 5, -8, -5]);
GameData.Parts.Acc.push(["Scarf (Green)", 128, 5, -5, -5]);
GameData.Parts.Acc.push(["Scarf (White)", 129, 5, -5, -5]);
GameData.Parts.Acc.push(["Aya Scarf", 130, 8, -2, -10]);
GameData.Parts.Acc.push(["Koishi\'s 3rd Eye 2 Open", 131, 8, -2, -10]);
GameData.Parts.Acc.push(["Shutter Shades", 132, 8, -2, -1]);
GameData.Parts.Acc.push(["Dawn Scarf", 133, 8, -2, -1]);
GameData.Parts.Acc.push(["Blue Scarf", 134, 8, -2, -1]);
GameData.Parts.Acc.push(["Pink Glasses", 135, 8, -2, -1]);
GameData.Parts.Acc.push(["Square Glasses", 136, 8, -2, -1]);
GameData.Parts.Acc.push(["Argyle Vest", 137, 8, -2, -1]);
GameData.Parts.Acc.push(["Youki\'s Beard 2", 138, 0, -13, 0]);
GameData.Parts.Acc.push(["Circular Glasses", 139, 0, 0, 0]);
GameData.Parts.Acc.push(["White-Rimmed Shades", 140, 0, 0, 0]);
GameData.Parts.Acc.push(["Monocle+Stache", 141, 0, 0, 0]);
GameData.Parts.Acc.push(["Monocle 2", 142, 0, 0, 0]);
GameData.Parts.Acc.push(["Tewi Ears+Tail (Black)", 143, 0, 5, 0]);
GameData.Parts.Acc.push(["Red Mark 2", 144, 0, -10, 0]);
GameData.Parts.Acc.push(["Ran\'s Ears", 145, 0, 15, 0]);
GameData.Parts.Acc.push(["Reisen Ears+Tail (Black)", 146, 0, 15, 0]);
GameData.Parts.Acc.push(["Red-white scarf", 147, 0, -10, 0]);
GameData.Parts.Acc.push(["Taped Mouth", 148, 0, -10, 0]);
GameData.Parts.Acc.push(["Advent Cirno (Rev)", 149, 0, -16, 0]);
GameData.Parts.Acc.push(["Tengu Mask", 150, 0, -5, -2]);
GameData.Parts.Acc.push(["Satori\'s 3rd Eye 2 Closed", 151, 8, -2, -10]);
GameData.Parts.Acc.push(["Yoshika Arms", 152, 0, -10, 0]);
GameData.Parts.Acc.push(["Yoshika Seal", 153, 0, 3, 0]);
GameData.Parts.Acc.push(["Miko\'s Sword", 154, 0, 3, 0]);
GameData.Parts.Acc.push(["Glasses (Mamizou)", 155, 0, 3, 0]);
GameData.Parts.Acc.push(["Sekibanki Cape", 156, 0, 3, 0]);
GameData.Parts.Acc.push(["Sumireko Cape", 157, 0, 3, 0]);
GameData.Parts.Acc.push(["Sumireko Cape + Glasses", 158, 0, 3, 0]);
GameData.Parts.Acc.push("random");
GameData.Parts.Body = new Array();
GameData.Parts.Body.push("none");
GameData.Parts.Body.push(["Meiling", 1, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu", 2, 0, 0, 0]);
GameData.Parts.Body.push(["Marisa", 3, 0, 0, 0]);
GameData.Parts.Body.push(["Sakuya", 4, 0, 0, 0]);
GameData.Parts.Body.push(["Yukari", 5, 0, 0, 0]);
GameData.Parts.Body.push(["Flandre", 6, 0, 0, 0]);
GameData.Parts.Body.push(["Yuyuko", 7, 0, 0, 0]);
GameData.Parts.Body.push(["Kaguya", 8, 0, 0, 0]);
GameData.Parts.Body.push(["Cirno", 9, 0, 0, 0]);
GameData.Parts.Body.push(["Eirin", 10, 0, 0, 0]);
GameData.Parts.Body.push(["Youmu", 11, 0, 0, 0]);
GameData.Parts.Body.push(["Patchouli", 12, 0, 0, 0]);
GameData.Parts.Body.push(["Alice", 13, 0, 0, 0]);
GameData.Parts.Body.push(["Reisen", 14, 0, 0, 0]);
GameData.Parts.Body.push(["Mokou", 15, 0, 0, 0]);
GameData.Parts.Body.push(["Mystia", 16, 0, 0, 0]);
GameData.Parts.Body.push(["Tewi", 17, 0, 0, 0]);
GameData.Parts.Body.push(["Keine", 18, 0, 0, 0]);
GameData.Parts.Body.push(["Ran", 19, 0, 0, 0]);
GameData.Parts.Body.push(["Letty", 20, 0, 0, 0]);
GameData.Parts.Body.push(["Chen", 21, 0, 0, 0]);
GameData.Parts.Body.push(["Suika", 22, 0, 0, 0]);
GameData.Parts.Body.push(["Remilia", 23, 0, 0, 0]);
GameData.Parts.Body.push(["Lily White", 24, 0, 0, 0]);
GameData.Parts.Body.push(["Lily Black", 25, 0, 0, 0]);
GameData.Parts.Body.push(["Komachi", 26, 0, 0, 0]);
GameData.Parts.Body.push(["Nitori", 27, 0, 0, 0]);
GameData.Parts.Body.push(["Sikieiki", 28, 0, 0, 0]);
GameData.Parts.Body.push(["Wriggle", 29, 0, 0, 0]);
GameData.Parts.Body.push(["Rumia", 30, 0, 0, 0]);
GameData.Parts.Body.push(["Aya", 31, 0, 0, 0]);
GameData.Parts.Body.push(["Momizi", 32, 0, 0, 0]);
GameData.Parts.Body.push(["Koakuma", 33, 0, 0, 0]);
GameData.Parts.Body.push(["Lunasa", 34, 0, 0, 0]);
GameData.Parts.Body.push(["Merlin", 35, 0, 0, 0]);
GameData.Parts.Body.push(["Lyrica", 36, 0, 0, 0]);
GameData.Parts.Body.push(["Daiyousei", 37, 0, 0, 0]);
GameData.Parts.Body.push(["Medicine", 38, 0, 0, 0]);
GameData.Parts.Body.push(["Keine (EX)", 39, 0, 0, 0]);
GameData.Parts.Body.push(["Yuka", 40, 0, 0, 0]);
GameData.Parts.Body.push(["Suwako", 41, 0, 0, 0]);
GameData.Parts.Body.push(["Hina", 42, 0, 0, 0]);
GameData.Parts.Body.push(["Sanae", 43, 0, 0, 0]);
GameData.Parts.Body.push(["Kanako", 44, 0, 0, 0]);
GameData.Parts.Body.push(["Minoriko", 45, 0, 0, 0]);
GameData.Parts.Body.push(["Shizuha", 46, 0, 0, 0]);
GameData.Parts.Body.push(["Shinki", 47, 0, 0, 0]);
GameData.Parts.Body.push(["Mima", 48, 0, 0, 0]);
GameData.Parts.Body.push(["Rinnosuke", 49, 0, 0, 0]);
GameData.Parts.Body.push(["Tokiko", 50, 0, 0, 0]);
GameData.Parts.Body.push(["Sunny Milk", 51, 0, 0, 0]);
GameData.Parts.Body.push(["Star Sapphire", 52, 0, 0, 0]);
GameData.Parts.Body.push(["Luna Child", 53, 0, 0, 0]);
GameData.Parts.Body.push(["Akyu", 54, 0, 0, 0]);
GameData.Parts.Body.push(["Renko", 55, 0, 0, 0]);
GameData.Parts.Body.push(["Maribel", 56, 0, 0, 0]);
GameData.Parts.Body.push(["Chiyuri", 57, 0, 0, 0]);
GameData.Parts.Body.push(["Yumemi", 58, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PC-98)", 59, 0, 0, 0]);
GameData.Parts.Body.push(["Yamame", 60, 0, 0, 0]);
GameData.Parts.Body.push(["Tenshi", 61, 0, 0, 0]);
GameData.Parts.Body.push(["Iku", 62, 0, 0, 0]);
GameData.Parts.Body.push(["Yuugi", 63, 0, 0, 0]);
GameData.Parts.Body.push(["Kisume", 64, 0, -4, -5]);
GameData.Parts.Body.push(["Parsee", 65, 0, 0, 0]);
GameData.Parts.Body.push(["Yorihime", 66, 0, 0, 0]);
GameData.Parts.Body.push(["Toyohime", 67, 0, 0, 0]);
GameData.Parts.Body.push(["Marisa (PC-98)", 68, 0, 0, 0]);
GameData.Parts.Body.push(["Youki", 69, 0, 0, 0]);
GameData.Parts.Body.push(["Alice (PC-98)", 70, 0, 0, 0]);
GameData.Parts.Body.push(["Kurumi", 71, 0, 0, 0]);
GameData.Parts.Body.push(["Luize", 72, 0, 0, 0]);
GameData.Parts.Body.push(["Utsuho", 73, 0, 0, 0]);
GameData.Parts.Body.push(["Orin", 74, 0, 0, 0]);
GameData.Parts.Body.push(["Satori", 75, 0, 0, 0]);
GameData.Parts.Body.push(["Koishi", 76, 0, 0, 0]);
GameData.Parts.Body.push(["Yumeko", 77, 0, 0, 0]);
GameData.Parts.Body.push(["Ruukoto", 78, 0, 0, 0]);
GameData.Parts.Body.push(["Mugetsu", 79, 0, 0, 0]);
GameData.Parts.Body.push(["VIVIT", 80, 0, 0, 0]);
GameData.Parts.Body.push(["Gengetsu", 81, 0, 0, 0]);
GameData.Parts.Body.push(["Sariel", 82, 0, 0, 0]);
GameData.Parts.Body.push(["Konngara", 83, 0, 0, 0]);
GameData.Parts.Body.push(["Kotohime", 84, 0, 0, 0]);
GameData.Parts.Body.push(["Orange", 85, 0, 0, 0]);
GameData.Parts.Body.push(["Rikako", 86, 0, 0, 0]);
GameData.Parts.Body.push(["Rika", 87, 0, 0, 0]);
GameData.Parts.Body.push(["Yuki", 88, 0, 0, 0]);
GameData.Parts.Body.push(["Mai", 89, 0, 0, 0]);
GameData.Parts.Body.push(["Ellen", 90, 0, 0, 0]);
GameData.Parts.Body.push(["Kana", 91, 0, 0, 0]);
GameData.Parts.Body.push(["Elly", 92, 0, 0, 0]);
GameData.Parts.Body.push(["Sara", 93, 0, 0, 0]);
GameData.Parts.Body.push(["Meira", 94, 0, 0, 0]);
GameData.Parts.Body.push(["Elis", 95, 0, 0, 0]);
GameData.Parts.Body.push(["Shingyoku F", 96, 0, 0, 0]);
GameData.Parts.Body.push(["Shingyoku M", 97, 0, 0, 0]);
GameData.Parts.Body.push(["Yuka (PJ\'s)", 98, 0, 0, 0]);
GameData.Parts.Body.push(["Yukari (PCB)", 99, 0, 0, 0]);
GameData.Parts.Body.push(["Marisa (SA)", 100, 0, 0, 0]);
GameData.Parts.Body.push(["Reisen (SWR)", 101, 0, 0, 0]);
GameData.Parts.Body.push(["Nazrin", 102, 0, 0, 0]);
GameData.Parts.Body.push(["Kogasa", 103, 0, 0, 0]);
GameData.Parts.Body.push(["Ichirin", 104, 0, 0, 0]);
GameData.Parts.Body.push(["Marisa (UFO)", 105, 0, 0, 0]);
GameData.Parts.Body.push(["Zombie Fairy", 106, 0, 0, 0]);
GameData.Parts.Body.push(["Shanghai", 107, 0, 0, 0]);
GameData.Parts.Body.push(["Rin Satsuki", 108, 0, 0, 0]);
GameData.Parts.Body.push(["Layla", 109, 0, 0, 0]);
GameData.Parts.Body.push(["Meimu", 110, 0, 0, 0]);
GameData.Parts.Body.push(["Meiling (2)", 111, 0, 0, 0]);
GameData.Parts.Body.push(["Lie Meiling", 112, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (2)", 113, 0, 0, 0]);
GameData.Parts.Body.push(["Marisa (PCB)", 114, 0, 0, 0]);
GameData.Parts.Body.push(["Sakuya (2)", 115, 0, 0, 0]);
GameData.Parts.Body.push(["Yukari (IaMP)", 116, 0, 0, 0]);
GameData.Parts.Body.push(["Flandre (2)", 117, 0, 0, 0]);
GameData.Parts.Body.push(["Yuyuko (2)", 118, 0, 0, 0]);
GameData.Parts.Body.push(["Kaguya (2)", 119, 0, 0, 0]);
GameData.Parts.Body.push(["Cirno (2)", 120, 0, 0, 0]);
GameData.Parts.Body.push(["Eirin (2)", 121, 0, 0, 0]);
GameData.Parts.Body.push(["Youmu (2)", 122, 0, 0, 0]);
GameData.Parts.Body.push(["Patchouli (2)", 123, 0, 0, 0]);
GameData.Parts.Body.push(["Alice (2A)", 124, 0, 0, 0]);
GameData.Parts.Body.push(["Alice (2B)", 125, 0, 0, 0]);
GameData.Parts.Body.push(["Reisen (2)", 126, 0, 0, 0]);
GameData.Parts.Body.push(["Mokou (2)", 127, 0, 0, 0]);
GameData.Parts.Body.push(["Mystia (2A)", 128, 0, 0, 0]);
GameData.Parts.Body.push(["Mystia (2B)", 129, 0, 0, 0]);
GameData.Parts.Body.push(["Tewi (2)", 130, 0, 0, 0]);
GameData.Parts.Body.push(["Keine (2)", 131, 0, 0, 0]);
GameData.Parts.Body.push(["Keine (EX2)", 132, 0, 0, 0]);
GameData.Parts.Body.push(["Ran (2)", 133, 0, 0, 0]);
GameData.Parts.Body.push(["Letty (2)", 134, 0, 0, 0]);
GameData.Parts.Body.push(["Chen (2)", 135, 0, 0, 0]);
GameData.Parts.Body.push(["Suika (2)", 136, 0, 0, 0]);
GameData.Parts.Body.push(["Murasa", 137, 0, 0, 0]);
GameData.Parts.Body.push(["Shou", 138, 0, 0, 0]);
GameData.Parts.Body.push(["Byakuren", 139, 0, 0, 0]);
GameData.Parts.Body.push(["Nue", 140, 0, 0, 0]);
GameData.Parts.Body.push(["Remilia (2)", 141, 0, 0, 0]);
GameData.Parts.Body.push(["Lily White (2)", 142, 0, 0, 0]);
GameData.Parts.Body.push(["Lily Black (2)", 143, 0, 0, 0]);
GameData.Parts.Body.push(["Komachi (2)", 144, 0, 0, 0]);
GameData.Parts.Body.push(["Nitori (2)", 145, 0, 0, 0]);
GameData.Parts.Body.push(["Plain Red", 146, 0, 0, 0]);
GameData.Parts.Body.push(["Sikieiki (2)", 147, 0, 0, 0]);
GameData.Parts.Body.push(["Wriggle (2)", 148, 0, 0, 0]);
GameData.Parts.Body.push(["Rumia (2)", 149, 0, 0, 0]);
GameData.Parts.Body.push(["Aya (2A)", 150, 0, 0, 0]);
GameData.Parts.Body.push(["Aya (2B)", 151, 0, 0, 0]);
GameData.Parts.Body.push(["Momizi (2)", 152, 0, 0, 0]);
GameData.Parts.Body.push(["Koakuma (2)", 153, 0, 0, 0]);
GameData.Parts.Body.push(["Marisa (2)", 154, 0, 0, 0]);
GameData.Parts.Body.push(["Lunasa (2)", 155, 0, 0, 0]);
GameData.Parts.Body.push(["Merlin (2)", 156, 0, 0, 0]);
GameData.Parts.Body.push(["Lyrica (2)", 157, 0, 0, 0]);
GameData.Parts.Body.push(["Sakuya (Magical)", 158, 0, 0, 0]);
GameData.Parts.Body.push(["Sanae (Magical)", 159, 0, 0, 0]);
GameData.Parts.Body.push(["Daiyousei (2)", 160, 0, 0, 0]);
GameData.Parts.Body.push(["EXHF", 161, 0, 0, 0]);
GameData.Parts.Body.push(["Medicine (2)", 162, 0, 0, 0]);
GameData.Parts.Body.push(["Yuka (2)", 163, 0, 0, 0]);
GameData.Parts.Body.push(["Santa", 164, 0, 0, 0]);
GameData.Parts.Body.push(["Suwako (2)", 165, 0, 0, 0]);
GameData.Parts.Body.push(["Hina (2)", 166, 0, 0, 0]);
GameData.Parts.Body.push(["Sanae (2)", 167, 0, 0, 0]);
GameData.Parts.Body.push(["Kanako (2)", 168, 0, 0, 0]);
GameData.Parts.Body.push(["Minoriko (2)", 169, 0, 0, 0]);
GameData.Parts.Body.push(["Shizuha (2)", 170, 0, 0, 0]);
GameData.Parts.Body.push(["Shinki (2)", 171, 0, 0, 0]);
GameData.Parts.Body.push(["Mima (2)", 172, 0, 0, 0]);
GameData.Parts.Body.push(["Rinnosuke (2)", 173, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (2P)", 174, 0, 0, 0]);
GameData.Parts.Body.push(["Mima (HRtP)", 175, 0, 0, 0]);
GameData.Parts.Body.push(["Rengeteki", 176, 0, 0, 0]);
GameData.Parts.Body.push(["Murasa (Alt)", 177, 0, 0, 0]);
GameData.Parts.Body.push(["Blue Uniform", 178, 0, 0, 0]);
GameData.Parts.Body.push(["Tokiko (2)", 179, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (Black)", 180, 0, 0, 0]);
GameData.Parts.Body.push(["Sunny Milk (2)", 181, 0, 0, 0]);
GameData.Parts.Body.push(["Star Sapphire (2)", 182, 0, 0, 0]);
GameData.Parts.Body.push(["Alice (in W)", 183, 0, 0, 0]);
GameData.Parts.Body.push(["Hatate", 184, 0, 0, 0]);
GameData.Parts.Body.push(["Luna Child (2)", 185, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (EoSD)", 186, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PCB)", 187, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PoFV)", 188, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (SA)", 189, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (Brown)", 190, 0, 0, 0]);
GameData.Parts.Body.push(["Maid (Black)", 191, 0, 0, 0]);
GameData.Parts.Body.push(["All White", 192, 0, 0, 0]);
GameData.Parts.Body.push(["Blue Suit", 193, 0, 0, 0]);
GameData.Parts.Body.push(["Akyu (2)", 194, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (Red)", 195, 0, 0, 0]);
GameData.Parts.Body.push(["Renko (2)", 196, 0, 0, 0]);
GameData.Parts.Body.push(["Butler", 197, 0, 0, 0]);
GameData.Parts.Body.push(["Maribel (2)", 198, 0, 0, 0]);
GameData.Parts.Body.push(["Link Tunic", 199, 0, 0, 0]);
GameData.Parts.Body.push(["Teacher", 200, 0, 0, 0]);
GameData.Parts.Body.push(["Maid (Red)", 201, 0, 0, 0]);
GameData.Parts.Body.push(["Yamame (2)", 202, 0, 0, 0]);
GameData.Parts.Body.push(["Chiyuri (2)", 203, 0, 0, 0]);
GameData.Parts.Body.push(["Sukumizu", 204, 0, 0, 0]);
GameData.Parts.Body.push(["Yumemi (2)", 205, 0, 0, 0]);
GameData.Parts.Body.push(["Pink Dress", 206, 0, 0, 0]);
GameData.Parts.Body.push(["Brown Dress", 207, 0, 0, 0]);
GameData.Parts.Body.push(["Mystia (Black)", 208, 0, 0, 0]);
GameData.Parts.Body.push(["Remilia (THVania)", 209, 0, 0, 0]);
GameData.Parts.Body.push(["Red Overalls", 210, 0, 0, 0]);
GameData.Parts.Body.push(["Kimono (Blank)", 211, 0, 0, 0]);
GameData.Parts.Body.push(["Kimono (Pink)", 212, 0, 0, 0]);
GameData.Parts.Body.push(["Cirno (Fire)", 213, 0, 0, 0]);
GameData.Parts.Body.push(["Camo (Green)", 214, 0, 0, 0]);
GameData.Parts.Body.push(["Reisen Suit", 215, 0, 0, 0]);
GameData.Parts.Body.push(["Black Suit", 216, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PC-98 2A)", 217, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PC-98 2B)", 218, 0, 0, 0]);
GameData.Parts.Body.push(["Kimono (Indigo)", 219, 0, 0, 0]);
GameData.Parts.Body.push(["Camo (Grey)", 220, 0, 0, 0]);
GameData.Parts.Body.push(["Yuka (2 Alt)", 221, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PC-98 2C)", 222, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PC-98 2 Blue)", 223, 0, 0, 0]);
GameData.Parts.Body.push(["Tenshi (2)", 224, 0, 0, 0]);
GameData.Parts.Body.push(["Maid (Dark Blue)", 225, 0, 0, 0]);
GameData.Parts.Body.push(["Iku (2)", 226, 0, 0, 0]);
GameData.Parts.Body.push(["Wonderland Rabbit", 227, 0, 0, 0]);
GameData.Parts.Body.push(["Black", 228, 0, 0, 0]);
GameData.Parts.Body.push(["Suika (2 Alt)", 229, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (Green)", 230, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (Purple)", 231, 0, 0, 0]);
GameData.Parts.Body.push(["Yuugi (2)", 232, 0, 0, 0]);
GameData.Parts.Body.push(["Kisume (2)", 233, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu Suit", 234, 0, 0, 0]);
GameData.Parts.Body.push(["Red Suit", 235, 0, 0, 0]);
GameData.Parts.Body.push(["China Dress", 236, 0, 0, 0]);
GameData.Parts.Body.push(["Parsee (2)", 237, 0, 0, 0]);
GameData.Parts.Body.push(["Red", 238, 0, 0, 0]);
GameData.Parts.Body.push(["Doctor", 239, 0, 0, 0]);
GameData.Parts.Body.push(["Utsuho (2)", 240, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (Blue)", 241, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (White)", 242, 0, 0, 0]);
GameData.Parts.Body.push(["Casual", 243, 0, 0, 0]);
GameData.Parts.Body.push(["Orin (2)", 244, 0, 0, 0]);
GameData.Parts.Body.push(["Black Robe", 245, 0, 0, 0]);
GameData.Parts.Body.push(["EE5F00", 246, 0, 0, 0]);
GameData.Parts.Body.push(["FFFF1A", 247, 0, 0, 0]);
GameData.Parts.Body.push(["71BB00", 248, 0, 0, 0]);
GameData.Parts.Body.push(["00BB5E", 249, 0, 0, 0]);
GameData.Parts.Body.push(["00A9BB", 250, 0, 0, 0]);
GameData.Parts.Body.push(["1AE9FF", 251, 0, 0, 0]);
GameData.Parts.Body.push(["1A76FF", 252, 0, 0, 0]);
GameData.Parts.Body.push(["91BDFF", 253, 0, 0, 0]);
GameData.Parts.Body.push(["AD77FF", 254, 0, 0, 0]);
GameData.Parts.Body.push(["893CFF", 255, 0, 0, 0]);
GameData.Parts.Body.push(["D83CFF", 256, 0, 0, 0]);
GameData.Parts.Body.push(["9D9D9D", 257, 0, 0, 0]);
GameData.Parts.Body.push(["6A6A6A", 258, 0, 0, 0]);
GameData.Parts.Body.push(["404040", 259, 0, 0, 0]);
GameData.Parts.Body.push(["Utsuho (Alt)", 260, 0, 0, 0]);
GameData.Parts.Body.push(["Blue Overalls", 261, 0, 0, 0]);
GameData.Parts.Body.push(["Satori (2A)", 262, 0, 0, 0]);
GameData.Parts.Body.push(["Satori (2B)", 263, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (PC-98 2 Green)", 264, 0, 0, 0]);
GameData.Parts.Body.push(["Alice (2B Alt Pose)", 265, 0, 0, 0]);
GameData.Parts.Body.push(["Koishi (2A)", 266, 0, 0, 0]);
GameData.Parts.Body.push(["Koishi (2B)", 267, 0, 0, 0]);
GameData.Parts.Body.push(["9 Jersey", 268, 0, 0, 0]);
GameData.Parts.Body.push(["9 Jersey (Rev)", 269, 0, 0, 0]);
GameData.Parts.Body.push(["Maid (Green)", 270, 0, 0, 0]);
GameData.Parts.Body.push(["Cirno (2 Alt)", 271, 0, 0, 0]);
GameData.Parts.Body.push(["Kasen", 272, 0, 0, 0]);
GameData.Parts.Body.push(["Coat (Pink)", 273, 0, 0, 0]);
GameData.Parts.Body.push(["Black Clothes", 274, 0, 0, 0]);
GameData.Parts.Body.push(["6 Jersey", 275, 0, 0, 0]);
GameData.Parts.Body.push(["6 Jersey (Rev)", 276, 0, 0, 0]);
GameData.Parts.Body.push(["School Uniform", 277, 0, 0, 0]);
GameData.Parts.Body.push(["Alice (2A Alt Pose)", 278, 0, 0, 0]);
GameData.Parts.Body.push(["Casual 2", 279, 0, 0, 0]);
GameData.Parts.Body.push(["Mitori", 280, 0, 0, 0]);
GameData.Parts.Body.push(["Sasha", 281, 0, 0, 0]);
GameData.Parts.Body.push(["Casual 3", 282, 0, 0, 0]);
GameData.Parts.Body.push(["Tennis Outfit 1", 283, 0, 0, 0]);
GameData.Parts.Body.push(["Tennis Outfit 2", 284, 0, 0, 0]);
GameData.Parts.Body.push(["Green Frilly Dress", 285, 0, 0, 0]);
GameData.Parts.Body.push(["Kimono (Maroon)", 286, 0, 0, 0]);
GameData.Parts.Body.push(["Yorihime (2)", 287, 0, 0, 0]);
GameData.Parts.Body.push(["Toyohime (2)", 288, 0, 0, 0]);
GameData.Parts.Body.push(["Youki (2)", 289, 0, 0, 0]);
GameData.Parts.Body.push(["Alice (PC-98)(2)", 290, 0, 0, 0]);
GameData.Parts.Body.push(["Kurumi (2)", 291, 0, 0, 0]);
GameData.Parts.Body.push(["Marisa (PC-98)(2)", 292, 0, 0, 0]);
GameData.Parts.Body.push(["Luize (2A)", 293, 0, 0, 0]);
GameData.Parts.Body.push(["Luize (2B)", 294, 0, 0, 0]);
GameData.Parts.Body.push(["Yumeko (2)", 295, 0, 0, 0]);
GameData.Parts.Body.push(["Ruukoto (2)", 296, 0, 0, 0]);
GameData.Parts.Body.push(["Casual 4", 297, 0, 0, 0]);
GameData.Parts.Body.push(["Mugetsu (2)", 298, 0, 0, 0]);
GameData.Parts.Body.push(["Gengetsu (2)", 299, 0, 0, 0]);
GameData.Parts.Body.push(["Sariel (2)", 300, 0, 0, 0]);
GameData.Parts.Body.push(["Konngara (2)", 301, 0, 0, 0]);
GameData.Parts.Body.push(["Rainbow Shirt", 302, 0, 0, 0]);
GameData.Parts.Body.push(["Kotohime (2)", 303, 0, 0, 0]);
GameData.Parts.Body.push(["Orange (2)", 304, 0, 0, 0]);
GameData.Parts.Body.push(["Rikako (2A)", 305, 0, 0, 0]);
GameData.Parts.Body.push(["Rikako (2B)", 306, 0, 0, 0]);
GameData.Parts.Body.push(["Rika (2)", 307, 0, 0, 0]);
GameData.Parts.Body.push(["Yuki (2)", 308, 0, 0, 0]);
GameData.Parts.Body.push(["VIVIT (2)", 309, 0, 0, 0]);
GameData.Parts.Body.push(["Kimono (Gold)", 310, 0, 0, 0]);
GameData.Parts.Body.push(["Akius Suit", 311, 0, 0, 0]);
GameData.Parts.Body.push(["Mai (2)", 312, 0, 0, 0]);
GameData.Parts.Body.push(["Ellen (2)", 313, 0, 0, 0]);
GameData.Parts.Body.push(["Kana (2)", 314, 0, 0, 0]);
GameData.Parts.Body.push(["Elly (2)", 315, 0, 0, 0]);
GameData.Parts.Body.push(["Sara (2)", 316, 0, 0, 0]);
GameData.Parts.Body.push(["White/black suit", 317, 0, 0, 0]);
GameData.Parts.Body.push(["Football Uniform", 318, 0, 0, 0]);
GameData.Parts.Body.push(["Football Uniform 9", 319, 0, 0, 0]);
GameData.Parts.Body.push(["Football Uniform 9 (rev)", 320, 0, 0, 0]);
GameData.Parts.Body.push(["Meira (2)", 321, 0, 0, 0]);
GameData.Parts.Body.push(["Elis (2)", 322, 0, 0, 0]);
GameData.Parts.Body.push(["Red Mushroom", 323, 0, 0, 0]);
GameData.Parts.Body.push(["Casual 5", 324, 0, 0, 0]);
GameData.Parts.Body.push(["Shingyoku F (2)", 325, 0, 0, 0]);
GameData.Parts.Body.push(["Shingyoku M (2)", 326, 0, 0, 0]);
GameData.Parts.Body.push(["White/Black Suit 2", 327, 0, 0, 0]);
GameData.Parts.Body.push(["White Suit", 328, 0, 0, 0]);
GameData.Parts.Body.push(["Kimono (Purple)", 329, 0, 0, 0]);
GameData.Parts.Body.push(["Yuka (PJ\'s 2)", 330, 0, 0, 0]);
GameData.Parts.Body.push(["Yukari (PCB 2)", 331, 0, 0, 0]);
GameData.Parts.Body.push(["White Suit 2", 332, 0, 0, 0]);
GameData.Parts.Body.push(["Nazrin (2)", 333, 0, 0, 0]);
GameData.Parts.Body.push(["Kogasa (2)", 334, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (White)", 335, 0, 0, 0]);
GameData.Parts.Body.push(["Meira (2 Alt)", 336, 0, 0, 0]);
GameData.Parts.Body.push(["Ichirin (2)", 337, 0, 0, 0]);
GameData.Parts.Body.push(["Mummy", 338, 0, 0, 0]);
GameData.Parts.Body.push(["Kimono (Red-White)", 339, 0, 0, 0]);
GameData.Parts.Body.push(["Flame Pants", 340, 0, 0, 0]);
GameData.Parts.Body.push(["Shanghai (2)", 341, 0, 0, 0]);
GameData.Parts.Body.push(["Reimu (Green)", 342, 0, 0, 0]);
GameData.Parts.Body.push(["Kyouko", 343, 0, 0, 0]);
GameData.Parts.Body.push(["Yoshika", 344, 0, 0, 0]);
GameData.Parts.Body.push(["Seiga", 345, 0, 0, 0]);
GameData.Parts.Body.push(["Tojiko", 346, 0, 0, 0]);
GameData.Parts.Body.push(["Futo", 347, 0, 0, 0]);
GameData.Parts.Body.push(["Miko", 348, 0, 0, 0]);
GameData.Parts.Body.push(["Miko (Alt)", 349, 0, 0, 0]);
GameData.Parts.Body.push(["Mamizou", 350, 0, 0, 0]);
GameData.Parts.Body.push(["Kosuzu", 351, 0, 0, 0]);
GameData.Parts.Body.push(["Ichirin (2 Alt)", 352, 0, 0, 0]);
GameData.Parts.Body.push(["Wakasagihime", 353, 0, 0, 0]);
GameData.Parts.Body.push(["Sekibanki", 354, 0, 0, 0]);
GameData.Parts.Body.push(["Kagerou", 355, 0, 0, 0]);
GameData.Parts.Body.push(["Kokoro", 356, 0, 0, 0]);
GameData.Parts.Body.push(["Benben", 357, 0, 0, 0]);
GameData.Parts.Body.push(["Yatsuhashi", 358, 0, 0, 0]);
GameData.Parts.Body.push(["Seija", 359, 0, 0, 0]);
GameData.Parts.Body.push(["Shinmyoumaru", 360, 0, 0, 0]);
GameData.Parts.Body.push(["Raiko", 361, 0, 0, 0]);
GameData.Parts.Body.push(["Seiran", 362, 0, 0, 0]);
GameData.Parts.Body.push(["Ringo", 363, 0, 0, 0]);
GameData.Parts.Body.push(["Doremy", 364, 0, 0, 0]);
GameData.Parts.Body.push(["Sumireko", 365, 0, 0, 0]);
GameData.Parts.Body.push("random");
GameData.Parts.Shoes = new Array();
GameData.Parts.Shoes.push("none");
GameData.Parts.Shoes.push(["Meiling", 1, 0, 0, 0]);
GameData.Parts.Shoes.push(["Reimu", 2, 0, 0, 0]);
GameData.Parts.Shoes.push(["Marisa", 3, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sakuya", 4, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yukari", 5, 0, 0, 0]);
GameData.Parts.Shoes.push(["Flandre", 6, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yuyuko", 7, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kaguya", 8, 0, 0, 0]);
GameData.Parts.Shoes.push(["Cirno", 9, 0, 0, 0]);
GameData.Parts.Shoes.push(["Eirin", 10, 0, 0, 0]);
GameData.Parts.Shoes.push(["Youmu", 11, 0, 0, 0]);
GameData.Parts.Shoes.push(["Patchouli", 12, 0, 0, 0]);
GameData.Parts.Shoes.push(["Alice", 13, 0, 0, 0]);
GameData.Parts.Shoes.push(["Reisen", 14, 0, 0, 0]);
GameData.Parts.Shoes.push(["Mokou", 15, 0, 0, 0]);
GameData.Parts.Shoes.push(["Mystia", 16, 0, 0, 0]);
GameData.Parts.Shoes.push(["Tewi", 17, 0, 0, 0]);
GameData.Parts.Shoes.push(["Keine", 18, 0, 0, 0]);
GameData.Parts.Shoes.push(["Ran", 19, 0, 0, 0]);
GameData.Parts.Shoes.push(["Letty", 20, 0, 0, 0]);
GameData.Parts.Shoes.push(["Chen", 21, 0, 0, 0]);
GameData.Parts.Shoes.push(["Suika", 22, 0, 0, 0]);
GameData.Parts.Shoes.push(["Remilia", 23, 0, 0, 0]);
GameData.Parts.Shoes.push(["Lily White", 24, 0, 0, 0]);
GameData.Parts.Shoes.push(["Lily Black", 25, 0, 0, 0]);
GameData.Parts.Shoes.push(["Komachi", 26, 0, 0, 0]);
GameData.Parts.Shoes.push(["Nitori", 27, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sikieiki", 28, 0, 0, 0]);
GameData.Parts.Shoes.push(["Wriggle", 29, 0, 0, 0]);
GameData.Parts.Shoes.push(["Rumia", 30, 0, 0, 0]);
GameData.Parts.Shoes.push(["Aya", 31, 0, 0, 0]);
GameData.Parts.Shoes.push(["Momizi", 32, 0, 0, 0]);
GameData.Parts.Shoes.push(["Koakuma", 33, 0, 0, 0]);
GameData.Parts.Shoes.push(["Lunasa", 34, 0, 0, 0]);
GameData.Parts.Shoes.push(["Merlin", 35, 0, 0, 0]);
GameData.Parts.Shoes.push(["Lyrica", 36, 0, 0, 0]);
GameData.Parts.Shoes.push(["Daiyousei", 37, 0, 0, 0]);
GameData.Parts.Shoes.push(["Medicine", 38, 0, 0, 0]);
GameData.Parts.Shoes.push(["Keine (EX) ", 39, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yuka", 40, 0, 0, 0]);
GameData.Parts.Shoes.push(["Suwako", 41, 0, 0, 0]);
GameData.Parts.Shoes.push(["Hina", 42, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sanae", 43, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kanako", 44, 0, 0, 0]);
GameData.Parts.Shoes.push(["Minoriko", 45, 0, 0, 0]);
GameData.Parts.Shoes.push(["Shizuha", 46, 0, 0, 0]);
GameData.Parts.Shoes.push(["Shinki", 47, 0, 0, 0]);
GameData.Parts.Shoes.push(["Mima", 48, 0, 0, 0]);
GameData.Parts.Shoes.push(["Rinnosuke", 49, 0, 0, 0]);
GameData.Parts.Shoes.push(["Tokiko", 50, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sunny Milk", 51, 0, 0, 0]);
GameData.Parts.Shoes.push(["Star Sapphire", 52, 0, 0, 0]);
GameData.Parts.Shoes.push(["Luna Child", 53, 0, 0, 0]);
GameData.Parts.Shoes.push(["Akyu", 54, 0, 0, 0]);
GameData.Parts.Shoes.push(["Renko", 55, 0, 0, 0]);
GameData.Parts.Shoes.push(["Maribel", 56, 0, 0, 0]);
GameData.Parts.Shoes.push(["Chiyuri", 57, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yumemi", 58, 0, 0, 0]);
GameData.Parts.Shoes.push(["Reimu (PC-98)", 59, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yamame", 60, 0, 0, 0]);
GameData.Parts.Shoes.push(["Tenshi", 61, 0, 0, 0]);
GameData.Parts.Shoes.push(["Iku", 62, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yuugi", 63, 0, 0, 0]);
GameData.Parts.Shoes.push(["Parsee", 64, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yorihime", 65, 0, 0, 0]);
GameData.Parts.Shoes.push(["Toyohime", 66, 0, 0, 0]);
GameData.Parts.Shoes.push(["Marisa (PC-98)", 67, 0, 0, 0]);
GameData.Parts.Shoes.push(["Youki", 68, 0, 0, 0]);
GameData.Parts.Shoes.push(["Alice (PC-98)", 69, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kurumi", 70, 0, 0, 0]);
GameData.Parts.Shoes.push(["Luize", 71, 0, 0, 0]);
GameData.Parts.Shoes.push(["Utsuho", 72, 0, 0, 0]);
GameData.Parts.Shoes.push(["Orin", 73, 0, 0, 0]);
GameData.Parts.Shoes.push(["Satori", 74, 0, 0, 0]);
GameData.Parts.Shoes.push(["Koishi", 75, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yumeko", 76, 0, 0, 0]);
GameData.Parts.Shoes.push(["Ruukoto", 77, 0, 0, 0]);
GameData.Parts.Shoes.push(["Mugetsu", 78, 0, 0, 0]);
GameData.Parts.Shoes.push(["VIVIT", 79, 0, 0, 0]);
GameData.Parts.Shoes.push(["Gengetsu", 80, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sariel", 81, 0, 0, 0]);
GameData.Parts.Shoes.push(["Konngara", 82, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kotohime", 83, 0, 0, 0]);
GameData.Parts.Shoes.push(["Orange", 84, 0, 0, 0]);
GameData.Parts.Shoes.push(["Rikako", 85, 0, 0, 0]);
GameData.Parts.Shoes.push(["Rika", 86, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yuki", 87, 0, 0, 0]);
GameData.Parts.Shoes.push(["Mai", 88, 0, 0, 0]);
GameData.Parts.Shoes.push(["Ellen", 89, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kana", 90, 0, 0, 0]);
GameData.Parts.Shoes.push(["Elly", 91, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sara", 92, 0, 0, 0]);
GameData.Parts.Shoes.push(["Meira", 93, 0, 0, 0]);
GameData.Parts.Shoes.push(["Elis", 94, 0, 0, 0]);
GameData.Parts.Shoes.push(["Shingyoku F", 95, 0, 0, 0]);
GameData.Parts.Shoes.push(["Shingyoku M", 96, 0, 0, 0]);
GameData.Parts.Shoes.push(["Yuka (PJ\'s)", 97, 0, 0, 0]);
GameData.Parts.Shoes.push(["Ghost", 98, 0, 0, 0]);
GameData.Parts.Shoes.push(["Marisa (SA)", 99, 0, 0, 0]);
GameData.Parts.Shoes.push(["Reisen (SWR)", 100, 0, 0, 0]);
GameData.Parts.Shoes.push(["Nazrin", 101, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kogasa", 102, 0, 0, 0]);
GameData.Parts.Shoes.push(["Ichirin", 103, 0, 0, 0]);
GameData.Parts.Shoes.push(["Marisa", 104, 0, 0, 0]);
GameData.Parts.Shoes.push(["Zombie Fairy", 105, 0, 0, 0]);
GameData.Parts.Shoes.push(["Shanghai", 106, 0, 0, 0]);
GameData.Parts.Shoes.push(["Rin Satsuki", 107, 0, 0, 0]);
GameData.Parts.Shoes.push(["Layla", 108, 0, 0, 0]);
GameData.Parts.Shoes.push(["Meimu", 109, 0, 0, 0]);
GameData.Parts.Shoes.push(["Stick Legs", 110, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sakuya (Magical)", 111, 0, 0, 0]);
GameData.Parts.Shoes.push(["Spider", 112, 0, 0, 0]);
GameData.Parts.Shoes.push(["Snake", 113, 0, 0, 0]);
GameData.Parts.Shoes.push(["Fish", 114, 0, 0, 0]);
GameData.Parts.Shoes.push(["Utsuho 2", 115, 0, 0, 0]);
GameData.Parts.Shoes.push(["Utsuho 2 Alt", 116, 0, 0, 0]);
GameData.Parts.Shoes.push(["Tojiko", 117, 0, 0, 0]);
GameData.Parts.Shoes.push(["Futo", 118, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kosuzu", 119, 0, 0, 0]);
GameData.Parts.Shoes.push(["Wakasagihime", 120, 0, 0, 0]);
GameData.Parts.Shoes.push(["Sekibanki", 121, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kagerou", 122, 0, 0, 0]);
GameData.Parts.Shoes.push(["Kokoro", 123, 0, 0, 0]);
GameData.Parts.Shoes.push(["Seija", 124, 0, 0, 0]);
GameData.Parts.Shoes.push(["Raiko", 125, 0, 0, 0]);
GameData.Parts.Shoes.push("random");
GameData.Parts.Arms = new Array();
GameData.Parts.Arms.push("none");
GameData.Parts.Arms.push(["Meiling", 1, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu", 2, 0, 0, 0]);
GameData.Parts.Arms.push(["Marisa", 3, 0, 0, 0]);
GameData.Parts.Arms.push(["Sakuya", 4, 0, 0, 0]);
GameData.Parts.Arms.push(["Yukari", 5, 0, 0, 0]);
GameData.Parts.Arms.push(["Flandre", 6, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuyuko", 7, 0, 0, 0]);
GameData.Parts.Arms.push(["Kaguya", 8, 0, 0, 0]);
GameData.Parts.Arms.push(["Cirno", 9, 0, 0, 0]);
GameData.Parts.Arms.push(["Eirin", 10, 0, 0, 0]);
GameData.Parts.Arms.push(["Youmu", 11, 0, 0, 0]);
GameData.Parts.Arms.push(["Patchouli", 12, 0, 0, 0]);
GameData.Parts.Arms.push(["Alice", 13, 0, 0, 0]);
GameData.Parts.Arms.push(["Reisen", 14, 0, 0, 0]);
GameData.Parts.Arms.push(["Mokou", 15, 0, 0, 0]);
GameData.Parts.Arms.push(["Mystia", 16, 0, 0, 0]);
GameData.Parts.Arms.push(["Tewi", 17, 0, 0, 0]);
GameData.Parts.Arms.push(["Keine", 18, 0, 0, 0]);
GameData.Parts.Arms.push(["Ran", 19, 0, 0, 0]);
GameData.Parts.Arms.push(["Letty", 20, 0, 0, 0]);
GameData.Parts.Arms.push(["Chen", 21, 0, 0, 0]);
GameData.Parts.Arms.push(["Suika", 22, 0, 0, 0]);
GameData.Parts.Arms.push(["Remilia", 23, 0, 0, 0]);
GameData.Parts.Arms.push(["Lily White", 24, 0, 0, 0]);
GameData.Parts.Arms.push(["Lily Black", 25, 0, 0, 0]);
GameData.Parts.Arms.push(["Komachi", 26, 0, 0, 0]);
GameData.Parts.Arms.push(["Nitori", 27, 0, 0, 0]);
GameData.Parts.Arms.push(["Sikieiki", 28, 0, 0, 0]);
GameData.Parts.Arms.push(["Wriggle", 29, 0, 0, 0]);
GameData.Parts.Arms.push(["Rumia", 30, 0, 0, 0]);
GameData.Parts.Arms.push(["Aya", 31, 0, 0, 0]);
GameData.Parts.Arms.push(["Momizi", 32, 0, 0, 0]);
GameData.Parts.Arms.push(["Koakuma", 33, 0, 0, 0]);
GameData.Parts.Arms.push(["Lunasa", 34, 0, 0, 0]);
GameData.Parts.Arms.push(["Merlin", 35, 0, 0, 0]);
GameData.Parts.Arms.push(["Lyrica", 36, 0, 0, 0]);
GameData.Parts.Arms.push(["Daiyousei", 37, 0, 0, 0]);
GameData.Parts.Arms.push(["Medicine", 38, 0, 0, 0]);
GameData.Parts.Arms.push(["Keine (EX)", 39, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuka", 40, 0, 0, 0]);
GameData.Parts.Arms.push(["Suwako", 41, 0, 0, 0]);
GameData.Parts.Arms.push(["Hina", 42, 0, 0, 0]);
GameData.Parts.Arms.push(["Sanae", 43, 0, 0, 0]);
GameData.Parts.Arms.push(["Kanako", 44, 0, 0, 0]);
GameData.Parts.Arms.push(["Minoriko", 45, 0, 0, 0]);
GameData.Parts.Arms.push(["Shizuha", 46, 0, 0, 0]);
GameData.Parts.Arms.push(["Shinki", 47, 0, 0, 0]);
GameData.Parts.Arms.push(["Mima", 48, 0, 0, 0]);
GameData.Parts.Arms.push(["Rinnosuke", 49, 0, 0, 0]);
GameData.Parts.Arms.push(["Tokiko", 50, 0, 0, 0]);
GameData.Parts.Arms.push(["Sunny Milk", 51, 0, 0, 0]);
GameData.Parts.Arms.push(["Star Sapphire", 52, 0, 0, 0]);
GameData.Parts.Arms.push(["Luna Child", 53, 0, 0, 0]);
GameData.Parts.Arms.push(["Akyu", 54, 0, 0, 0]);
GameData.Parts.Arms.push(["Renko", 55, 0, 0, 0]);
GameData.Parts.Arms.push(["Maribel", 56, 0, 0, 0]);
GameData.Parts.Arms.push(["Chiyuri", 57, 0, 0, 0]);
GameData.Parts.Arms.push(["Yumemi", 58, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (PC-98)", 59, 0, 0, 0]);
GameData.Parts.Arms.push(["Yamame", 60, 0, 0, 0]);
GameData.Parts.Arms.push(["Tenshi", 61, 0, 0, 0]);
GameData.Parts.Arms.push(["Iku", 62, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuugi", 63, 0, 0, 0]);
GameData.Parts.Arms.push(["Parsee", 64, 0, 0, 0]);
GameData.Parts.Arms.push(["Yorihime", 65, 0, 0, 0]);
GameData.Parts.Arms.push(["Toyohime", 66, 0, 0, 0]);
GameData.Parts.Arms.push(["Marisa (PC-98)", 67, 0, 0, 0]);
GameData.Parts.Arms.push(["Youki", 68, 0, 0, 0]);
GameData.Parts.Arms.push(["Alice (PC-98)", 69, 0, 0, 0]);
GameData.Parts.Arms.push(["Kurumi", 70, 0, 0, 0]);
GameData.Parts.Arms.push(["Luize", 71, 0, 0, 0]);
GameData.Parts.Arms.push(["Utsuho", 72, 0, 0, 0]);
GameData.Parts.Arms.push(["Orin", 73, 0, 0, 0]);
GameData.Parts.Arms.push(["Satori", 74, 0, 0, 0]);
GameData.Parts.Arms.push(["Koishi", 75, 0, 0, 0]);
GameData.Parts.Arms.push(["Yumeko", 76, 0, 0, 0]);
GameData.Parts.Arms.push(["Ruukoto", 77, 0, 0, 0]);
GameData.Parts.Arms.push(["Mugetsu", 78, 0, 0, 0]);
GameData.Parts.Arms.push(["VIVIT", 79, 0, 0, 0]);
GameData.Parts.Arms.push(["Gengetsu", 80, 0, 0, 0]);
GameData.Parts.Arms.push(["Sariel", 81, 0, 0, 0]);
GameData.Parts.Arms.push(["Konngara", 82, 0, 0, 0]);
GameData.Parts.Arms.push(["Kotohime", 83, 0, 0, 0]);
GameData.Parts.Arms.push(["Orange", 84, 0, 0, 0]);
GameData.Parts.Arms.push(["Rikako", 85, 0, 0, 0]);
GameData.Parts.Arms.push(["Rika", 86, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuki", 87, 0, 0, 0]);
GameData.Parts.Arms.push(["Mai", 88, 0, 0, 0]);
GameData.Parts.Arms.push(["Ellen", 89, 0, 0, 0]);
GameData.Parts.Arms.push(["Kana", 90, 0, 0, 0]);
GameData.Parts.Arms.push(["Elly", 91, 0, 0, 0]);
GameData.Parts.Arms.push(["Sara", 92, 0, 0, 0]);
GameData.Parts.Arms.push(["Meira", 93, 0, 0, 0]);
GameData.Parts.Arms.push(["Elis", 94, 0, 0, 0]);
GameData.Parts.Arms.push(["Shingyoku F", 95, 0, 0, 0]);
GameData.Parts.Arms.push(["Shingyoku M", 96, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuka (PJ\'s)", 97, 0, 0, 0]);
GameData.Parts.Arms.push(["Yukari (PCB)", 98, 0, 0, 0]);
GameData.Parts.Arms.push(["Marisa (SA)", 99, 0, 0, 0]);
GameData.Parts.Arms.push(["Reisen (SWR)", 100, 0, 0, 0]);
GameData.Parts.Arms.push(["Nazrin", 101, 0, 0, 0]);
GameData.Parts.Arms.push(["Kogasa", 102, 0, 0, 0]);
GameData.Parts.Arms.push(["Ichirin", 103, 0, 0, 0]);
GameData.Parts.Arms.push(["Marisa (UFO)", 104, 0, 0, 0]);
GameData.Parts.Arms.push(["Zombie Fairy", 105, 0, 0, 0]);
GameData.Parts.Arms.push(["Shanghai", 106, 0, 0, 0]);
GameData.Parts.Arms.push(["Rin Satsuki", 107, 0, 0, 0]);
GameData.Parts.Arms.push(["Layla", 108, 0, 0, 0]);
GameData.Parts.Arms.push(["Meimu", 109, 0, 0, 0]);
GameData.Parts.Arms.push(["Stick Arms", 110, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (2)", 111, 0, 0, 0]);
GameData.Parts.Arms.push(["Yukari (IaMP)", 112, 0, 0, 0]);
GameData.Parts.Arms.push(["Flandre (2)", 113, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuyuko (2)", 114, 0, 0, 0]);
GameData.Parts.Arms.push(["Kaguya (2)", 115, 0, 0, 0]);
GameData.Parts.Arms.push(["Eirin (2)", 116, 0, 0, 0]);
GameData.Parts.Arms.push(["Youmu (2)", 117, 0, 0, 0]);
GameData.Parts.Arms.push(["Patchouli (2)", 118, 0, 0, 0]);
GameData.Parts.Arms.push(["Alice (2)", 119, 0, 0, 0]);
GameData.Parts.Arms.push(["Reisen (2)", 120, 0, 0, 0]);
GameData.Parts.Arms.push(["Mokou (2)", 121, 0, 0, 0]);
GameData.Parts.Arms.push(["Mystia (2A)", 122, 0, 0, 0]);
GameData.Parts.Arms.push(["Mystia (2B)", 123, 0, 0, 0]);
GameData.Parts.Arms.push(["Tewi (2)", 124, 0, 0, 0]);
GameData.Parts.Arms.push(["Ran (2)", 125, 0, 0, 0]);
GameData.Parts.Arms.push(["Letty (2)", 126, 0, 0, 0]);
GameData.Parts.Arms.push(["Chen (2)", 127, 0, 0, 0]);
GameData.Parts.Arms.push(["Suika (2)", 128, 0, 0, 0]);
GameData.Parts.Arms.push(["Murasa", 129, 0, 0, 0]);
GameData.Parts.Arms.push(["Shou", 130, 0, 0, 0]);
GameData.Parts.Arms.push(["Byakuren ", 131, 0, 0, 0]);
GameData.Parts.Arms.push(["Byakuren (Alt)", 132, 0, 0, 0]);
GameData.Parts.Arms.push(["Byakuren (Alt2)", 133, 0, 0, 0]);
GameData.Parts.Arms.push(["Raised Arm", 134, 0, 0, 0]);
GameData.Parts.Arms.push(["Nue", 135, 0, 0, 0]);
GameData.Parts.Arms.push(["Remilia (2)", 136, 0, 0, 0]);
GameData.Parts.Arms.push(["Lily White (2)", 137, 0, 0, 0]);
GameData.Parts.Arms.push(["Lily Black (2)", 138, 0, 0, 0]);
GameData.Parts.Arms.push(["Komachi (2)", 139, 0, 0, 0]);
GameData.Parts.Arms.push(["Nitori (2)", 140, 0, 0, 0]);
GameData.Parts.Arms.push(["Sikieiki (2)", 141, 0, 0, 0]);
GameData.Parts.Arms.push(["Wriggle (2)", 142, 0, 0, 0]);
GameData.Parts.Arms.push(["Rumia (2)", 143, 0, 0, 0]);
GameData.Parts.Arms.push(["Outstretched SS", 144, 0, 0, 0]);
GameData.Parts.Arms.push(["Aya (2)", 145, 0, 0, 0]);
GameData.Parts.Arms.push(["Momizi (2)", 146, 0, 0, 0]);
GameData.Parts.Arms.push(["Koakuma (2)", 147, 0, 0, 0]);
GameData.Parts.Arms.push(["Lunasa (2)", 148, 0, 0, 0]);
GameData.Parts.Arms.push(["Merlin (2)", 149, 0, 0, 0]);
GameData.Parts.Arms.push(["Lyrica (2)", 150, 0, 0, 0]);
GameData.Parts.Arms.push(["Sakuya (Magical)", 151, 0, 0, 0]);
GameData.Parts.Arms.push(["Daiyousei (2)", 152, 0, 0, 0]);
GameData.Parts.Arms.push(["Medicine (2)", 153, 0, 0, 0]);
GameData.Parts.Arms.push(["Santa", 154, 0, 0, 0]);
GameData.Parts.Arms.push(["Suwako (2)", 155, 0, 0, 0]);
GameData.Parts.Arms.push(["Hina (2)", 156, 0, 0, 0]);
GameData.Parts.Arms.push(["Sanae (2)", 157, 0, 0, 0]);
GameData.Parts.Arms.push(["Kanako (2)", 158, 0, 0, 0]);
GameData.Parts.Arms.push(["Minoriko (2)", 159, 0, 0, 0]);
GameData.Parts.Arms.push(["Shizuha (2)", 160, 0, 0, 0]);
GameData.Parts.Arms.push(["Shinki (2)", 161, 0, 0, 0]);
GameData.Parts.Arms.push(["Utsuho (Alt)", 162, 0, 0, 0]);
GameData.Parts.Arms.push(["Mima (2)", 163, 0, 0, 0]);
GameData.Parts.Arms.push(["Rinnosuke (2)", 164, 0, 0, 0]);
GameData.Parts.Arms.push(["Rengeteki", 165, 0, 0, 0]);
GameData.Parts.Arms.push(["Rengeteki (Alt)", 166, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (P2)", 167, 0, 0, 0]);
GameData.Parts.Arms.push(["Blue Uniform", 168, 0, 0, 0]);
GameData.Parts.Arms.push(["Tokiko (2)", 169, 0, 0, 0]);
GameData.Parts.Arms.push(["Red Trenchcoat", 170, 0, 0, 0]);
GameData.Parts.Arms.push(["Black Coat", 171, 0, 0, 0]);
GameData.Parts.Arms.push(["Sunny Milk (2)", 172, 0, 0, 0]);
GameData.Parts.Arms.push(["Star Sapphire (2)", 173, 0, 0, 0]);
GameData.Parts.Arms.push(["Hatate", 174, 0, 0, 0]);
GameData.Parts.Arms.push(["Luna Child (2)", 175, 0, 0, 0]);
GameData.Parts.Arms.push(["Akyu (2)", 176, 0, 0, 0]);
GameData.Parts.Arms.push(["Brown Trenchcoat", 177, 0, 0, 0]);
GameData.Parts.Arms.push(["Maribel (2)", 178, 0, 0, 0]);
GameData.Parts.Arms.push(["Teacher", 179, 0, 0, 0]);
GameData.Parts.Arms.push(["Yamame (2A)", 180, 0, 0, 0]);
GameData.Parts.Arms.push(["Wooden Gauntlets", 181, 0, 0, 0]);
GameData.Parts.Arms.push(["Yamame (2B)", 182, 0, 0, 0]);
GameData.Parts.Arms.push(["Chiyuri (2)", 183, 0, 0, 0]);
GameData.Parts.Arms.push(["Yumemi (2)", 184, 0, 0, 0]);
GameData.Parts.Arms.push(["Purple Trenchcoat", 185, 0, 0, 0]);
GameData.Parts.Arms.push(["Blue Uniform 2", 186, 0, 0, 0]);
GameData.Parts.Arms.push(["Pink Sleeves", 187, 0, 0, 0]);
GameData.Parts.Arms.push(["Camo (Green)", 188, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (PC-98 2)", 189, 0, 0, 0]);
GameData.Parts.Arms.push(["Kimono (Indigo)", 190, 0, 0, 0]);
GameData.Parts.Arms.push(["Camo (Grey)", 191, 0, 0, 0]);
GameData.Parts.Arms.push(["Tenshi (2)", 192, 0, 0, 0]);
GameData.Parts.Arms.push(["Alice (in W)", 193, 0, 0, 0]);
GameData.Parts.Arms.push(["Mystia (Black)", 194, 0, 0, 0]);
GameData.Parts.Arms.push(["Iku (2)", 195, 0, 0, 0]);
GameData.Parts.Arms.push(["Green Trenchcoat", 196, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuugi (2)", 197, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (2 Alt)", 198, 0, 0, 0]);
GameData.Parts.Arms.push(["Red+Blue", 199, 0, 0, 0]);
GameData.Parts.Arms.push(["Parsee (2)", 200, 0, 0, 0]);
GameData.Parts.Arms.push(["Utsuho (2A)", 201, 0, 0, 0]);
GameData.Parts.Arms.push(["Utsuho (2B)", 202, 0, 0, 0]);
GameData.Parts.Arms.push(["Orin (2A)", 203, 0, 0, 0]);
GameData.Parts.Arms.push(["Orin (2B)", 204, 0, 0, 0]);
GameData.Parts.Arms.push(["Sleeveless Outstreched", 205, 0, 0, 0]);
GameData.Parts.Arms.push(["Long Outstreched", 206, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu Outstreched", 207, 0, 0, 0]);
GameData.Parts.Arms.push(["Short Blue", 208, 0, 0, 0]);
GameData.Parts.Arms.push(["Utsuho (2C)", 209, 0, 0, 0]);
GameData.Parts.Arms.push(["Satori (2)", 210, 0, 0, 0]);
GameData.Parts.Arms.push(["Short Black Sleeves", 211, 0, 0, 0]);
GameData.Parts.Arms.push(["Suika (2 Alt)", 212, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (PC-98 2 Green)", 213, 0, 0, 0]);
GameData.Parts.Arms.push(["Koishi (2)", 214, 0, 0, 0]);
GameData.Parts.Arms.push(["Kasen", 215, 0, 0, 0]);
GameData.Parts.Arms.push(["Kasen (Alt)", 216, 0, 0, 0]);
GameData.Parts.Arms.push(["Pink Trenchcoat", 217, 0, 0, 0]);
GameData.Parts.Arms.push(["Mitori", 218, 0, 0, 0]);
GameData.Parts.Arms.push(["Kasen (Alt 2)", 219, 0, 0, 0]);
GameData.Parts.Arms.push(["Kasen (Alt 3)", 220, 0, 0, 0]);
GameData.Parts.Arms.push(["Kasen (Alt 4)", 221, 0, 0, 0]);
GameData.Parts.Arms.push(["Sasha", 222, 0, 0, 0]);
GameData.Parts.Arms.push(["Dark Green", 223, 0, 0, 0]);
GameData.Parts.Arms.push(["Yorihime 2A", 224, 0, 0, 0]);
GameData.Parts.Arms.push(["Yorihime 2B", 225, 0, 0, 0]);
GameData.Parts.Arms.push(["Toyohime 2", 226, 0, 0, 0]);
GameData.Parts.Arms.push(["Youki 2", 227, 0, 0, 0]);
GameData.Parts.Arms.push(["Alice (PC-98) 2", 228, 0, 0, 0]);
GameData.Parts.Arms.push(["Kurumi 2", 229, 0, 0, 0]);
GameData.Parts.Arms.push(["Marisa (PC-98) 2", 230, 0, 0, 0]);
GameData.Parts.Arms.push(["Luize 2", 231, 0, 0, 0]);
GameData.Parts.Arms.push(["Yumeko 2", 232, 0, 0, 0]);
GameData.Parts.Arms.push(["Ruukoto 2", 233, 0, 0, 0]);
GameData.Parts.Arms.push(["Mugetsu 2", 234, 0, 0, 0]);
GameData.Parts.Arms.push(["Gengetsu 2", 235, 0, 0, 0]);
GameData.Parts.Arms.push(["Sariel 2", 236, 0, 0, 0]);
GameData.Parts.Arms.push(["Kotohime 2", 237, 0, 0, 0]);
GameData.Parts.Arms.push(["Orange 2", 238, 0, 0, 0]);
GameData.Parts.Arms.push(["Rikako 2", 239, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuki 2", 240, 0, 0, 0]);
GameData.Parts.Arms.push(["VIVIT 2", 241, 0, 0, 0]);
GameData.Parts.Arms.push(["Mai 2", 242, 0, 0, 0]);
GameData.Parts.Arms.push(["Kana 2", 243, 0, 0, 0]);
GameData.Parts.Arms.push(["Kimono (Gold)", 244, 0, 0, 0]);
GameData.Parts.Arms.push(["Elly 2", 245, 0, 0, 0]);
GameData.Parts.Arms.push(["Sara 2", 246, 0, 0, 0]);
GameData.Parts.Arms.push(["Meira 2", 247, 0, 0, 0]);
GameData.Parts.Arms.push(["Elis 2", 248, 0, 0, 0]);
GameData.Parts.Arms.push(["Shingyoku M 2", 249, 0, 0, 0]);
GameData.Parts.Arms.push(["Yuka (PJ\'s 2)", 250, 0, 0, 0]);
GameData.Parts.Arms.push(["Yukari (PCB 2)", 251, 0, 0, 0]);
GameData.Parts.Arms.push(["Kimono (Purple)", 252, 0, 0, 0]);
GameData.Parts.Arms.push(["Kimono (Maroon)", 253, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (White)", 254, 0, 0, 0]);
GameData.Parts.Arms.push(["Ichirin 2", 255, 0, 0, 0]);
GameData.Parts.Arms.push(["Shanghai 2", 256, 0, 0, 0]);
GameData.Parts.Arms.push(["Reimu (Green)", 257, 0, 0, 0]);
GameData.Parts.Arms.push(["Kyouko", 258, 0, 0, 0]);
GameData.Parts.Arms.push(["Yoshika", 259, 0, 0, 0]);
GameData.Parts.Arms.push(["Seiga", 260, 0, 0, 0]);
GameData.Parts.Arms.push(["Tojiko", 261, 0, 0, 0]);
GameData.Parts.Arms.push(["Futo", 262, 0, 0, 0]);
GameData.Parts.Arms.push(["Miko", 263, 0, 0, 0]);
GameData.Parts.Arms.push(["Mamizou", 264, 0, 0, 0]);
GameData.Parts.Arms.push(["Kosuzu", 265, 0, 0, 0]);
GameData.Parts.Arms.push(["Kosuzu (Alt)", 266, 0, 0, 0]);
GameData.Parts.Arms.push(["Wakasagihime", 267, 0, 0, 0]);
GameData.Parts.Arms.push(["Sekibanki", 268, 0, 0, 0]);
GameData.Parts.Arms.push(["Kagerou", 269, 0, 0, 0]);
GameData.Parts.Arms.push(["Kokoro", 270, 0, 0, 0]);
GameData.Parts.Arms.push(["Benben", 271, 0, 0, 0]);
GameData.Parts.Arms.push(["Yatsuhashi", 272, 0, 0, 0]);
GameData.Parts.Arms.push(["Seija", 273, 0, 0, 0]);
GameData.Parts.Arms.push(["Shinmyoumaru", 274, 0, 0, 0]);
GameData.Parts.Arms.push(["Raiko", 275, 0, 0, 0]);
GameData.Parts.Arms.push(["Seiran", 276, 0, 0, 0]);
GameData.Parts.Arms.push(["Ringo", 277, 0, 0, 0]);
GameData.Parts.Arms.push(["Doremy", 278, 0, 0, 0]);
GameData.Parts.Arms.push("random");
GameData.Parts.Hair = new Array();
GameData.Parts.Hair.push(["Meiling", 1, 0, 0, 0, 2, "EB585A"]);
GameData.Parts.Hair.push(["Reimu", 2, 0, 0, 0, 0, "283960"]);
GameData.Parts.Hair.push(["Marisa", 3, 0, 0, 0, 0, "FFFF6F"]);
GameData.Parts.Hair.push(["Sakuya", 4, 0, 0, 0, 0, "E6E6E6"]);
GameData.Parts.Hair.push(["Yukari", 5, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Flandre", 6, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Yuyuko", 7, 0, 0, 0, 0, "FF9999"]);
GameData.Parts.Hair.push(["Kaguya", 8, 0, 0, 0, 0, "444444"]);
GameData.Parts.Hair.push(["Cirno", 9, 0, 0, 0, 0, "49CAE9"]);
GameData.Parts.Hair.push(["Eirin", 10, 0, 0, 0, 0, "F2F2F2"]);
GameData.Parts.Hair.push(["Youmu", 11, 0, 0, 0, 0, "F2F2F2"]);
GameData.Parts.Hair.push(["Patchouli", 12, 0, 0, 0, 0, "AB80BF"]);
GameData.Parts.Hair.push(["Alice", 13, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Reisen", 14, 0, 0, 0, 0, "E788FF"]);
GameData.Parts.Hair.push(["Mokou", 15, 0, 0, 0, 0, "EEEEEE"]);
GameData.Parts.Hair.push(["Mystia", 16, 0, 0, 0, 0, "F19FAD"]);
GameData.Parts.Hair.push(["Tewi", 17, 0, 0, 0, 0, "333333"]);
GameData.Parts.Hair.push(["Keine", 18, 0, 0, 0, 0, "D2D2DC"]);
GameData.Parts.Hair.push(["Ran", 19, 0, 0, 0, 0, "FEE170"]);
GameData.Parts.Hair.push(["Letty", 20, 0, 0, 0, 0, "E1D5FF"]);
GameData.Parts.Hair.push(["Chen", 21, 0, 0, 0, 0, "994D00"]);
GameData.Parts.Hair.push(["Suika", 22, 0, 0, 0, 0, "FEB74E"]);
GameData.Parts.Hair.push(["Remilia", 23, 0, 0, 0, 0, "80A2D5"]);
GameData.Parts.Hair.push(["Lily White", 24, 0, 0, 0, 0, "FEFDA3"]);
GameData.Parts.Hair.push(["Lily Black", 25, 0, 0, 0, 0, "F3BB69"]);
GameData.Parts.Hair.push(["Komachi", 26, 0, 0, 0, 0, "CB4545"]);
GameData.Parts.Hair.push(["Nitori", 27, 0, 0, 0, 0, "4B95F6"]);
GameData.Parts.Hair.push(["Sikieiki", 28, 0, 0, 0, 0, "BBD5C5"]);
GameData.Parts.Hair.push(["Wriggle", 29, 0, 0, 0, 0, "497255"]);
GameData.Parts.Hair.push(["Rumia", 30, 0, 0, 0, 0, "FEF39A"]);
GameData.Parts.Hair.push(["Aya", 31, 0, 0, 0, 0, "332B1A"]);
GameData.Parts.Hair.push(["Momizi", 32, 0, 0, 0, 0, "FBFBFB"]);
GameData.Parts.Hair.push(["Koakuma", 33, 0, 0, 0, 0, "9C1F1F"]);
GameData.Parts.Hair.push(["Lunasa", 34, 0, 0, 0, 0, "FEF4A3"]);
GameData.Parts.Hair.push(["Merlin", 35, 0, 0, 0, 0, "DDF2FF"]);
GameData.Parts.Hair.push(["Lyrica", 36, 0, 0, 0, 0, "A3827E"]);
GameData.Parts.Hair.push(["Daiyousei", 37, 0, 0, 0, 0, "A4F4B4"]);
GameData.Parts.Hair.push(["Medicine", 38, 0, 0, 0, 0, "FFF9A4"]);
GameData.Parts.Hair.push(["Keine (EX)", 39, 0, 0, 0, 0, "D2D2DC"]);
GameData.Parts.Hair.push(["Yuka", 40, 0, 0, 0, 0, "309C30"]);
GameData.Parts.Hair.push(["Suwako", 41, 0, 0, 0, 0, "FAFFC4"]);
GameData.Parts.Hair.push(["Hina", 42, 0, 0, 0, 1, "87E791"]);
GameData.Parts.Hair.push(["Sanae", 43, 0, 0, 0, 0, "98F898"]);
GameData.Parts.Hair.push(["Kanako", 44, 0, 0, 0, 0, "6767E4"]);
GameData.Parts.Hair.push(["Minoriko", 45, 0, 0, 0, 0, "FFCC57"]);
GameData.Parts.Hair.push(["Shizuha", 46, 0, 0, 0, 0, "FFF06F"]);
GameData.Parts.Hair.push(["Shinki", 47, 0, 0, 0, 0, "EDEAFB"]);
GameData.Parts.Hair.push(["Mima", 48, 0, 0, 0, 0, "48771A"]);
GameData.Parts.Hair.push(["Rinnosuke", 49, 0, 0, 0, 0, "FBFBFB"]);
GameData.Parts.Hair.push(["Tokiko", 50, 0, 0, 0, 0, "EEEEEE"]);
GameData.Parts.Hair.push(["Sunny Milk", 51, 0, 0, 0, 0, "F7ED8C"]);
GameData.Parts.Hair.push(["Star Sapphire", 52, 0, 0, 0, 0, "444444"]);
GameData.Parts.Hair.push(["Luna Child", 53, 0, 0, 0, 0, "ECEB57"]);
GameData.Parts.Hair.push(["Akyu", 54, 0, 0, 0, 0, "C073C0"]);
GameData.Parts.Hair.push(["Renko", 55, 0, 0, 0, 0, "947252"]);
GameData.Parts.Hair.push(["Maribel", 56, 0, 0, 0, 0, "FFF177"]);
GameData.Parts.Hair.push(["Chiyuri", 57, 0, 0, 0, 0, "FEF4AB"]);
GameData.Parts.Hair.push(["Yumemi", 58, 0, 0, 0, 0, "934242"]);
GameData.Parts.Hair.push(["Reimu (PC-98)", 59, 0, 0, 0, 0, "890099"]);
GameData.Parts.Hair.push(["Yamame", 60, 0, 0, 0, 0, "FEF1C4"]);
GameData.Parts.Hair.push(["Tenshi", 61, 0, 0, 0, 0, "2987C5"]);
GameData.Parts.Hair.push(["Iku", 62, 0, 0, 0, 0, "8C75EA"]);
GameData.Parts.Hair.push(["Yuugi", 63, 0, 0, 0, 0, "EFDDAF"]);
GameData.Parts.Hair.push(["Kisume", 64, 0, 0, 0, 0, "20AD79"]);
GameData.Parts.Hair.push(["Parsee", 65, 0, 0, 0, 0, "F9E586"]);
GameData.Parts.Hair.push(["Yorihime", 66, 0, 0, 0, 0, "D6CBDE"]);
GameData.Parts.Hair.push(["Toyohime", 67, 0, 0, 0, 0, "FEEDB9"]);
GameData.Parts.Hair.push(["Marisa (PC-98)", 68, 0, 0, 0, 0, "FEFE54"]);
GameData.Parts.Hair.push(["Youki", 69, 0, 0, 0, 0, "F7F7F7"]);
GameData.Parts.Hair.push(["Alice (PC-98)", 70, 0, 0, 0, 0, "FEFE54"]);
GameData.Parts.Hair.push(["Kurumi", 71, 0, 0, 0, 0, "FFFF77"]);
GameData.Parts.Hair.push(["Luize", 72, 0, 0, 0, 0, "FEFDAB"]);
GameData.Parts.Hair.push(["Utsuho", 73, 0, 0, 0, 0, "3C3C3C"]);
GameData.Parts.Hair.push(["Orin", 74, 0, 0, 0, 0, "D76464"]);
GameData.Parts.Hair.push(["Satori", 75, 0, 0, 0, 0, "E3BBFF"]);
GameData.Parts.Hair.push(["Koishi", 76, 0, 0, 0, 0, "DDFFE7"]);
GameData.Parts.Hair.push(["Yumeko", 77, 0, 0, 0, 0, "FEFE70"]);
GameData.Parts.Hair.push(["Ruukoto", 78, 0, 0, 0, 0, "70FE70"]);
GameData.Parts.Hair.push(["Mugetsu", 79, 0, 0, 0, 0, "FEFD89"]);
GameData.Parts.Hair.push(["VIVIT", 80, 0, 0, 0, 0, "ED5F5F"]);
GameData.Parts.Hair.push(["Gengetsu", 81, 0, 0, 0, 0, "FFFF5E"]);
GameData.Parts.Hair.push(["Sariel", 82, 0, 0, 0, 0, "DDDDFF"]);
GameData.Parts.Hair.push(["Konngara", 83, 0, 0, 0, 0, "3C3C3C"]);
GameData.Parts.Hair.push(["Kotohime", 84, 0, 0, 0, 3, "BF0000"]);
GameData.Parts.Hair.push(["Orange", 85, 0, 0, 0, 0, "EB585A"]);
GameData.Parts.Hair.push(["Rikako", 86, 0, 0, 0, 0, "980198"]);
GameData.Parts.Hair.push(["Rika", 87, 0, 0, 0, 0, "7A380E"]);
GameData.Parts.Hair.push(["Yuki", 88, 0, 0, 0, 0, "FEFE54"]);
GameData.Parts.Hair.push(["Mai", 89, 0, 0, 0, 0, "ABABFE"]);
GameData.Parts.Hair.push(["Ellen", 90, 0, 0, 0, 0, "FEFD92"]);
GameData.Parts.Hair.push(["Kana", 91, 0, 0, 0, 0, "FFFFA2"]);
GameData.Parts.Hair.push(["Elly", 92, 0, 0, 0, 0, "FFFF88"]);
GameData.Parts.Hair.push(["Sara", 93, 0, 0, 0, 0, "EFABBA"]);
GameData.Parts.Hair.push(["Meira", 94, 0, 0, 0, 0, "B835B9"]);
GameData.Parts.Hair.push(["Elis", 95, 0, 0, 0, 0, "EEED09"]);
GameData.Parts.Hair.push(["Shingyoku F", 96, 0, 0, 0, 0, "D22D2D"]);
GameData.Parts.Hair.push(["Shingyoku M", 97, 0, 0, 0, 0, "393939"]);
GameData.Parts.Hair.push(["Yuka (PJ\'s)", 98, 0, 0, 0, 0, "23AB23"]);
GameData.Parts.Hair.push(["Yukari (PCB)", 99, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Marisa (SA)", 100, 0, 0, 0, 0, "F5E981"]);
GameData.Parts.Hair.push(["Reisen II", 101, 0, 0, 0, 0, "BFB4D3"]);
GameData.Parts.Hair.push(["Nazrin", 102, 0, 0, 0, 0, "969696"]);
GameData.Parts.Hair.push(["Kogasa", 103, 0, 0, 0, 0, "6AA8AE"]);
GameData.Parts.Hair.push(["Ichirin", 104, 0, 0, 0, 0, "B8BCE0"]);
GameData.Parts.Hair.push(["Marisa (UFO)", 105, 0, 0, 0, 0, "FFF600"]);
GameData.Parts.Hair.push(["Zombie Fairy", 106, 0, 0, 0, 0, "D9DDFF"]);
GameData.Parts.Hair.push(["Shanghai", 107, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Rin Satsuki", 108, 0, 0, 0, 0, "F5FABA"]);
GameData.Parts.Hair.push(["Layla", 109, 0, 0, 0, 0, "51B087"]);
GameData.Parts.Hair.push(["Meimu", 110, 0, 0, 0, 4, "DAC2F6"]);
GameData.Parts.Hair.push(["Meiling (2)", 111, 0, 0, 0, 5, "EB585A"]);
GameData.Parts.Hair.push(["Lie Meiling", 111, 0, 0, 0, 5, "373737"]);
GameData.Parts.Hair.push(["Reimu (2 Blue)", 112, 0, 0, 0, 0, "283960"]);
GameData.Parts.Hair.push(["Marisa (PCB)", 113, 0, 0, 0, 0, "FEFD92"]);
GameData.Parts.Hair.push(["Sakuya (2)", 114, 0, 0, 0, 6, "E6E6E6"]);
GameData.Parts.Hair.push(["Yukari (IaMP)", 115, 0, 0, 0, 7, "FFFF80"]);
GameData.Parts.Hair.push(["Flandre (2)", 116, 0, 0, 0, 0, "FEFDA3"]);
GameData.Parts.Hair.push(["Yuyuko (2)", 117, 0, 0, 0, 0, "FF9999"]);
GameData.Parts.Hair.push(["Kaguya (2)", 118, 0, 0, 0, 0, "444444"]);
GameData.Parts.Hair.push(["Cirno (2A)", 119, 0, 0, 0, 0, "49CAE9"]);
GameData.Parts.Hair.push(["Cirno (2B)", 120, 0, 0, 0, 0, "49CAE9"]);
GameData.Parts.Hair.push(["Eirin (2)", 121, 0, 0, 0, 0, "F2F2F2"]);
GameData.Parts.Hair.push(["Youmu (2)", 122, 0, 0, 0, 0, "F2F2F2"]);
GameData.Parts.Hair.push(["Patchouli (2)", 123, 0, 0, 0, 8, "AB80BF"]);
GameData.Parts.Hair.push(["Alice (2A)", 124, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Alice (2B)", 125, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Reisen (2)", 126, 0, 0, 0, 9, "CB93E3"]);
GameData.Parts.Hair.push(["Mokou (2)", 127, 0, 0, 0, 0, "D9DEE1"]);
GameData.Parts.Hair.push(["Mystia (2)", 128, 0, 0, 0, 0, "F19FAD"]);
GameData.Parts.Hair.push(["Tewi (2)", 129, 0, 0, 0, 0, "333333"]);
GameData.Parts.Hair.push(["Keine (2)", 130, 0, 0, 0, 10, "A0ADDE"]);
GameData.Parts.Hair.push(["Keine (EX2)", 130, 0, 0, 0, 10, "89E063"]);
GameData.Parts.Hair.push(["Ran (2)", 131, 0, 0, 0, 0, "FEE170"]);
GameData.Parts.Hair.push(["Letty (2)", 132, 0, 0, 0, 0, "F3E8FD"]);
GameData.Parts.Hair.push(["Chen (2)", 133, 0, 0, 0, 0, "994D00"]);
GameData.Parts.Hair.push(["Suika (2)", 134, 0, 0, 0, 0, "FEB74E"]);
GameData.Parts.Hair.push(["Murasa", 135, 0, 0, 0, 0, "262626"]);
GameData.Parts.Hair.push(["Shou", 136, 0, 0, 0, 0, "FBFF6C"]);
GameData.Parts.Hair.push(["Byakuren", 137, 0, 0, 0, 0, "C0994C"]);
GameData.Parts.Hair.push(["Nue", 138, 0, 0, 0, 0, "333333"]);
GameData.Parts.Hair.push(["Remilia (2)", 139, 0, 0, 0, 0, "80A2D5"]);
GameData.Parts.Hair.push(["Lily White (2)", 140, 0, 0, 0, 0, "FEFDA3"]);
GameData.Parts.Hair.push(["Lily Black (2)", 140, 0, 0, 0, 0, "F3BB69"]);
GameData.Parts.Hair.push(["Komachi (2)", 141, 0, 0, 0, 0, "CB4545"]);
GameData.Parts.Hair.push(["Nitori (2)", 142, 0, 0, 0, 0, "4B95F6"]);
GameData.Parts.Hair.push(["Reimu (2 Brown)", 112, 0, 0, 0, 0, "6F4722"]);
GameData.Parts.Hair.push(["Sikieiki (2)", 143, 0, 0, 0, 0, "BBD5C5"]);
GameData.Parts.Hair.push(["Byakuren (No Gr.)", 144, 0, 0, 0, 0, "C0994C"]);
GameData.Parts.Hair.push(["Wriggle (2)", 145, 0, 0, 0, 0, "497255"]);
GameData.Parts.Hair.push(["Rumia (2)", 146, 0, 0, 0, 0, "FEF39A"]);
GameData.Parts.Hair.push(["Aya (2)", 147, 0, 0, 0, 0, "373737"]);
GameData.Parts.Hair.push(["Momizi (2)", 148, 0, 0, 0, 0, "FBFBFB"]);
GameData.Parts.Hair.push(["Koakuma (2)", 149, 0, 0, 0, 0, "9C1F1F"]);
GameData.Parts.Hair.push(["Marisa (2)", 150, 0, 0, 0, 0, "FEFE78"]);
GameData.Parts.Hair.push(["Lunasa (2)", 151, 0, 0, 0, 0, "FEF4A3"]);
GameData.Parts.Hair.push(["Merlin (2)", 152, 0, 0, 0, 0, "DDF2FF"]);
GameData.Parts.Hair.push(["Lyrica (2)", 153, 0, 0, 0, 0, "8F7B67"]);
GameData.Parts.Hair.push(["Daiyousei (2)", 154, 0, 0, 0, 0, "A4F4B4"]);
GameData.Parts.Hair.push(["Medicine (2)", 155, 0, 0, 0, 0, "FFF9A4"]);
GameData.Parts.Hair.push(["Yuka (2)", 156, 0, 0, 0, 0, "309C30"]);
GameData.Parts.Hair.push(["Suwako (2)", 157, 0, 0, 0, 0, "FEF7BC"]);
GameData.Parts.Hair.push(["Hina (2)", 158, 0, 0, 0, 11, "87E791"]);
GameData.Parts.Hair.push(["Sanae (2)", 159, 0, 0, 0, 0, "98F898"]);
GameData.Parts.Hair.push(["Kanako (2)", 160, 0, 0, 0, 0, "6767E4"]);
GameData.Parts.Hair.push(["None", 161, 0, 0, 0, 0, "FFFFFF"]);
GameData.Parts.Hair.push(["Minoriko (2)", 162, 0, 0, 0, 0, "FFCC57"]);
GameData.Parts.Hair.push(["Shizuha (2)", 163, 0, 0, 0, 0, "FFF06F"]);
GameData.Parts.Hair.push(["Shinki (2)", 164, 0, 0, 0, 0, "EDEAFB"]);
GameData.Parts.Hair.push(["Mima (2)", 165, 0, 0, 0, 0, "48771A"]);
GameData.Parts.Hair.push(["Reimu (2 Short)", 166, 0, 0, 0, 0, "283960"]);
GameData.Parts.Hair.push(["Rinnosuke (2)", 167, 0, 0, 0, 0, "FBFBFB"]);
GameData.Parts.Hair.push(["Shinki (2 Alt)", 168, 0, 0, 0, 0, "EDEAFB"]);
GameData.Parts.Hair.push(["Rengeteki", 169, 0, 0, 0, 0, "D156D0"]);
GameData.Parts.Hair.push(["Tokiko (2)", 170, 0, 0, 0, 0, "B4CBFE"]);
GameData.Parts.Hair.push(["Sunny Milk (2)", 171, 0, 0, 0, 0, "F7ED8C"]);
GameData.Parts.Hair.push(["Star Sapphire (2A)", 172, 0, 0, 0, 12, "444444"]);
GameData.Parts.Hair.push(["Star Sapphire (2B)", 173, 0, 0, 0, 12, "444444"]);
GameData.Parts.Hair.push(["Hatate", 174, 0, 0, 0, 0, "40351E"]);
GameData.Parts.Hair.push(["Luna Child (2)", 175, 0, 0, 0, 0, "FFFF5E"]);
GameData.Parts.Hair.push(["Akyu (2)", 176, 0, 0, 0, 0, "984499"]);
GameData.Parts.Hair.push(["Rinnosuke (2 Alt)", 177, 0, 0, 0, 0, "FBFBFB"]);
GameData.Parts.Hair.push(["Renko (2)", 178, 0, 0, 0, 0, "634D2E"]);
GameData.Parts.Hair.push(["Marisa (SoEW)", 179, 0, 0, 0, 0, "A22222"]);
GameData.Parts.Hair.push(["Maribel (2)", 180, 0, 0, 0, 0, "FFF177"]);
GameData.Parts.Hair.push(["Sanae (No Snake)", 181, 0, 0, 0, 0, "98F898"]);
GameData.Parts.Hair.push(["Yamame (2)", 182, 0, 0, 0, 0, "FEF1C4"]);
GameData.Parts.Hair.push(["Chiyuri (2)", 183, 0, 0, 0, 0, "FEFD81"]);
GameData.Parts.Hair.push(["Yumemi (2)", 184, 0, 0, 0, 0, "AA2B2B"]);
GameData.Parts.Hair.push(["Reimu (2 Alt)", 185, 0, 0, 0, 0, "283960"]);
GameData.Parts.Hair.push(["Cirno (2 Fire)", 119, 0, 0, 0, 0, "CC0000"]);
GameData.Parts.Hair.push(["Reimu (PC-98 2)", 186, 0, 0, 0, 13, "890099"]);
GameData.Parts.Hair.push(["Keine (2 Alt)", 187, 0, 0, 0, 0, "EAEAEA"]);
GameData.Parts.Hair.push(["Shou (Alt)", 188, 0, 0, 0, 0, "FBFF6C"]);
GameData.Parts.Hair.push(["Zombie Fairy (Alt)", 189, 0, 0, 0, 0, "D9DDFF"]);
GameData.Parts.Hair.push(["Flat", 190, 0, 0, 0, 0, "333333"]);
GameData.Parts.Hair.push(["Spiky", 191, 0, 0, 0, 0, "333333"]);
GameData.Parts.Hair.push(["Tenshi (2A)", 192, 0, 0, 0, 0, "2987C5"]);
GameData.Parts.Hair.push(["Reimu (2 None)", 193, 0, 0, 0, 0, "283960"]);
GameData.Parts.Hair.push(["Reimu (2 Short None)", 194, 0, 0, 0, 0, "283960"]);
GameData.Parts.Hair.push(["Reimu (2 Alt None)", 195, 0, 0, 0, 0, "283960"]);
GameData.Parts.Hair.push(["Fauxhawk", 196, 0, 0, 0, 0, "333333"]);
GameData.Parts.Hair.push(["Iku (2)", 197, 0, 0, 0, 0, "8C75EA"]);
GameData.Parts.Hair.push(["Tenshi (2B)", 198, 0, 0, 0, 0, "2987C5"]);
GameData.Parts.Hair.push(["Sakuya (Inu)", 199, 0, 0, 0, 6, "E6E6E6"]);
GameData.Parts.Hair.push(["Yuugi (2)", 200, 0, 0, 0, 0, "EFDDAF"]);
GameData.Parts.Hair.push(["Kisume (2A)", 201, 0, 0, 0, 0, "20AD79"]);
GameData.Parts.Hair.push(["Kisume (2B)", 202, 0, 0, 0, 0, "20AD79"]);
GameData.Parts.Hair.push(["Parsee (2)", 203, 0, 0, 0, 0, "F9E586"]);
GameData.Parts.Hair.push(["Utsuho (2)", 204, 0, 0, 0, 0, "3C3C3C"]);
GameData.Parts.Hair.push(["Orin (2)", 205, 0, 0, 0, 0, "D76464"]);
GameData.Parts.Hair.push(["Satori (2)", 206, 0, 0, 0, 0, "E3BBFF"]);
GameData.Parts.Hair.push(["Sin Sack", 207, 0, 0, 0, 0, "C0FFEE"]);
GameData.Parts.Hair.push(["Koishi (2)", 208, 0, 0, 0, 0, "DFFDE1"]);
GameData.Parts.Hair.push(["Mohawk", 209, 0, 0, 0, 0, "298975"]);
GameData.Parts.Hair.push(["Kasen", 210, 0, 0, 0, 0, "DA5899"]);
GameData.Parts.Hair.push(["Pigtail", 211, 0, 0, 0, 0, "B30000"]);
GameData.Parts.Hair.push(["Mitori", 212, 0, 0, 0, 0, "EF8F8F"]);
GameData.Parts.Hair.push(["Sasha", 213, 0, 0, 0, 0, "7EC3FA"]);
GameData.Parts.Hair.push(["Sakuya (Inu Alt)", 214, 0, 0, 0, 0, "E6E6E6"]);
GameData.Parts.Hair.push(["Yorihime (2)", 215, 0, 0, 0, 0, "D6CBDE"]);
GameData.Parts.Hair.push(["Toyohime (2)", 216, 0, 0, 0, 0, "FEEDB9"]);
GameData.Parts.Hair.push(["Youki (2)", 217, 0, 0, 0, 0, "F7F7F7"]);
GameData.Parts.Hair.push(["Alice (PC-98)(2)", 218, 0, 0, 0, 0, "FEFE54"]);
GameData.Parts.Hair.push(["Kurumi (2)", 219, 0, 0, 0, 0, "FFFF77"]);
GameData.Parts.Hair.push(["Marisa (PC-98)(2)", 220, 0, 0, 0, 0, "FEFE54"]);
GameData.Parts.Hair.push(["Luize (2)", 221, 0, 0, 0, 0, "FEFDAB"]);
GameData.Parts.Hair.push(["Yumeko (2)", 222, 0, 0, 0, 0, "FEFE70"]);
GameData.Parts.Hair.push(["Ruukoto (2)", 223, 0, 0, 0, 0, "70FE70"]);
GameData.Parts.Hair.push(["Sasha (Alt)", 224, 0, 0, 0, 0, "7EC3FA"]);
GameData.Parts.Hair.push(["Mugetsu (2)", 225, 0, 0, 0, 0, "FEFD89"]);
GameData.Parts.Hair.push(["Gengetsu (2)", 226, 0, 0, 0, 0, "FFFF5E"]);
GameData.Parts.Hair.push(["Sariel (2A)", 227, 0, 0, 0, 0, "DDDDFF"]);
GameData.Parts.Hair.push(["Sariel (2B)", 228, 0, 0, 0, 0, "DDDDFF"]);
GameData.Parts.Hair.push(["Konngara (2A)", 229, 0, 0, 0, 0, "3C3C3C"]);
GameData.Parts.Hair.push(["Konngara (2B)", 230, 0, 0, 0, 0, "3C3C3C"]);
GameData.Parts.Hair.push(["Konngara (2C)", 231, 0, 0, 0, 0, "3C3C3C"]);
GameData.Parts.Hair.push(["Kotohime (2)", 232, 0, 0, 0, 14, "BF0000"]);
GameData.Parts.Hair.push(["Orange (2A)", 233, 0, 0, 0, 0, "EB585A"]);
GameData.Parts.Hair.push(["Orange (2B)", 234, 0, 0, 0, 0, "EB585A"]);
GameData.Parts.Hair.push(["Rikako (2)", 235, 0, 0, 0, 0, "980198"]);
GameData.Parts.Hair.push(["Headless", 236, 0, 0, 0, 0, "C0FFEE"]);
GameData.Parts.Hair.push(["Rika (2A)", 237, 0, 0, 0, 0, "7A380E"]);
GameData.Parts.Hair.push(["Rika (2B)", 238, 0, 0, 0, 0, "7A380E"]);
GameData.Parts.Hair.push(["Yuki (2)", 239, 0, 0, 0, 0, "FEFE54"]);
GameData.Parts.Hair.push(["VIVIT (2)", 240, 0, 0, 0, 0, "ED5F5F"]);
GameData.Parts.Hair.push(["Mai (2)", 241, 0, 0, 0, 0, "ABABFE"]);
GameData.Parts.Hair.push(["Ellen (2)", 242, 0, 0, 0, 0, "FEFD92"]);
GameData.Parts.Hair.push(["Kana (2)", 243, 0, 0, 0, 0, "FFFFA2"]);
GameData.Parts.Hair.push(["Elly (2)", 244, 0, 0, 0, 0, "FFFF88"]);
GameData.Parts.Hair.push(["Sara (2)", 245, 0, 0, 0, 0, "EFABBA"]);
GameData.Parts.Hair.push(["Meira (2)", 246, 0, 0, 0, 0, "B835B9"]);
GameData.Parts.Hair.push(["Elis (2)", 247, 0, 0, 0, 0, "EEED09"]);
GameData.Parts.Hair.push(["Shingyoku F (2)", 248, 0, 0, 0, 0, "D22D2D"]);
GameData.Parts.Hair.push(["Shingyoku M (2)", 249, 0, 0, 0, 0, "393939"]);
GameData.Parts.Hair.push(["Yuka (PJ\'s 2)", 250, 0, 0, 0, 0, "23AB23"]);
GameData.Parts.Hair.push(["Yukari (PCB 2)", 251, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Nazrin (2)", 252, 0, 0, 0, 0, "969696"]);
GameData.Parts.Hair.push(["Kogasa (2)", 253, 0, 0, 0, 0, "6AA8AE"]);
GameData.Parts.Hair.push(["Yukari (2)", 254, 0, 0, 0, 7, "FFFF80"]);
GameData.Parts.Hair.push(["Ichirin (2)", 255, 0, 0, 0, 0, "B8BCE0"]);
GameData.Parts.Hair.push(["Shanghai (2)", 256, 0, 0, 0, 0, "FFFF80"]);
GameData.Parts.Hair.push(["Kyouko", 257, 0, 0, 0, 0, "007075"]);
GameData.Parts.Hair.push(["Yoshika", 258, 0, 0, 0, 0, "5E6283"]);
GameData.Parts.Hair.push(["Seiga", 259, 0, 0, 0, 0, "3D6EA1"]);
GameData.Parts.Hair.push(["Tojiko", 260, 0, 0, 0, 0, "C5D1AF"]);
GameData.Parts.Hair.push(["Futo", 261, 0, 0, 0, 0, "A8A8A8"]);
GameData.Parts.Hair.push(["Miko", 262, 0, 0, 0, 0, "C3B594"]);
GameData.Parts.Hair.push(["Mamizou", 263, 0, 0, 0, 0, "8A5D5D"]);
GameData.Parts.Hair.push(["Kosuzu", 264, 0, 0, 0, 0, "E7776B"]);
GameData.Parts.Hair.push(["Wakasagihime", 265, 0, 0, 0, 0, "01597E"]);
GameData.Parts.Hair.push(["Sekibanki", 266, 0, 0, 0, 0, "EC0202"]);
GameData.Parts.Hair.push(["Kagerou", 267, 0, 0, 0, 0, "3C0000"]);
GameData.Parts.Hair.push(["Kokoro", 268, 0, 0, 0, 0, "F0B9CA"]);
GameData.Parts.Hair.push(["Benben", 269, 0, 0, 0, 0, "ABA1CA"]);
GameData.Parts.Hair.push(["Yatsuhashi", 270, 0, 0, 0, 0, "7E604E"]);
GameData.Parts.Hair.push(["Seija", 271, 0, 0, 0, 0, "BB0000"]);
GameData.Parts.Hair.push(["Seija (Alt)", 272, 0, 0, 0, 0, "262626"]);
GameData.Parts.Hair.push(["Shinmyoumaru", 273, 0, 0, 0, 0, "8D8AB0"]);
GameData.Parts.Hair.push(["Raiko", 274, 0, 0, 0, 0, "C04545"]);
GameData.Parts.Hair.push(["Seiran", 275, 0, 0, 0, 0, "549DE7"]);
GameData.Parts.Hair.push(["Ringo", 276, 0, 0, 0, 0, "B2A249"]);
GameData.Parts.Hair.push(["Doremy", 277, 0, 0, 0, 0, "3343CC"]);
GameData.Parts.Hair.push(["Sumireko", 278, 0, 0, 0, 0, "634D2E"]);
GameData.Parts.Hair.push("random");
GameData.Parts.Eyes = new Array();
GameData.Parts.Eyes.push(["Eye 1", 1, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 2", 2, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 3", 3, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 4", 4, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 5", 5, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 6", 6, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 7", 7, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 8", 8, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 9", 9, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 10", 10, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 11", 11, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 12", 12, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 13", 13, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 14", 14, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 15", 15, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 16", 16, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 17", 17, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 18", 18, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 19", 19, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 20", 20, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 21", 21, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 22", 22, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 23", 23, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 24", 24, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 25", 25, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 26", 26, 0, 7, 0, 1]);
GameData.Parts.Eyes.push(["Eye 27", 27, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 28", 28, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 29", 29, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 30", 30, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 31", 31, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 32", 32, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 33", 33, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 34", 34, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 35", 35, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 36", 36, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 37", 37, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 38", 38, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 39", 39, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 40", 40, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 41", 41, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 42", 42, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 43", 43, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 44", 44, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 45", 45, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 46", 46, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 47", 47, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 48", 48, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 49", 49, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 50", 50, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 51", 51, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 52", 52, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 53", 53, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 54", 54, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 55", 55, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 56", 56, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 57", 57, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 58", 58, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 59", 59, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 60", 60, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 61", 61, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 62", 62, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 63", 63, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 64", 64, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 65", 65, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 66", 66, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 67", 67, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 68", 68, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 69", 69, 0, 7, 0, 2]);
GameData.Parts.Eyes.push(["Eye 70", 70, 0, 7, 0, 3]);
GameData.Parts.Eyes.push(["Eye 71", 71, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 72", 72, 0, 7, 0, 4]);
GameData.Parts.Eyes.push(["Eye 73", 73, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 74", 74, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 75", 75, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 76", 76, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 77", 77, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 78", 78, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 79", 79, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 80", 80, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 81", 81, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 82", 82, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 83", 83, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 84", 84, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 85", 85, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 86", 86, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 87", 87, 0, 7, 0, 5]);
GameData.Parts.Eyes.push(["Eye 88", 88, 0, 0, 0, 0]);
GameData.Parts.Eyes.push(["Eye 89", 89, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 90", 90, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 91", 91, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 92", 92, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 93", 93, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 94", 94, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 95", 95, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 96", 96, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 97", 97, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 98", 98, 0, 7, 0, 6]);
GameData.Parts.Eyes.push(["Eye 99", 99, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 100", 100, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 101", 101, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 102", 102, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 103", 103, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 104", 104, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 105", 105, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 106", 106, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 107", 107, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 108", 108, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 109", 109, 0, 7, 0, 7]);
GameData.Parts.Eyes.push(["Eye 110", 110, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 111", 111, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 112", 112, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 113", 113, 0, 7, 0, 2]);
GameData.Parts.Eyes.push(["Eye 114", 114, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 115", 115, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 116", 116, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 117", 117, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 118", 118, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 119", 119, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 120", 120, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 121", 121, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 122", 122, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 123", 123, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 124", 124, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 125", 125, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 126", 126, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 127", 127, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 128", 128, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 129 (None)", 129, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 130", 130, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 131", 131, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 132", 132, 0, 7, 0, 0]);
GameData.Parts.Eyes.push(["Eye 133", 133, 0, 7, 0, 0]);
GameData.Parts.Eyes.push("random");
GameData.Parts.Mouth = new Array();
GameData.Parts.Mouth.push("none");
GameData.Parts.Mouth.push(["Mouth 1", 1, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 2", 2, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 3", 3, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 4", 4, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 5", 5, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 6", 6, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 7", 7, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 8", 8, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 9", 9, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 10", 10, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 11", 11, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 12", 12, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 13", 13, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 14", 14, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 15", 15, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 16", 16, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 17", 17, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 18", 18, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 19", 19, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 20", 20, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 21", 21, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 22", 22, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 23", 23, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 24", 24, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 25", 25, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 26", 26, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 27", 27, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 28", 28, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 29", 29, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 30", 30, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 31", 31, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 32", 32, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 33", 33, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 34", 34, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 35", 35, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 36", 36, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 37", 37, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 38", 38, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 39", 39, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 40", 40, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 41", 41, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 42", 42, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 43", 43, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 44", 44, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 45", 45, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 46", 46, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 47", 47, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 48", 48, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 49", 49, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 50", 50, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 51", 51, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 52", 52, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 53", 53, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 54", 54, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 55", 55, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 56", 56, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 57", 57, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 58", 58, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 59", 59, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 60", 60, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 61", 61, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 62", 62, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 63", 63, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 64", 64, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 65", 65, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 66", 66, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 67", 67, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 68", 68, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 69", 69, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 70", 70, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 71", 71, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 72", 72, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 73", 73, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 74", 74, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 75", 75, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 76", 76, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 77", 77, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 78", 78, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 79", 79, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 80", 80, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 81", 81, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 82", 82, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 83", 83, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 84", 84, 0, 0, 0]);
GameData.Parts.Mouth.push(["Mouth 85", 85, 0, 0, 0]);
GameData.Parts.Mouth.push("random");
GameData.BGs = new Array();
GameData.BGs.push("none");
GameData.BGs.push(["Scarlet Mansion", 1]);
GameData.BGs.push(["Flandre\'s Room", 2]);
GameData.BGs.push(["Yukari\'s Bedroom", 3]);
GameData.BGs.push(["Yukari\'s House", 4]);
GameData.BGs.push(["Yukari\'s Yard", 5]);
GameData.BGs.push(["Scarlet Library", 6]);
GameData.BGs.push(["Night Mountain", 7]);
GameData.BGs.push(["Magic Forest", 8]);
GameData.BGs.push(["Marisa\'s House", 9]);
GameData.BGs.push(["Hakurei Shrine", 10]);
GameData.BGs.push(["Alice\'s Room", 11]);
GameData.BGs.push(["Alice\'s House", 12]);
GameData.BGs.push(["Yuyuko\'s Hallway", 13]);
GameData.BGs.push(["Yuyuko\'s Kitchen", 14]);
GameData.BGs.push(["Sakura Tree 1", 15]);
GameData.BGs.push(["Sakura Tree 2", 16]);
GameData.BGs.push(["Shrine Day", 25]);
GameData.BGs.push(["Shrine Night", 17]);
GameData.BGs.push(["Bamboo Forest", 18]);
GameData.BGs.push(["K-1 Classroom 1", 19]);
GameData.BGs.push(["K-1 Classroom 2", 20]);
GameData.BGs.push(["K-1 Classroom 3", 21]);
GameData.BGs.push(["K-1 Classroom 4", 22]);
GameData.BGs.push(["Snow Field", 23]);
GameData.BGs.push(["Bar", 24]);
GameData.BGs.push(["Reimu Burger Register", 26]);
GameData.BGs.push(["Reimu Burger Kitchen", 27]);
GameData.BGs.push(["Reimu Burger Diner", 28]);
GameData.BGs.push(["Reimu Burger Dead End", 30]);
GameData.BGs.push(["Reimu Burger Hallway", 31]);
GameData.BGs.push(["Cruise Ship Entrance", 32]);
GameData.BGs.push(["Cruise Ship Room", 33]);
GameData.BGs.push(["Cruise Ship Deck", 34]);
GameData.BGs.push(["The Dock", 35]);
GameData.BGs.push(["More Forest", 36]);
GameData.BGs.push(["Bamboo Forest Zoom!", 37]);
GameData.BGs.push(["Desktop", 38]);
GameData.BGs.push(["Random Color", 39]);
GameData.BGs.push(["Fusion Lab", 40]);
GameData.BGs.push(["Open Field", 41]);
GameData.BGs.push(["Open Field Dusk", 42]);
GameData.BGs.push(["Aya\'s House", 43]);
GameData.BGs.push(["Random Field", 44]);
GameData.BGs.push(["Scarlet X-Mas Tree", 45]);
GameData.BGs.push(["Reimu\'s Room", 46]);
GameData.BGs.push(["Reimu Burger X-Mas", 47]);
GameData.BGs.push(["Reimu\'s X-Mas Room", 48]);
GameData.BGs.push(["Empty Room", 49]);
GameData.BGs.push(["Sketchy Room", 50]);
GameData.BGs.push(["Sketchy Boxing Ring", 51]);
GameData.BGs.push(["Sketchy Field", 52]);
GameData.BGs.push(["Sketchy Snowfield", 53]);
GameData.BGs.push(["Sketchy BG", 54]);
GameData.BGs.push(["Sketchy Reimu\'s Room", 55]);
GameData.BGs.push(["Moriya Shrine Steps", 56]);
GameData.BGs.push(["Moriya Shrine Room", 57]);
GameData.BGs.push(["Moriya Shrine Yard", 58]);
GameData.BGs.push(["Moriya Shrine Opening", 59]);
GameData.BGs.push(["Moriya Shrine Room", 60]);
GameData.BGs.push(["It\'s a forest again", 61]);
GameData.BGs.push(["And another forest!", 62]);
GameData.BGs.push(["End of Gensokyo", 63]);
GameData.BGs.push(["Yuka Fight!!", 64]);
GameData.BGs.push(["Reimu\'s Door", 65]);
GameData.BGs.push(["Reimu\'s Door Open", 75]);
GameData.BGs.push(["Moriya Shrine Door", 66]);
GameData.BGs.push(["Alice in the Forest", 67]);
GameData.BGs.push(["Boxing Ring", 68]);
GameData.BGs.push(["Island", 69]);
GameData.BGs.push(["Saigyou Ayakashi", 70]);
GameData.BGs.push(["Imageboard", 71]);
GameData.BGs.push(["Yard with Chairs", 72]);
GameData.BGs.push(["Moriya Kotatsu", 73]);
GameData.BGs.push(["Hakurei Shrine Door", 74]);
GameData.BGs.push(["Death by Yuyuko", 76]);
GameData.BGs.push(["Reimu Burger Outside", 77]);
GameData.BGs.push(["MikoMart Outside", 78]);
GameData.BGs.push(["MikoMart Inside", 79]);
GameData.BGs.push(["MikoMart Outside 2", 80]);
GameData.BGs.push(["Reimu\'s Room Again", 81]);
GameData.BGs.push(["Shrine Exterior", 82]);
GameData.BGs.push(["Hakugyokurou", 83]);
GameData.BGs.push(["Some Mountain", 84]);
GameData.BGs.push(["Generic Sky", 85]);
GameData.BGs.push(["Mansion Gates", 86]);
GameData.BGs.push(["Mansion Path", 87]);
GameData.BGs.push(["Scarlet Hallway", 88]);
GameData.BGs.push(["The Moon", 89]);
GameData.BGs.push(["Beach", 90]);
GameData.BGs.push(["School Hallway", 91]);
GameData.BGs.push(["Mini-Stage", 92]);
GameData.BGs.push(["Pond", 93]);
GameData.BGs.push(["Another Field", 94]);
GameData.BGs.push(["Marisa\'s House 2", 95]);
GameData.BGs.push(["Nuclear Sector", 96]);
GameData.BGs.push(["Graveyard", 97]);
GameData.BGs.push(["Underground Cave", 98]);
GameData.BGs.push(["M. Shrine (No Signs)", 99]);
GameData.BGs.push(["M. Shrine (Snow)", 100]);
GameData.BGs.push(["River", 101]);
GameData.BGs.push(["Dark Room", 102]);
GameData.BGs.push(["City Street", 103]);
GameData.BGs.push(["Eientei", 104]);
GameData.BGs.push(["Green Tatami", 105]);
GameData.BGs.push(["Kourindou", 106]);
GameData.BGs.push(["Nines", 107]);
GameData.BGs.push(["Hearts", 108]);
GameData.BGs.push(["The Heavens", 109]);
GameData.BGs.push(["Trees n\' Grass", 110]);
GameData.BGs.push(["Basement Sideview", 111]);
GameData.BGs.push(["K-1 Classroom 5", 112]);
GameData.BGs.push(["K-1 Classroom 6", 113]);
GameData.BGs.push(["Scarlet Library 2", 114]);
GameData.BGs.push(["Scarlet Lib. Door", 115]);
GameData.BGs.push(["S.Ayakashi (Dead)", 116]);
GameData.BGs.push(["Onbashiras (Night)", 117]);
GameData.BGs.push(["Mountain Silhouette", 118]);
GameData.BGs.push(["S.Ayakashi (Dead2)", 119]);
GameData.BGs.push(["Onbashiras (Day)", 120]);
GameData.BGs.push(["Snowy", 121]);
GameData.BGs.push(["Autumn 1", 122]);
GameData.BGs.push(["General classroom", 123]);
GameData.BGs.push(["Lakeside", 124]);
GameData.BGs.push(["Lakeside (Snowy)", 125]);
GameData.BGs.push(["Cartoony Background", 126]);
GameData.BGs.push(["Makai", 127]);
GameData.BGs.push(["Houkai", 128]);
GameData.BGs.push(["Clocktower", 129]);
GameData.BGs.push(["Murasa\'s Ship", 130]);
GameData.BGs.push(["Murasa\'s Ship (2)", 131]);
GameData.BGs.push(["Geyser", 132]);
GameData.BGs.push(["Geyser (2)", 133]);
GameData.BGs.push(["Autumn 2", 134]);
GameData.BGs.push(["Mountain Sunset", 135]);
GameData.BGs.push(["Hakurei Shrine (IaMP)", 136]);
GameData.BGs.push(["Hakurei Shrine Night", 137]);
GameData.BGs.push(["Shrine Tori", 138]);
GameData.BGs.push(["Shrine Tori 2", 139]);
GameData.BGs.push(["SDM outside", 140]);
GameData.BGs.push(["Frozen Lake", 141]);
GameData.BGs.push(["Prismriver Fight", 142]);
GameData.BGs.push(["SDM gate", 143]);
GameData.BGs.push(["SDM Side", 144]);
GameData.BGs.push(["Utsuho Stage", 145]);
GameData.BGs.push(["Mountain Steps", 146]);
GameData.BGs.push(["Crater", 147]);
GameData.BGs.push(["Nameless Hill", 148]);
GameData.BGs.push(["Nameless Hill 2", 149]);
GameData.BGs.push(["Marisa\'s House 3", 150]);
GameData.BGs.push(["Sunset Branches", 151]);
GameData.BGs.push(["Yin-Yang Lift", 152]);
GameData.BGs.push(["Destroyed Shrine 1", 153]);
GameData.BGs.push(["Destroyed Shrine 2", 154]);
GameData.BGs.push(["Sunflower Field", 155]);
GameData.BGs.push(["Alice\'s House 2", 156]);
GameData.BGs.push(["SDM Balcony", 157]);
GameData.BGs.push(["Waterfall", 158]);
GameData.BGs.push(["Outer Space 1", 159]);
GameData.BGs.push(["Outer Space 2", 160]);
GameData.BGs.push(["Spaceship Inside 1", 161]);
GameData.BGs.push(["Spaceship Inside 2", 162]);
GameData.BGs.push(["Red Moon", 163]);
GameData.BGs.push(["Lake Suwa", 164]);
GameData.BGs.push(["SDM Throne Room", 165]);
GameData.BGs.push(["Hakurei Shrine (Border)", 166]);
GameData.BGs.push(["Scarlet Hallway 2", 167]);
GameData.BGs.push(["Eientei Hallway", 168]);
GameData.BGs.push(["Moon Corridor", 169]);
GameData.BGs.push(["Gothic Cemetery", 170]);
GameData.BGs.push(["Mountain Waterfall", 171]);
GameData.BGs.push(["Courtroom", 172]);
GameData.BGs.push(["Hell of Blazing Fires", 173]);
GameData.BGs.push(["Kourindou Outside", 174]);
GameData.BGs.push(["Zen Garden Night", 175]);
GameData.BGs.push(["Zen Garden Day", 176]);
GameData.BGs.push(["Zen Garden Snow", 177]);
GameData.BGs.push(["Scarlet Bedroom", 178]);
GameData.BGs.push(["Swirly Vortex", 179]);
GameData.BGs.push(["Yukari\'s Gap", 180]);
GameData.BGs.push(["Tennis Court", 181]);
GameData.BGs.push(["Cathedral", 182]);
GameData.BGs.push(["Underground Mine", 183]);
GameData.BGs.push(["Computer Grid", 184]);
GameData.BGs.push(["Eientei Outside", 185]);
GameData.BGs.push(["Eientei Courtyard", 186]);
GameData.BGs.push(["Waterfall (Spring)", 187]);
GameData.BGs.push(["Alice\'s Room 2", 188]);
GameData.BGs.push(["Lunar Capital", 189]);
GameData.BGs.push(["Stairs", 190]);
GameData.BGs.push(["Newspaper Template", 191]);
GameData.BGs.push(["Under the Sea", 192]);
GameData.BGs.push(["Shrine Entrance", 193]);
GameData.BGs.push(["Street Intersection", 194]);
GameData.BGs.push(["Dancefloor", 195]);
GameData.BGs.push(["TV Static", 196]);
GameData.BGs.push(["Ship Deck", 197]);
GameData.BGs.push(["Gaia Library", 198]);
GameData.BGs.push(["SDM Library", 199]);
GameData.BGs.push(["Mushroom Forest", 200]);
GameData.BGs.push(["Ruined Red Shrine", 201]);
GameData.BGs.push(["Human Village", 202]);
GameData.BGs.push(["Bar 2", 203]);
GameData.BGs.push(["Cathedral Ruins", 204]);
GameData.BGs.push(["Forest Night 1", 205]);
GameData.BGs.push(["Forest Night 2", 206]);
GameData.BGs.push(["Lunar Capital Interior", 207]);
GameData.BGs.push(["Basketball Court", 208]);
GameData.BGs.push(["Spider Web", 209]);
GameData.BGs.push(["Field (Day)", 210]);
GameData.BGs.push(["Field (Sunset)", 211]);
GameData.BGs.push(["Field (Night)", 212]);
GameData.BGs.push(["Clocktower (Sunset)", 213]);
GameData.BGs.push(["Clocktower (Night)", 214]);
GameData.BGs.push(["Earth from Space", 215]);
GameData.BGs.push(["Cathedral (Red)", 216]);
GameData.BGs.push(["Ten Desires Stage 4", 217]);
GameData.BGs.push(["Myouren Temple Path", 218]);
GameData.BGs.push("random");
GameData.ObjectArray = new Array();
GameData.ObjectArray.push(["TV Set", 1, 4, 1, -6]);
GameData.ObjectArray.push(["Miko\'s Computer", 2, 5, 0, -2]);
GameData.ObjectArray.push(["Aya Box", 3, 5, 0, -5]);
GameData.ObjectArray.push(["Sketchy Comp", 4, 5, 2, -3]);
GameData.ObjectArray.push(["Robotic Arm", 5, 0, 4, 0]);
GameData.ObjectArray.push(["Grill", 6, 6, -1, -2]);
GameData.ObjectArray.push(["Cash Register", 7, 5, 0, -3]);
GameData.ObjectArray.push(["Barstool", 8, 3, 0, 0]);
GameData.ObjectArray.push(["Bar Counter", 9, 6, 0, -4]);
GameData.ObjectArray.push(["Pet Bunny", 10, 5, 0, 0]);
GameData.ObjectArray.push(["Shanghai", 11, 5, 0, 0]);
GameData.ObjectArray.push(["Myon", 12, 5, 0, 0]);
GameData.ObjectArray.push(["Mic Stand", 13, 5, 0, 0]);
GameData.ObjectArray.push(["Chen ", 14, 5, 0, 0]);
GameData.ObjectArray.push(["Chen 2", 15, 5, 0, 0]);
GameData.ObjectArray.push(["Chen 3", 17, 5, 0, 0]);
GameData.ObjectArray.push(["FOE", 16, 5, 0, 0]);
GameData.ObjectArray.push(["Robot", 18, 5, 0, 0]);
GameData.ObjectArray.push(["Box", 19, 5, 0, 0]);
GameData.ObjectArray.push(["Chair", 20, 5, 0, -2]);
GameData.ObjectArray.push(["Frozen Frog", 21, 5, 0, 0]);
GameData.ObjectArray.push(["Watermelon", 22, 5, 0, 0]);
GameData.ObjectArray.push(["Moriya Kotatsu", 23, 5, 0, -3]);
GameData.ObjectArray.push(["Twuck", 24, 4, 0, 5]);
GameData.ObjectArray.push(["Gungnir", 25, 3, 0, -3]);
GameData.ObjectArray.push(["Sigh Breath", 26, 5, 0, 0]);
GameData.ObjectArray.push(["Aya\'s Cabinet", 27, 6, 0, -3]);
GameData.ObjectArray.push(["Aya\'s Computer", 28, 5, 0, -5]);
GameData.ObjectArray.push(["Ayangelion", 29, 4, 2, -6]);
GameData.ObjectArray.push(["Cirno Suika", 30, 5, 2, -6]);
GameData.ObjectArray.push(["Refrigerator", 31, 5, 1, -4]);
GameData.ObjectArray.push(["Ikubi Akius", 32, 5, 3, -6]);
GameData.ObjectArray.push(["M.Mart Counter", 33, 5, 3, -4]);
GameData.ObjectArray.push(["Radio", 34, 5, 3, 5]);
GameData.ObjectArray.push(["Reimu\'s Kotatsu", 35, 5, 0, 0]);
GameData.ObjectArray.push(["Burger Table", 36, 5, 0, -3]);
GameData.ObjectArray.push(["Sakura Tree", 37, 5, 3, -5]);
GameData.ObjectArray.push(["Sliding Door", 38, 5, 0, -5]);
GameData.ObjectArray.push(["Trash Can", 39, 5, 2, 0]);
GameData.ObjectArray.push(["Suzuran", 40, 5, 0, 5]);
GameData.ObjectArray.push(["Some Flower", 41, 5, 0, 0]);
GameData.ObjectArray.push(["Sunflower", 42, 5, 0, 0]);
GameData.ObjectArray.push(["Miko Stick", 43, 5, 0, 0]);
GameData.ObjectArray.push(["Youkai Warhead", 44, 5, 0, -3]);
GameData.ObjectArray.push(["Blanket", 45, 5, 0, -3]);
GameData.ObjectArray.push(["Matress", 46, 5, 0, -3]);
GameData.ObjectArray.push(["Rain Cloud", 47, 5, 0, -3]);
GameData.ObjectArray.push(["Fire", 48, 5, 0, -3]);
GameData.ObjectArray.push(["Light", 49, 5, 3, -7]);
GameData.ObjectArray.push(["Gap", 50, 5, 0, -3]);
GameData.ObjectArray.push(["Comic Panel", 51, 5, 0, -3]);
GameData.ObjectArray.push(["Point Item", 52, 5, 0, 5]);
GameData.ObjectArray.push(["Powerup Item", 53, 5, 0, 5]);
GameData.ObjectArray.push(["Pong Paddle", 54, 5, 0, -3]);
GameData.ObjectArray.push(["Barrier", 55, 5, 0, -4]);
GameData.ObjectArray.push(["Bullet (Yukari\'s)", 56, 5, 0, 5]);
GameData.ObjectArray.push(["Bullet 01", 57, 5, 0, 20]);
GameData.ObjectArray.push(["Bullet 02", 58, 5, 0, 20]);
GameData.ObjectArray.push(["Bullet 03", 59, 5, 0, 20]);
GameData.ObjectArray.push(["Bullet 04", 60, 5, 0, 20]);
GameData.ObjectArray.push(["Bullet 05", 61, 5, 0, 30]);
GameData.ObjectArray.push(["Bullet 06", 62, 5, 0, 20]);
GameData.ObjectArray.push(["Bullet 07", 63, 5, 0, 20]);
GameData.ObjectArray.push(["Bullet (Yin-Yang)", 64, 5, 0, 20]);
GameData.ObjectArray.push(["Amulet", 65, 5, 0, 15]);
GameData.ObjectArray.push(["Bullet (Knife)", 66, 5, 0, 5]);
GameData.ObjectArray.push(["Levatein", 67, 5, 0, 0]);
GameData.ObjectArray.push(["Camera", 68, 5, 0, 5]);
GameData.ObjectArray.push(["Bullet (Ice)", 69, 5, 0, 30]);
GameData.ObjectArray.push(["Witch Broom", 70, 0, 0, 0]);
GameData.ObjectArray.push(["Crescent Spear", 71, 0, 0, 0]);
GameData.ObjectArray.push(["Youmu Sword", 72, 5, 0, 0]);
GameData.ObjectArray.push(["Dark Sword", 73, 5, 0, 0]);
GameData.ObjectArray.push(["Arms (Ran\'s)", 74, 5, 0, 10]);
GameData.ObjectArray.push(["Basket", 75, 5, 0, 10]);
GameData.ObjectArray.push(["Bucket", 76, 5, 0, 0]);
GameData.ObjectArray.push(["Wanted Poster", 77, 5, 0, -3]);
GameData.ObjectArray.push(["Tenshi\'s Rock", 78, 5, 2, 0]);
GameData.ObjectArray.push(["Cloud", 79, 5, 0, -3]);
GameData.ObjectArray.push(["Tenshi\'s Sword", 80, 5, 0, 0]);
GameData.ObjectArray.push(["Rocket", 81, 5, 2, 0]);
GameData.ObjectArray.push(["Evil Eye Sigma", 82, 5, 0, -3]);
GameData.ObjectArray.push(["Darkness", 83, 5, 0, -3]);
GameData.ObjectArray.push(["Sketchy M.Spark", 84, -3, 0, -3]);
GameData.ObjectArray.push(["Arms (Extended)", 85, 5, 0, 2]);
GameData.ObjectArray.push(["Steamroller", 86, 5, 0, -4]);
GameData.ObjectArray.push(["Donation Box", 87, 5, 0, 0]);
GameData.ObjectArray.push(["Cat", 88, 5, 0, 0]);
GameData.ObjectArray.push(["Clock", 89, 5, 2, 0]);
GameData.ObjectArray.push(["Cat-on-a-Cup", 90, 5, 2, 2]);
GameData.ObjectArray.push(["Lemonade Pitcher", 91, 5, 2, 1]);
GameData.ObjectArray.push(["Product Stand", 92, 5, 2, -3]);
GameData.ObjectArray.push(["Kendama", 93, 5, 0, 0]);
GameData.ObjectArray.push(["Master Spark!!", 94, 0, 0, -9]);
GameData.ObjectArray.push(["Censor Bar", 95, 5, 0, 0]);
GameData.ObjectArray.push(["Sparkler", 96, 5, 0, 6]);
GameData.ObjectArray.push(["Outdoor Grill", 97, 5, 5, -3]);
GameData.ObjectArray.push(["Beach Umbrella", 98, 5, -5, -1]);
GameData.ObjectArray.push(["Beach Blanket", 99, 5, 0, 0]);
GameData.ObjectArray.push(["Sandcastle", 100, 5, 0, 4]);
GameData.ObjectArray.push(["Meat Patty", 101, 5, 0, 6]);
GameData.ObjectArray.push(["Inner Tube", 102, 5, 0, 3]);
GameData.ObjectArray.push(["Sign", 103, 5, 0, 3]);
GameData.ObjectArray.push(["Puddle", 104, 5, 0, 0]);
GameData.ObjectArray.push(["Umbrella", 105, 5, 2, -3]);
GameData.ObjectArray.push(["Nuclear Warning", 106, 5, 0, 3]);
GameData.ObjectArray.push(["Spinning Sun", 107, 5, 2, -3]);
GameData.ObjectArray.push(["Nuclear Reactor", 108, 5, 1, -6]);
GameData.ObjectArray.push(["Skull", 109, 5, 0, 4]);
GameData.ObjectArray.push(["Ghostly Aura", 110, 6, 0, 4]);
GameData.ObjectArray.push(["Wheelbarrow", 111, 5, 0, 0]);
GameData.ObjectArray.push(["Orin", 112, 5, 0, 0]);
GameData.ObjectArray.push(["Gravestone", 113, 5, 0, 0]);
GameData.ObjectArray.push(["Suika\'s Gourd", 114, 5, 0, 1]);
GameData.ObjectArray.push(["Heart With Eye", 115, 5, 0, 1]);
GameData.ObjectArray.push(["Noose", 116, 5, 0, -3]);
GameData.ObjectArray.push(["School Desk", 117, 5, 0, 1]);
GameData.ObjectArray.push(["Lycoris Flower", 118, 5, 0, 2]);
GameData.ObjectArray.push(["Sariel\'s Staff", 119, 5, 0, 2]);
GameData.ObjectArray.push(["Arms (Extended 2)", 120, 5, 0, 2]);
GameData.ObjectArray.push(["Nightstick", 121, 5, 0, 2]);
GameData.ObjectArray.push(["Mini-Hakkero", 122, 5, 0, 4]);
GameData.ObjectArray.push(["Orange\'s Baton", 123, 5, 0, 4]);
GameData.ObjectArray.push(["Test Tube", 124, 5, 0, 4]);
GameData.ObjectArray.push(["Flandre", 125, 5, 0, 0]);
GameData.ObjectArray.push(["Prinny", 126, 5, 0, -1]);
GameData.ObjectArray.push(["Tank", 127, 5, 0, -2]);
GameData.ObjectArray.push(["Flower Tank", 128, 5, 0, -2]);
GameData.ObjectArray.push(["Utsuho\'s Orb", 129, 5, 0, 0]);
GameData.ObjectArray.push(["Arms (Upward)", 130, 5, 0, 0]);
GameData.ObjectArray.push(["Arms (Upward 2)", 131, 5, 0, 0]);
GameData.ObjectArray.push(["Third Leg", 132, 5, 0, 0]);
GameData.ObjectArray.push(["Train Car", 133, 5, 0, -5]);
GameData.ObjectArray.push(["Stained Glass", 134, 5, 0, 0]);
GameData.ObjectArray.push(["Window", 135, 5, 0, 0]);
GameData.ObjectArray.push(["Hands-to-Face ", 136, 5, 0, 0]);
GameData.ObjectArray.push(["Folding Screen", 137, 5, 0, -4]);
GameData.ObjectArray.push(["Dresser", 138, 5, 0, -2]);
GameData.ObjectArray.push(["Store Counter", 139, 5, 0, -4]);
GameData.ObjectArray.push(["Present", 140, 5, 0, 0]);
GameData.ObjectArray.push(["Truck-like Gift", 141, 5, 0, 0]);
GameData.ObjectArray.push(["Christmas Blade", 142, 5, 0, 0]);
GameData.ObjectArray.push(["NEET-hime Staff", 143, 5, 0, 0]);
GameData.ObjectArray.push(["Yukari\'s Tree", 144, 5, 0, -5]);
GameData.ObjectArray.push(["Alice\'s Tree", 145, 5, 0, -5]);
GameData.ObjectArray.push(["Mokou\'s Tree", 146, 5, 0, -5]);
GameData.ObjectArray.push(["Reimu\'s Tree", 147, 5, 0, -5]);
GameData.ObjectArray.push(["XMas Square", 148, 5, 0, -4]);
GameData.ObjectArray.push(["Elly\'s Scythe", 149, 5, 0, -3]);
GameData.ObjectArray.push(["Komachi\'s Scythe", 150, 5, 0, -3]);
GameData.ObjectArray.push(["Meira\'s Sword", 151, 2, 0, 0]);
GameData.ObjectArray.push(["Genji", 152, 5, 0, 0]);
GameData.ObjectArray.push(["Flying Eyeball", 153, 5, 0, 0]);
GameData.ObjectArray.push(["Konngara\'s Sword", 154, 2, 0, 0]);
GameData.ObjectArray.push(["Star Wand", 155, 5, 0, 0]);
GameData.ObjectArray.push(["Yuugen-Magan", 156, 5, 0, 0]);
GameData.ObjectArray.push(["Kikuri", 157, 5, 0, 0]);
GameData.ObjectArray.push(["Pink Pillow", 158, 5, 0, 0]);
GameData.ObjectArray.push(["Teacup+Plate", 159, 5, 0, 0]);
GameData.ObjectArray.push(["Yuka\'s Watch", 160, 5, 0, 0]);
GameData.ObjectArray.push(["Paper Umbrella", 161, 5, 0, 0]);
GameData.ObjectArray.push(["Smoke Pipe", 162, 5, 0, 0]);
GameData.ObjectArray.push(["Brick", 163, 5, 0, 0]);
GameData.ObjectArray.push(["Giant UFO", 164, 5, 0, 0]);
GameData.ObjectArray.push(["Kogasa\'s Umbrella", 165, 5, 10, -4]);
GameData.ObjectArray.push(["Unzan ", 166, 5, 0, 0]);
GameData.ObjectArray.push(["Unzan 2", 167, 5, 0, 0]);
GameData.ObjectArray.push(["Unzan Fist ", 168, 5, 0, 0]);
GameData.ObjectArray.push(["Unzan Fist 2", 169, 5, 0, 0]);
GameData.ObjectArray.push(["Red Cloud", 170, 5, 0, 0]);
GameData.ObjectArray.push(["Spring", 171, 5, 0, 0]);
GameData.ObjectArray.push(["Marisa\'s Wand", 172, 5, 0, 0]);
GameData.ObjectArray.push(["Boxing Chen", 173, 5, 0, 0]);
GameData.ObjectArray.push(["Teacup", 174, 5, 0, 0]);
GameData.ObjectArray.push(["Erhu", 175, 5, 0, 0]);
GameData.ObjectArray.push(["Erhu bow", 176, 5, 0, 0]);
GameData.ObjectArray.push(["Long sleeved", 177, 5, 0, 0]);
GameData.ObjectArray.push(["Short sleeved", 178, 5, 0, 0]);
GameData.ObjectArray.push(["Food Stand", 179, 5, 0, -5]);
GameData.ObjectArray.push(["Arrow", 180, 5, 0, 0]);
GameData.ObjectArray.push(["Morning Star", 181, 5, 0, 0]);
GameData.ObjectArray.push(["Gun", 182, 5, 0, 0]);
GameData.ObjectArray.push(["Halberd", 183, 5, 0, 0]);
GameData.ObjectArray.push(["Hands-to-Face 2", 184, 5, 0, 0]);
GameData.ObjectArray.push(["Frying Pan ", 185, 5, 0, 0]);
GameData.ObjectArray.push(["Frying Pan 2", 186, 5, 0, 0]);
GameData.ObjectArray.push(["Turtle Shell", 187, 5, 0, 0]);
GameData.ObjectArray.push(["Cat Ear (Black)", 188, 5, 0, 0]);
GameData.ObjectArray.push(["Cat Ear (Yellow)", 189, 5, 0, 0]);
GameData.ObjectArray.push(["Cat Ear (White)", 190, 5, 0, 0]);
GameData.ObjectArray.push(["Cat Tail (Black)", 191, 5, 0, 0]);
GameData.ObjectArray.push(["Cat Tail (Yellow)", 192, 5, 0, 0]);
GameData.ObjectArray.push(["Cat Tail (White)", 193, 5, 0, 0]);
GameData.ObjectArray.push(["Dio Sakuya ", 194, 5, 0, -3]);
GameData.ObjectArray.push(["Dio Sakuya 2", 195, 5, 0, -3]);
GameData.ObjectArray.push(["Book", 196, 5, 0, 0]);
GameData.ObjectArray.push(["Grimoire", 197, 5, 0, 0]);
GameData.ObjectArray.push(["Bookcase 1", 198, 5, 0, 0]);
GameData.ObjectArray.push(["Bookcase 2", 199, 5, 0, 0]);
GameData.ObjectArray.push(["Medicine Bottle", 200, 5, 0, 5]);
GameData.ObjectArray.push(["Beaker w/ liquid", 201, 5, 0, 5]);
GameData.ObjectArray.push(["Wireless Mouse", 202, 5, 0, 5]);
GameData.ObjectArray.push(["Hanging Hourai", 203, 5, 0, 0]);
GameData.ObjectArray.push(["Gondola (Outside)", 204, 5, 0, -4]);
GameData.ObjectArray.push(["Gondola (Inside)", 205, 5, 0, -4]);
GameData.ObjectArray.push(["Suwako\'s Hat", 206, 5, 0, 0]);
GameData.ObjectArray.push(["Reisen\'s Ear", 207, 5, 0, 5]);
GameData.ObjectArray.push(["Oar", 208, 5, 0, 3]);
GameData.ObjectArray.push(["Playing Card (Up)", 209, 5, 0, 5]);
GameData.ObjectArray.push(["Playing Card (Down)", 210, 5, 0, 3]);
GameData.ObjectArray.push(["Leaf (Orange)", 211, 5, 0, 5]);
GameData.ObjectArray.push(["Leaf (Green)", 212, 5, 0, 5]);
GameData.ObjectArray.push(["Tenshi\'s Rock 2", 213, 5, 0, 5]);
GameData.ObjectArray.push(["Pentagram", 214, 5, 0, 3]);
GameData.ObjectArray.push(["Butterfly", 215, 5, 0, 3]);
GameData.ObjectArray.push(["Bullet 08", 216, 5, 0, 3]);
GameData.ObjectArray.push(["Bullet 09", 217, 5, 0, 3]);
GameData.ObjectArray.push(["Anchor", 218, 5, 0, 0]);
GameData.ObjectArray.push(["Bullet (Anchor)", 219, 5, 0, 3]);
GameData.ObjectArray.push(["Dipper", 220, 5, 0, 3]);
GameData.ObjectArray.push(["Jeweled Pagoda", 221, 5, 0, 3]);
GameData.ObjectArray.push(["Spear", 222, 5, 0, 3]);
GameData.ObjectArray.push(["Rainbow Scroll", 223, 5, 0, -2]);
GameData.ObjectArray.push(["Catfish", 224, 5, 0, -5]);
GameData.ObjectArray.push(["Bullet 10", 225, 5, 0, 3]);
GameData.ObjectArray.push(["SukuHaku", 226, 5, 0, 3]);
GameData.ObjectArray.push(["Bullet 11", 227, 5, 0, 3]);
GameData.ObjectArray.push(["Star (Pink)", 228, 5, 0, 5]);
GameData.ObjectArray.push(["Star (Green)", 229, 5, 0, 5]);
GameData.ObjectArray.push(["Nue\'s Trident", 230, 5, 0, 5]);
GameData.ObjectArray.push(["Byakuren\'s Aura", 231, 5, 0, 2]);
GameData.ObjectArray.push(["Nue\'s Orb", 232, 5, 0, 5]);
GameData.ObjectArray.push(["UFO (Green)", 233, 5, 0, 5]);
GameData.ObjectArray.push(["UFO (Red)", 234, 5, 0, 5]);
GameData.ObjectArray.push(["UFO (Blue)", 235, 5, 0, 5]);
GameData.ObjectArray.push(["Bat", 236, 5, 0, 3]);
GameData.ObjectArray.push(["Pipe Organ", 237, 5, 0, -2]);
GameData.ObjectArray.push(["Green Tea", 238, 5, 0, 3]);
GameData.ObjectArray.push(["Onigiri", 239, 5, 0, 3]);
GameData.ObjectArray.push(["Empty Plate", 240, 5, 0, 3]);
GameData.ObjectArray.push(["Sushi", 241, 5, 0, 3]);
GameData.ObjectArray.push(["Mushroom", 242, 5, 0, 3]);
GameData.ObjectArray.push(["Low Table", 243, 5, 0, 3]);
GameData.ObjectArray.push(["Komachi\'s Scythe 2", 244, 5, 0, 2]);
GameData.ObjectArray.push(["Tori", 245, 5, 0, 3]);
GameData.ObjectArray.push(["Iku Dance Pose", 246, 5, 0, -1]);
GameData.ObjectArray.push(["Sakuya Throwing", 247, 5, 0, -1]);
GameData.ObjectArray.push(["Lightsaber", 248, 5, 0, 3]);
GameData.ObjectArray.push(["Flute", 249, 5, 0, 3]);
GameData.ObjectArray.push(["Cake", 250, 5, 0, 3]);
GameData.ObjectArray.push(["Coffin", 251, 5, 0, -3]);
GameData.ObjectArray.push(["Coffin Lid", 252, 5, 0, -3]);
GameData.ObjectArray.push(["Sunglasses", 253, 5, 0, 3]);
GameData.ObjectArray.push(["Power-Up!!", 254, 5, 0, -1]);
GameData.ObjectArray.push(["GAR shades", 255, 5, 0, 3]);
GameData.ObjectArray.push(["Hisoutensoku", 256, 5, 0, 0]);
GameData.ObjectArray.push(["Crow", 257, 5, 0, 3]);
GameData.ObjectArray.push(["PikaMarisa", 258, 5, 0, -1]);
GameData.ObjectArray.push(["Pumpkin (Carved)", 259, 5, 0, 3]);
GameData.ObjectArray.push(["Dog Collar+Leash", 260, 5, 0, 3]);
GameData.ObjectArray.push(["Wolf Ear", 261, 5, 0, 3]);
GameData.ObjectArray.push(["Candle", 262, 5, 0, 3]);
GameData.ObjectArray.push(["Mimi-chan", 263, 5, 0, 3]);
GameData.ObjectArray.push(["Hoshizako", 264, 5, 0, 3]);
GameData.ObjectArray.push(["Violin", 265, 5, 0, 3]);
GameData.ObjectArray.push(["Trumpet", 266, 5, 0, 3]);
GameData.ObjectArray.push(["Keyboard", 267, 5, 0, 3]);
GameData.ObjectArray.push(["Apple", 268, 5, 0, 6]);
GameData.ObjectArray.push(["Pad", 269, 5, 0, 3]);
GameData.ObjectArray.push(["Ice Cube", 270, 5, 0, 3]);
GameData.ObjectArray.push(["Byakuren Platform", 271, 5, 0, 3]);
GameData.ObjectArray.push(["Bullet (Needle)", 272, 5, 0, 3]);
GameData.ObjectArray.push(["Electric Guitar", 273, 5, 0, 3]);
GameData.ObjectArray.push(["Djembe", 274, 5, 0, 0]);
GameData.ObjectArray.push(["Drum stick", 275, 5, 0, 3]);
GameData.ObjectArray.push(["Chains of Fate", 276, 0, 0, 3]);
GameData.ObjectArray.push(["Bullet (Knife2)", 277, 5, 0, 3]);
GameData.ObjectArray.push(["Witch\'s Broom 2", 278, 5, 0, 1]);
GameData.ObjectArray.push(["Bullet (Music)", 279, 5, 0, 5]);
GameData.ObjectArray.push(["Bow", 280, 5, 0, 6]);
GameData.ObjectArray.push(["Staff (Sakuya\'s)", 281, 5, 0, 3]);
GameData.ObjectArray.push(["Star Orb", 282, 5, 0, 6]);
GameData.ObjectArray.push(["Bullet (Knife3)", 283, 5, 0, 3]);
GameData.ObjectArray.push(["Staff (Sanae\'s)", 284, 5, 0, 3]);
GameData.ObjectArray.push(["Bullet 12", 285, 5, 0, 3]);
GameData.ObjectArray.push(["EWI", 286, 5, 0, 3]);
GameData.ObjectArray.push(["Game Console", 287, 5, 0, 3]);
GameData.ObjectArray.push(["Game Controller", 288, 5, 0, 3]);
GameData.ObjectArray.push(["Book (Opened)", 289, 5, 0, 3]);
GameData.ObjectArray.push(["Ice Sword", 290, 5, 0, 3]);
GameData.ObjectArray.push(["Umbrella Closed", 291, 5, 0, 3]);
GameData.ObjectArray.push(["Chessboard", 292, 5, 0, 3]);
GameData.ObjectArray.push(["Hypnotic eyes", 293, 5, 0, 3]);
GameData.ObjectArray.push(["Suwako\'s Ring", 294, 5, 0, 3]);
GameData.ObjectArray.push(["Sword of some sort", 295, 5, 0, 3]);
GameData.ObjectArray.push(["Sanae\'s Stick", 296, 5, 0, 3]);
GameData.ObjectArray.push(["Drum Set", 297, 5, 0, -3]);
GameData.ObjectArray.push(["Giant Toad", 298, 5, 0, 3]);
GameData.ObjectArray.push(["Blue Frog", 299, 5, 0, 3]);
GameData.ObjectArray.push(["Blue Frog (Jumping)", 300, 5, 0, 3]);
GameData.ObjectArray.push(["CD", 301, 5, 0, 3]);
GameData.ObjectArray.push(["VHS Tape", 302, 5, 0, 3]);
GameData.ObjectArray.push(["Gas Mask", 303, 5, 0, 3]);
GameData.ObjectArray.push(["Apple Core", 304, 5, 0, 3]);
GameData.ObjectArray.push(["Bullet (Fantasy Orb)", 305, 5, 0, 3]);
GameData.ObjectArray.push(["Onbashira", 306, 5, 0, 3]);
GameData.ObjectArray.push(["MP3 Player", 307, 5, 0, 3]);
GameData.ObjectArray.push(["Cucumber", 308, 5, 0, 3]);
GameData.ObjectArray.push(["Rose", 309, 5, 0, 3]);
GameData.ObjectArray.push(["Rosebud", 310, 5, 0, 3]);
GameData.ObjectArray.push(["Throne", 311, 5, 0, 3]);
GameData.ObjectArray.push(["Cross", 312, 5, 0, 3]);
GameData.ObjectArray.push(["Shortsword", 313, 5, 0, 3]);
GameData.ObjectArray.push(["Two-Handed Sword", 314, 5, 0, 3]);
GameData.ObjectArray.push(["Shingyoku Orb", 315, 5, 0, 3]);
GameData.ObjectArray.push(["Duster", 316, 5, 0, 3]);
GameData.ObjectArray.push(["Miko Stick 2", 317, 5, 0, 3]);
GameData.ObjectArray.push(["Boot", 318, 5, 0, 3]);
GameData.ObjectArray.push(["Gap 2", 319, 5, 0, 3]);
GameData.ObjectArray.push(["Shadow", 320, 5, 0, 3]);
GameData.ObjectArray.push(["Cellphone", 321, 5, 0, 3]);
GameData.ObjectArray.push(["Youmu Sword 2A", 322, 5, 0, 3]);
GameData.ObjectArray.push(["Youmu Sword 2B", 323, 5, 0, 3]);
GameData.ObjectArray.push(["Skeleton", 324, 5, 0, 3]);
GameData.ObjectArray.push(["Shinki\'s Ahoge", 325, 5, 0, 3]);
GameData.ObjectArray.push(["Organs", 326, 5, 0, 3]);
GameData.ObjectArray.push(["Arm (Long sleeve)", 327, 5, 0, 3]);
GameData.ObjectArray.push(["Magic Stone", 328, 5, 0, 3]);
GameData.ObjectArray.push(["Soccer Ball", 329, 5, 0, 3]);
GameData.ObjectArray.push(["Archery Bow", 330, 5, 0, 3]);
GameData.ObjectArray.push(["Arm (Short sleeve)", 331, 5, 0, 3]);
GameData.ObjectArray.push(["Alpaca", 332, 5, 0, -3]);
GameData.ObjectArray.push(["Pizza", 333, 5, 0, 3]);
GameData.ObjectArray.push(["Pizza Slice", 334, 5, 0, 3]);
GameData.ObjectArray.push(["Banana", 335, 5, 0, 3]);
GameData.ObjectArray.push(["Bananas", 336, 5, 0, 3]);
GameData.ObjectArray.push(["Acoustic Guitar", 337, 5, 0, 3]);
GameData.ObjectArray.push(["Paper", 338, 5, 0, 3]);
GameData.ObjectArray.push(["Drill", 339, 5, 0, 3]);
GameData.ObjectArray.push(["Drill (Iku\'s)", 340, 5, 0, 3]);
GameData.ObjectArray.push(["Impossible Req 1", 341, 5, 0, 10]);
GameData.ObjectArray.push(["Impossible Req 2", 342, 5, 0, 10]);
GameData.ObjectArray.push(["Impossible Req 3", 343, 5, 0, 10]);
GameData.ObjectArray.push(["Impossible Req 4", 344, 5, 0, 10]);
GameData.ObjectArray.push(["Impossible Req 5", 345, 5, 0, 10]);
GameData.ObjectArray.push(["Turntable", 346, 5, 0, 3]);
GameData.ObjectArray.push(["Bone", 347, 5, 0, 13]);
GameData.ObjectArray.push(["Sweatdrop", 348, 5, 0, 3]);
GameData.ObjectArray.push(["Lightning Bolt", 349, 5, 0, 3]);
GameData.ObjectArray.push(["Box Car", 350, 5, 0, 3]);
GameData.ObjectArray.push(["Brain", 351, 5, 0, 3]);
GameData.ObjectArray.push(["Bubble 1", 352, 5, 0, 3]);
GameData.ObjectArray.push(["Bubble 2", 353, 5, 0, 3]);
GameData.ObjectArray.push(["Bubble action", 354, 5, 0, 3]);
GameData.ObjectArray.push(["Beer mug", 355, 5, 0, 10]);
GameData.ObjectArray.push(["Football", 356, 5, 0, 3]);
GameData.ObjectArray.push(["Basketball", 357, 5, 0, 13]);
GameData.ObjectArray.push(["Baseball", 358, 5, 0, 3]);
GameData.ObjectArray.push(["Baseball Bat", 359, 5, 0, 3]);
GameData.ObjectArray.push(["Book (Opened 2)", 360, 5, 0, 3]);
GameData.ObjectArray.push(["Radiator", 361, 5, 0, 3]);
GameData.ObjectArray.push(["Judge\'s Stand", 362, 5, 0, -5]);
GameData.ObjectArray.push(["Long Table", 363, 5, 0, -2]);
GameData.ObjectArray.push(["Eighth Note", 364, 5, 0, 3]);
GameData.ObjectArray.push(["Human Heart", 365, 5, 0, 3]);
GameData.ObjectArray.push(["Holy hand grenade", 366, 5, 0, 3]);
GameData.ObjectArray.push(["Arm (bent)", 367, 5, 0, 13]);
GameData.ObjectArray.push(["Arm (bent 2)", 368, 5, 0, 3]);
GameData.ObjectArray.push(["Cigarette", 369, 5, 0, 3]);
GameData.ObjectArray.push(["Cigar", 370, 5, 0, 3]);
GameData.ObjectArray.push(["Smoke fumes", 371, 5, 0, 3]);
GameData.ObjectArray.push(["Trophy", 372, 5, 0, -5]);
GameData.ObjectArray.push(["AK-47", 373, 5, 0, -2]);
GameData.ObjectArray.push(["Tissue box", 374, 5, 0, 3]);
GameData.ObjectArray.push(["Stones", 375, 5, 0, 3]);
GameData.ObjectArray.push(["Trees", 376, 5, 0, -5]);
GameData.ObjectArray.push(["Bottle ", 377, 5, 0, 5]);
GameData.ObjectArray.push(["Bottle 2", 378, 5, 0, 5]);
GameData.ObjectArray.push(["Cork", 379, 5, 0, 3]);
GameData.ObjectArray.push(["Kogasa\'s Umbrella 2", 380, 5, 0, -4]);
GameData.ObjectArray.push(["Blender", 381, 5, 0, 3]);
GameData.ObjectArray.push(["Comic Book", 382, 5, 0, 3]);
GameData.ObjectArray.push(["Comic Book Opened", 383, 5, 0, 3]);
GameData.ObjectArray.push(["Disco Ball", 384, 5, 0, 3]);
GameData.ObjectArray.push(["Motorcycle", 385, 5, 0, -2]);
GameData.ObjectArray.push(["Balloon", 386, 5, 0, 3]);
GameData.ObjectArray.push(["Rupee", 387, 5, 0, 3]);
GameData.ObjectArray.push(["Katamari Prince", 388, 5, 0, 3]);
GameData.ObjectArray.push(["Spellcard", 389, 5, 0, 5]);
GameData.ObjectArray.push(["Ping Pong Paddle", 390, 5, 0, 3]);
GameData.ObjectArray.push(["Ping Pong Ball", 391, 5, 0, 3]);
GameData.ObjectArray.push(["Kiseru", 392, 5, 0, 3]);
GameData.ObjectArray.push(["Tennis Net", 393, 5, 0, 0]);
GameData.ObjectArray.push(["Volleyball", 394, 5, 0, 5]);
GameData.ObjectArray.push(["Firefighter Axe", 395, 5, 0, 3]);
GameData.ObjectArray.push(["Ping Pong Table", 396, 5, 0, -4]);
GameData.ObjectArray.push(["Satellite Dish", 397, 5, 0, 3]);
GameData.ObjectArray.push(["Comic Book Opened 2", 398, 5, 0, 5]);
GameData.ObjectArray.push(["Couch", 399, 5, 0, -4]);
GameData.ObjectArray.push(["Soda Can", 400, 5, 0, 3]);
GameData.ObjectArray.push(["Pocky", 401, 5, 0, 3]);
GameData.ObjectArray.push(["Scooter", 402, 5, 0, 3]);
GameData.ObjectArray.push(["Grimoire 2", 403, 5, 0, 3]);
GameData.ObjectArray.push(["Whip", 404, 5, 0, 3]);
GameData.ObjectArray.push(["Machete", 405, 5, 0, 0]);
GameData.ObjectArray.push(["Yogurt in Cup", 406, 5, 0, 3]);
GameData.ObjectArray.push(["Aviator Shades", 407, 5, 0, 3]);
GameData.ObjectArray.push(["Dollar", 408, 5, 0, 5]);
GameData.ObjectArray.push(["Hatate\'s Phone", 409, 5, 0, 5]);
GameData.ObjectArray.push(["Scimitar", 410, 5, 0, 3]);
GameData.ObjectArray.push(["Skeleton Hand", 411, 5, 0, 0]);
GameData.ObjectArray.push(["Briefcase ", 412, 5, 0, 3]);
GameData.ObjectArray.push(["Briefcase 2", 413, 5, 0, 3]);
GameData.ObjectArray.push(["TV Set (Back)", 414, 4, 1, -6]);
GameData.ObjectArray.push(["Lotus", 415, 5, 0, 0]);
GameData.ObjectArray.push(["Lich Plush", 416, 5, 0, 3]);
GameData.ObjectArray.push(["Flandre Wing", 417, 5, 0, 3]);
GameData.ObjectArray.push(["Scarf", 418, 5, 0, 3]);
GameData.ObjectArray.push(["Raft", 419, 5, 0, 0]);
GameData.ObjectArray.push(["Piano", 420, 5, 0, -2]);
GameData.ObjectArray.push(["Paintbrush", 421, 5, 0, 3]);
GameData.ObjectArray.push(["Pie", 422, 5, 0, 0]);
GameData.ObjectArray.push(["Spiked Club", 423, 5, 0, 0]);
GameData.ObjectArray.push(["Syringe", 424, 5, 0, 3]);
GameData.ObjectArray.push(["Chainsaw", 425, 5, 0, 3]);
GameData.ObjectArray.push(["Sickle", 426, 5, 0, 3]);
GameData.ObjectArray.push(["Butterfly Knife", 427, 5, 0, 3]);
GameData.ObjectArray.push(["Revolver", 428, 5, 0, 3]);
GameData.ObjectArray.push(["Crystal", 429, 5, 0, 5]);
GameData.ObjectArray.push(["Wraith", 430, 5, 0, 2]);
GameData.ObjectArray.push(["Flaming Sword", 431, 5, 0, 3]);
GameData.ObjectArray.push(["Metal Fan", 432, 5, 0, 0]);
GameData.ObjectArray.push(["Umbrella 2", 433, 5, 0, 0]);
GameData.ObjectArray.push(["Umbrella Top", 434, 5, 0, 0]);
GameData.ObjectArray.push(["Umbrella Handle", 435, 5, 0, 0]);
GameData.ObjectArray.push(["Spartan Laser", 436, 5, 0, 3]);
GameData.ObjectArray.push(["Katamari", 437, 5, 0, 3]);
GameData.ObjectArray.push(["Lamp", 438, 5, 0, 3]);
GameData.ObjectArray.push(["Harp", 439, 5, 0, 0]);
GameData.ObjectArray.push(["Burger", 440, 5, 0, -2]);
GameData.ObjectArray.push(["Egg", 441, 5, 0, 3]);
GameData.ObjectArray.push(["Ghost", 442, 5, 0, 0]);
GameData.ObjectArray.push(["Lollipop", 443, 5, 0, 0]);
GameData.ObjectArray.push(["Slime", 444, 5, 0, 3]);
GameData.ObjectArray.push(["Sanae\'s Stick 2", 445, 5, 0, 3]);
GameData.ObjectArray.push(["Mirror (Small)", 446, 5, 0, 3]);
GameData.ObjectArray.push(["Mirror (Large)", 447, 5, 0, 3]);
GameData.ObjectArray.push(["Gears", 448, 5, 0, 3]);
GameData.ObjectArray.push(["Bunny Gun", 449, 5, 0, 0]);
GameData.ObjectArray.push(["Chair Folded", 450, 5, 0, -2]);
GameData.ObjectArray.push(["Cheese", 451, 5, 0, 3]);
GameData.ObjectArray.push(["Cookie", 452, 5, 0, 0]);
GameData.ObjectArray.push(["Lyre", 453, 5, 0, 0]);
GameData.ObjectArray.push(["Mishaguji-sama", 454, 5, 0, 3]);
GameData.ObjectArray.push(["Fish", 455, 5, 0, 3]);
GameData.ObjectArray.push(["Pumpkin", 456, 5, 0, 3]);
GameData.ObjectArray.push(["Fire (Blue)", 457, 5, 0, 3]);
GameData.ObjectArray.push(["Baby", 458, 5, 0, 3]);
GameData.ObjectArray.push(["Tennis Racquet", 459, 5, 0, 3]);
GameData.ObjectArray.push(["Doll (Marisa)", 460, 5, 0, -2]);
GameData.ObjectArray.push(["Doll (Alice)", 461, 5, 0, 3]);
GameData.ObjectArray.push(["Basket (woven)", 462, 5, 0, 0]);
GameData.ObjectArray.push(["Megaphone", 463, 5, 0, 0]);
GameData.ObjectArray.push(["Strawberry", 464, 5, 0, 3]);
GameData.ObjectArray.push(["Wine Glass", 465, 5, 0, 3]);
GameData.ObjectArray.push(["Black Line", 466, 5, 0, 3]);
GameData.ObjectArray.push(["Bamboo", 467, 5, 0, 3]);
GameData.ObjectArray.push(["Mouse", 468, 5, 0, 3]);
GameData.ObjectArray.push(["Speakers", 469, 5, 0, 3]);
GameData.ObjectArray.push(["Rubber Duck", 470, 5, 0, -2]);
GameData.ObjectArray.push(["Pokeball", 471, 5, 0, 3]);
GameData.ObjectArray.push(["Halo ", 472, 5, 0, 0]);
GameData.ObjectArray.push(["Halo (Zombie)", 473, 5, 0, 0]);
GameData.ObjectArray.push(["Carrot", 474, 5, 0, 3]);
GameData.ObjectArray.push(["Biscuit", 475, 5, 0, 3]);
GameData.ObjectArray.push(["Grenade ", 476, 5, 0, 3]);
GameData.ObjectArray.push(["Grenade pin", 477, 5, 0, 3]);
GameData.ObjectArray.push(["Cupcake", 478, 5, 0, 3]);
GameData.ObjectArray.push(["Cage", 479, 5, 0, 3]);
GameData.ObjectArray.push(["Stop Sign", 480, 5, 0, -2]);
GameData.ObjectArray.push(["Chocolate", 481, 5, 0, 3]);
GameData.ObjectArray.push(["Cello", 482, 5, 0, 0]);
GameData.ObjectArray.push(["Cello Bow", 483, 5, 0, 0]);
GameData.ObjectArray.push(["Bucket of Chicken", 484, 5, 0, 3]);
GameData.ObjectArray.push(["Ruler", 485, 5, 0, 3]);
GameData.ObjectArray.push(["Toothbrush", 486, 5, 0, 3]);
GameData.ObjectArray.push(["Bowling Ball", 487, 5, 0, 3]);
GameData.ObjectArray.push(["Bowling Pin", 488, 5, 0, 3]);
GameData.ObjectArray.push(["Boomerang", 489, 5, 0, 3]);
GameData.ObjectArray.push(["Eyepatch", 490, 5, 0, 3]);
GameData.ObjectArray.push(["Stealth Camo Device", 491, 5, 0, 3]);
GameData.ObjectArray.push(["Explosion", 492, 5, 0, 3]);
GameData.ObjectArray.push(["Grimoire Opened", 493, 5, 0, 3]);
GameData.ObjectArray.push(["Teacup (Suits)", 494, 5, 0, 3]);
GameData.ObjectArray.push(["Shiruken", 495, 5, 0, 3]);
GameData.ObjectArray.push(["Chains", 496, 5, 0, 3]);
GameData.ObjectArray.push(["Kitsune", 497, 5, 0, 3]);
GameData.ObjectArray.push(["Wolf", 498, 5, 0, 3]);
GameData.ObjectArray.push(["Saw", 499, 5, 0, 3]);
GameData.ObjectArray.push(["Dog", 500, 5, 0, 3]);
GameData.ObjectArray.push(["Popcorn Bag", 501, 5, 0, 3]);
GameData.ObjectArray.push(["Mr.Saturn", 502, 5, 0, 3]);
GameData.ObjectArray.push(["Katamari Kinoko", 503, 5, 0, 3]);
GameData.ObjectArray.push(["Tokin", 504, 5, 0, 3]);
GameData.ObjectArray.push(["Grimoire Opened 2", 505, 5, 0, 3]);
GameData.ObjectArray.push(["Marisa Hat", 506, 5, 0, 3]);
GameData.ObjectArray.push(["Sledgehammer", 507, 5, 0, 3]);
GameData.ObjectArray.push(["Hatchet", 508, 5, 0, 3]);
GameData.ObjectArray.push(["Cherry", 509, 5, 0, 3]);
GameData.ObjectArray.push(["Iku Dance Pose 2", 510, 5, 0, -1]);
GameData.ObjectArray.push(["Aviator Hat", 511, 5, 0, 3]);
GameData.ObjectArray.push(["Aviator Goggles", 512, 5, 0, 3]);
GameData.ObjectArray.push(["Viewfinder", 513, 5, 0, 3]);
GameData.ObjectArray.push(["Suika\'s Gourd 2", 514, 5, 0, 3]);
GameData.ObjectArray.push(["Handgun", 515, 5, 0, 3]);
GameData.ObjectArray.push(["Cat on Head 1", 516, 5, 0, 3]);
GameData.ObjectArray.push(["Cat on Head 2", 517, 5, 0, 3]);
GameData.ObjectArray.push(["Cat on Head 3", 518, 5, 0, 3]);
GameData.ObjectArray.push(["Yuka Baton", 519, 5, 0, 3]);
GameData.ObjectArray.push(["Meat", 520, 5, 0, -1]);
GameData.ObjectArray.push(["Bucket 2", 521, 5, 0, 3]);
GameData.ObjectArray.push(["Hairbrush", 522, 5, 0, 3]);
GameData.ObjectArray.push(["Microphone", 523, 5, 0, 3]);
GameData.ObjectArray.push(["Tie", 524, 5, 0, 3]);
GameData.ObjectArray.push(["Comb", 525, 5, 0, 3]);
GameData.ObjectArray.push(["Campfire", 526, 5, 0, 3]);
GameData.ObjectArray.push(["Bonfire", 527, 5, 0, 3]);
GameData.ObjectArray.push(["Knight Helm", 528, 5, 0, 3]);
GameData.ObjectArray.push(["Cat on Head 4", 529, 5, 0, 3]);
GameData.ObjectArray.push(["Mirror Midboss 1", 530, 5, 0, -3]);
GameData.ObjectArray.push(["Mirror Midboss 2", 531, 5, 0, -3]);
GameData.ObjectArray.push(["Sword in Dirt", 532, 5, 0, 3]);
GameData.ObjectArray.push(["Cowbell", 533, 5, 0, 3]);
GameData.ObjectArray.push(["Vuvuzela", 534, 5, 0, 3]);
GameData.ObjectArray.push(["Henohenomohejimake", 535, 5, 0, 3]);
GameData.ObjectArray.push(["Hotdog", 536, 5, 0, 3]);
GameData.ObjectArray.push(["Belt Eyeball Thing", 537, 5, 0, 3]);
GameData.ObjectArray.push(["Hypno Shroom", 538, 5, 0, 3]);
GameData.ObjectArray.push(["Bullet Orb", 539, 5, 0, 3]);
GameData.ObjectArray.push(["Motorcycle Helm", 540, 5, 0, 3]);
GameData.ObjectArray.push(["Skateboard", 541, 5, 0, -1]);
GameData.ObjectArray.push(["Cane", 542, 5, 0, -1]);
GameData.ObjectArray.push(["Muzzle", 543, 5, 0, -1]);
GameData.ObjectArray.push(["Energy Tank", 544, 5, 0, -1]);
GameData.ObjectArray.push(["Utsuho Wings", 545, 0, -1]);
GameData.ObjectArray.push(["Dog on Head 1", 546, 5, 0, -1]);
GameData.ObjectArray.push(["Dog on Head 2", 547, 5, 0, -1]);
GameData.ObjectArray.push(["Dog on Head 3", 548, 5, 0, -1]);
GameData.ObjectArray.push(["Chips", 549, 5, 0, -1]);
GameData.ObjectArray.push(["Frog", 550, 5, 0, -1]);
GameData.ObjectArray.push(["TARDIS", 551, 5, 0, -1]);
GameData.ObjectArray.push(["Mega Buster", 552, 5, 0, -1]);
GameData.ObjectArray.push(["Laptop", 553, 5, 0, -1]);
GameData.ObjectArray.push(["Bar Counter 2", 554, 5, 0, -5]);
GameData.ObjectArray.push(["Jukebox", 555, 5, 0, -1]);
GameData.ObjectArray.push(["Camcorder", 556, 5, 0, -1]);
GameData.ObjectArray.push(["Camcorder (Tripod)", 557, 5, 0, -1]);
GameData.ObjectArray.push(["Nail", 558, 5, 0, -3]);
GameData.ObjectArray.push(["Pom-pom", 559, 5, 0, -1]);
GameData.ObjectArray.push(["Bomb", 560, 5, 0, -1]);
GameData.ObjectArray.push(["Yorihime\'s Sword", 561, 5, 0, -1]);
GameData.ObjectArray.push(["Toyohime\'s Fan", 562, 5, 0, -1]);
GameData.ObjectArray.push(["Crocodile", 563, 5, 0, -1]);
GameData.ObjectArray.push(["Dalek", 564, 5, 0, -1]);
GameData.ObjectArray.push(["Shovel", 565, 5, 0, -5]);
GameData.ObjectArray.push(["Third Leg 2", 566, 5, 0, -1]);
GameData.ObjectArray.push(["Popsicle", 567, 5, 0, -1]);
GameData.ObjectArray.push(["Wristwatch", 568, 5, 0, -1]);
GameData.ObjectArray.push(["Peach", 569, 5, 0, 0]);
GameData.ObjectArray.push(["Arcade Cabinet", 570, 5, 0, -6]);
GameData.ObjectArray.push(["White Scar", 571, 5, 0, 0]);
GameData.ObjectArray.push(["Bottle (Drink)", 572, 5, 0, 0]);
GameData.ObjectArray.push(["Bullet (Sword)", 573, 5, 0, 0]);
GameData.ObjectArray.push(["Cow", 574, 5, 0, 0]);
GameData.ObjectArray.push(["Hammock", 575, 5, 0, 0]);
GameData.ObjectArray.push(["Hedgehog", 576, 5, 0, 0]);
GameData.ObjectArray.push(["Orangey Orb", 577, 5, 0, 0]);
GameData.ObjectArray.push(["Staff", 578, 5, 0, 0]);
GameData.ObjectArray.push(["Shutter Shades", 579, 5, 0, 0]);
GameData.ObjectArray.push(["Rainbow", 580, 5, 0, 0]);
GameData.ObjectArray.push(["Gachapon Container", 581, 5, 0, 0]);
GameData.ObjectArray.push(["Kappa", 582, 5, 0, 0]);
GameData.ObjectArray.push(["Road Sign", 583, 5, 0, 0]);
GameData.ObjectArray.push(["Judgement Stick", 584, 5, 0, 0]);
GameData.ObjectArray.push(["Hammer", 585, 5, 0, 0]);
GameData.ObjectArray.push(["Cherry Blossom", 586, 5, 0, 0]);
GameData.ObjectArray.push(["Laptop Back", 587, 5, 0, 0]);
GameData.ObjectArray.push(["Durian", 588, 5, 0, 0]);
GameData.ObjectArray.push(["Orb", 589, 5, 0, 0]);
GameData.ObjectArray.push(["Ittan Momen", 590, 5, 0, 0]);
GameData.ObjectArray.push(["Taco", 591, 5, 0, 0]);
GameData.ObjectArray.push(["Burrito", 592, 5, 0, 0]);
GameData.ObjectArray.push(["Luggage", 593, 5, 0, 0]);
GameData.ObjectArray.push(["MokoSheep", 594, 5, 0, 0]);
GameData.ObjectArray.push(["Andon Lamp", 595, 5, 0, 0]);
GameData.ObjectArray.push(["Cast", 596, 5, 0, 0]);
GameData.ObjectArray.push(["Shopping Cart", 597, 5, 0, 0]);
GameData.ObjectArray.push(["Mushroom-Stick", 598, 5, 0, 0]);
GameData.ObjectArray.push(["Top Hat", 599, 5, 0, 0]);
GameData.ObjectArray.push(["Yellow Glow", 600, 5, 0, 0]);
GameData.ObjectArray.push(["Hrtp Tiles", 601, 5, 0, 0]);
GameData.ObjectArray.push(["Boombox", 602, 5, 0, 0]);
GameData.ObjectArray.push(["Revolver Blade", 603, 5, 0, 0]);
GameData.ObjectArray.push(["Underpants", 604, 5, 0, 0]);
GameData.ObjectArray.push(["Treasure Chest", 605, 5, 0, 0]);
GameData.ObjectArray.push(["Tornado", 606, 5, 0, 0]);
GameData.ObjectArray.push(["YinYang Headphones", 607, 5, 0, 0]);
GameData.ObjectArray.push(["Ran\'s Tail", 608, 5, 0, 0]);
GameData.ObjectArray.push(["Noby Noby", 609, 5, 0, 0]);
GameData.ObjectArray.push(["Door", 610, 5, 0, 0]);
GameData.ObjectArray.push(["Utsuho Eye", 611, 5, 0, 0]);
GameData.ObjectArray.push(["Spray Bottle", 612, 5, 0, 0]);
GameData.ObjectArray.push(["Water Spray", 613, 5, 0, 0]);
GameData.ObjectArray.push(["Spraypaint Can", 614, 5, 0, 0]);
GameData.ObjectArray.push(["Marisa (NWTI)", 615, 5, 0, 0]);
GameData.ObjectArray.push(["Dust Cloud", 616, 5, 0, 0]);
GameData.ObjectArray.push(["Spray", 617, 5, 0, 3]);
GameData.ObjectArray.push(["Spoon", 618, 5, 0, 3]);
GameData.ObjectArray.push(["Bowl", 619, 5, 0, 3]);
GameData.ObjectArray.push(["Balloon (Stringless)", 620, 5, 0, 3]);
GameData.ObjectArray.push(["Laptop Closed", 621, 5, 0, 3]);
GameData.ObjectArray.push(["Tengu Mask", 622, 5, 0, 3]);
GameData.ObjectArray.push(["Arm (Yoshika)", 623, 5, 0, 3]);
GameData.ObjectArray.push(["Seal (Yoshika)", 624, 5, 0, 3]);
GameData.ObjectArray.push(["Seiga Cloth", 625, 5, 0, 3]);
GameData.ObjectArray.push(["Miko\'s Sword", 626, 5, 0, 3]);
GameData.ObjectArray.push(["Miko\'s Shaku", 627, 5, 0, 3]);
GameData.ObjectArray.push(["Leaf (Mamizou)", 628, 5, 0, 3]);
GameData.ObjectArray.push(["Notepad (Mamizou)", 629, 5, 0, 3]);
GameData.ObjectArray.push(["Bottle (Mamizou)", 630, 5, 0, 3]);
GameData.ObjectArray.push(["Stone Lantern", 631, 5, 0, 20]);
GameData.ObjectArray.push(["Bullet 13", 632, 5, 0, 20]);
GameData.ObjectArray.push(["Divine Spirit", 633, 5, 0, 10]);
GameData.ObjectArray.push(["Bell", 634, 5, 0, 10]);
GameData.ObjectArray.push(["Kokoro\'s Mask", 635, 5, 0, 10]);
GameData.ObjectArray.push(["Biwa", 636, 5, 0, 10]);
GameData.ObjectArray.push(["Yatsuhashi\'s Strings", 637, 5, 0, 10]);
GameData.ObjectArray.push(["Miracle Mallet", 638, 5, 0, 10]);
GameData.ObjectArray.push(["Giant Needle", 639, 5, 0, 10]);
GameData.ObjectArray.push(["Magic Drum", 640, 5, 0, 10]);
GameData.ObjectArray.push(["Magic Drum part 2", 641, 5, 0, 10]);
GameData.ObjectArray.push(["Drumstick", 642, 5, 0, 10]);
GameData.ObjectArray.push(["Bloody Mallet", 643, 5, 0, 10]);
GameData.ObjectArray.push(["Pink Blob", 644, 5, 0, 10]);
newPreset("Meiling", 1, 0, 0, 0, 1, 1, 1, 0, 0, 0);
newPreset("Reimu", 2, 0, 0, 1, 2, 2, 2, 1, 0, 0);
newPreset("Marisa", 3, 0, 0, 2, 3, 3, 3, 2, 0, 0);
newPreset("Sakuya", 4, 0, 0, 3, 4, 4, 4, 3, 0, 0);
newPreset("Yukari", 5, 0, 0, 4, 5, 5, 5, 4, 27, 0);
newPreset("Flandre", 6, 0, 1, 5, 6, 6, 6, 5, 1, 0);
newPreset("Yuyuko", 7, 0, 0, 6, 7, 7, 7, 27, 28, 0);
newPreset("Kaguya", 8, 0, 0, 7, 0, 8, 8, 0, 0, 0);
newPreset("Cirno", 9, 0, 1, 8, 9, 9, 9, 0, 2, 0);
newPreset("Eirin", 10, 0, 0, 9, 10, 10, 10, 0, 0, 0);
newPreset("Ran", 19, 0, 0, 18, 19, 19, 19, 0, 9, 0);
newPreset("Chen", 21, 6, 4, 20, 21, 21, 21, 0, 10, 0);
newPreset("Momizi", 32, 0, 0, 31, 32, 32, 32, 48, 16, 37);
newPreset("Youmu", 11, 0, 11, 10, 11, 11, 11, 10, 0, 0);
newPreset("Patchouli", 12, 0, 0, 11, 12, 12, 12, 11, 0, 0);
newPreset("Alice", 13, 0, 0, 12, 13, 13, 13, 12, 0, 0);
newPreset("Reisen", 14, 0, 0, 13, 14, 14, 14, 0, 51, 0);
newPreset("Mokou", 15, 0, 0, 14, 15, 15, 15, 0, 7, 0);
newPreset("Mystia", 16, 0, 0, 15, 16, 16, 16, 0, 4, 0);
newPreset("Tewi", 17, 0, 0, 16, 17, 17, 17, 0, 51, 0);
newPreset("Keine", 18, 0, 0, 17, 18, 18, 18, 0, 0, 0);
newPreset("Letty", 20, 0, 0, 19, 20, 20, 20, 0, 0, 63);
newPreset("Suika", 22, 31, 13, 21, 22, 22, 22, 36, 0, 0);
newPreset("Remilia", 23, 0, 0, 22, 23, 23, 23, 39, 11, 0);
newPreset("Lily White", 24, 0, 0, 23, 24, 24, 24, 0, 12, 0);
newPreset("Lily Black", 25, 0, 0, 24, 25, 25, 25, 0, 12, 0);
newPreset("Komachi", 26, 40, 22, 25, 26, 26, 26, 41, 0, 0);
newPreset("Nitori", 27, 0, 0, 26, 27, 27, 27, 42, 13, 0);
newPreset("Sikieiki", 28, 0, 0, 27, 28, 28, 28, 43, 0, 0);
newPreset("Wriggle", 29, 0, 0, 28, 29, 29, 29, 0, 14, 0);
newPreset("Rumia", 30, 0, 0, 29, 30, 30, 30, 0, 0, 33);
newPreset("Aya", 31, 0, 0, 30, 31, 31, 31, 47, 15, 36);
newPreset("Koakuma", 33, 0, 0, 32, 33, 33, 33, 0, 17, 0);
newPreset("Lunasa", 34, 0, 0, 33, 34, 34, 34, 50, 0, 0);
newPreset("Lyrica", 36, 0, 0, 35, 36, 36, 36, 52, 0, 0);
newPreset("Merlin", 35, 0, 0, 34, 35, 35, 35, 51, 0, 0);
newPreset("Daiyousei", 37, 0, 0, 36, 37, 37, 37, 0, 18, 0);
newPreset("Medicine", 38, 0, 0, 37, 38, 38, 38, 0, 0, 40);
newPreset("Keine (EX)", 39, 0, 0, 38, 39, 39, 39, 0, 19, 0);
newPreset("Yuka", 40, 0, 0, 39, 0, 40, 40, 57, 0, 0);
newPreset("Suwako", 41, 0, 0, 40, 41, 41, 41, 0, 0, 0);
newPreset("Hina", 42, 0, 0, 41, 42, 42, 42, 0, 0, 0);
newPreset("Sanae", 43, 0, 0, 42, 43, 43, 43, 74, 0, 0);
newPreset("Kanako", 44, 0, 0, 43, 44, 44, 44, 0, 20, 0);
newPreset("Minoriko", 45, 0, 0, 44, 45, 45, 45, 0, 0, 0);
newPreset("Shizuha", 46, 0, 0, 45, 46, 46, 46, 0, 0, 0);
newPreset("Shinki", 47, 0, 0, 46, 47, 47, 47, 0, 21, 0);
newPreset("Mima", 48, 0, 0, 47, 48, 48, 98, 0, 0, 0);
newPreset("Rinnosuke", 49, 0, 0, 48, 0, 49, 49, 0, 0, 1);
newPreset("Tokiko", 50, 0, 0, 49, 50, 50, 50, 0, 22, 0);
newPreset("Sunny Milk", 51, 0, 0, 50, 51, 51, 51, 0, 23, 0);
newPreset("Star Sapphire", 52, 0, 0, 51, 52, 52, 52, 0, 24, 0);
newPreset("Luna Child", 53, 0, 0, 52, 53, 53, 53, 0, 25, 0);
newPreset("Akyu", 54, 0, 0, 53, 54, 54, 54, 69, 0, 0);
newPreset("Renko", 55, 0, 0, 54, 55, 55, 55, 0, 0, 0);
newPreset("Maribel", 56, 0, 0, 55, 56, 56, 56, 0, 0, 0);
newPreset("Chiyuri", 57, 0, 0, 56, 57, 57, 57, 0, 0, 0);
newPreset("Yumemi", 58, 0, 0, 57, 0, 58, 58, 0, 0, 0);
newPreset("Reimu (PC-98)", 59, 0, 0, 58, 59, 59, 59, 0, 0, 0);
newPreset("Tenshi", 61, 0, 0, 60, 61, 61, 61, 0, 0, 0);
newPreset("Iku", 62, 0, 0, 61, 62, 62, 62, 0, 32, 0);
newPreset("Yamame", 60, 0, 0, 59, 60, 60, 60, 0, 30, 0);
newPreset("Yuugi", 63, 0, 0, 62, 63, 63, 63, 81, 0, 0);
newPreset("Kisume", 64, 0, 0, 63, 64, 0, 0, 0, 0, 0);
newPreset("Parsee", 65, 0, 0, 64, 0, 64, 64, 0, 0, 0);
newPreset("Yorihime", 66, 0, 0, 65, 66, 65, 65, 0, 0, 0);
newPreset("Toyohime", 67, 0, 0, 66, 67, 66, 66, 0, 0, 0);
newPreset("Marisa (PC-98)", 68, 0, 0, 67, 68, 67, 67, 0, 0, 0);
newPreset("Youki", 69, 0, 0, 68, 0, 68, 68, 0, 0, 59);
newPreset("Alice (PC-98)", 70, 0, 0, 69, 70, 69, 69, 0, 0, 0);
newPreset("Kurumi", 71, 0, 0, 70, 71, 70, 70, 0, 33, 0);
newPreset("Luize", 72, 31, 39, 71, 72, 71, 71, 0, 0, 0);
newPreset("Utsuho", 73, 0, 0, 72, 73, 72, 72, 0, 34, 0);
newPreset("Orin", 74, 0, 0, 73, 74, 73, 73, 0, 35, 0);
newPreset("Satori", 75, 73, 40, 74, 75, 74, 74, 0, 0, 61);
newPreset("Koishi", 76, 0, 23, 75, 76, 75, 75, 0, 36, 66);
newPreset("Yumeko", 77, 0, 0, 76, 77, 76, 76, 3, 0, 0);
newPreset("Ruukoto", 78, 31, 11, 77, 78, 77, 77, 0, 0, 0);
newPreset("Mugetsu", 79, 0, 0, 78, 79, 78, 78, 0, 0, 0);
newPreset("VIVIT", 80, 0, 0, 79, 80, 79, 79, 0, 0, 0);
newPreset("Gengetsu", 81, 0, 0, 80, 81, 80, 80, 0, 37, 0);
newPreset("Sariel", 82, 0, 0, 81, 0, 81, 81, 82, 38, 0);
newPreset("Konngara", 83, 0, 0, 82, 83, 82, 82, 83, 0, 0);
newPreset("Kotohime", 84, 0, 0, 83, 0, 83, 83, 0, 0, 0);
newPreset("Orange", 85, 0, 0, 84, 85, 84, 84, 86, 0, 0);
newPreset("Rikako", 86, 0, 0, 85, 86, 85, 85, 87, 0, 64);
newPreset("Rika", 87, 0, 0, 86, 87, 86, 86, 42, 31, 0);
newPreset("Yuki", 88, 0, 0, 87, 88, 87, 87, 0, 0, 0);
newPreset("Mai", 89, 0, 0, 88, 89, 88, 88, 0, 39, 0);
newPreset("Ellen", 90, 0, 0, 89, 90, 89, 89, 0, 0, 0);
newPreset("Kana", 91, 0, 0, 90, 91, 90, 90, 0, 0, 0);
newPreset("Elly", 92, 0, 0, 91, 92, 91, 91, 0, 0, 0);
newPreset("Sara", 93, 0, 0, 92, 0, 92, 92, 0, 0, 0);
newPreset("Meira", 94, 0, 0, 93, 94, 93, 93, 90, 0, 0);
newPreset("Elis", 95, 0, 0, 94, 95, 94, 94, 91, 41, 65);
newPreset("Shingyoku F", 96, 0, 0, 95, 96, 95, 95, 0, 0, 0);
newPreset("Shingyoku M", 97, 0, 0, 96, 97, 96, 96, 0, 0, 0);
newPreset("Yuka (PJ\'s)", 98, 0, 0, 97, 98, 97, 97, 0, 0, 0);
newPreset("Yukari (PCB)", 99, 0, 0, 98, 99, 98, 5, 0, 0, 0);
newPreset("Marisa (SA)", 100, 0, 11, 99, 100, 99, 99, 0, 0, 0);
newPreset("Reisen (SWR)", 101, 0, 0, 126, 14, 100, 100, 0, 51, 0);
newPreset("Reisen II", 126, 0, 0, 100, 101, 14, 14, 0, 51, 0);
newPreset("Nazrin", 102, 0, 11, 101, 102, 101, 101, 93, 43, 0);
newPreset("Kogasa", 103, 81, 0, 102, 0, 102, 102, 94, 0, 0);
newPreset("Ichirin", 104, 0, 0, 103, 104, 103, 103, 95, 0, 0);
newPreset("Marisa (UFO)", 105, 0, 11, 104, 105, 104, 104, 96, 0, 0);
newPreset("Zombie Fairy", 106, 85, 0, 105, 106, 105, 105, 0, 44, 0);
newPreset("Shanghai", 107, 0, 0, 106, 107, 106, 106, 0, 23, 0);
newPreset("Rin Satsuki", 108, 0, 11, 107, 59, 107, 107, 97, 0, 68);
newPreset("Layla", 109, 31, 11, 108, 0, 108, 108, 0, 0, 0);
newPreset("Meimu", 110, 0, 0, 109, 109, 109, 109, 0, 0, 0);
newPreset("Meiling (2)", 111, 0, 0, 110, 110, 209, 1, 0, 0, 0);
newPreset("Lie Meiling", 112, 0, 0, 111, 111, 209, 5, 0, 0, 0);
newPreset("Reimu (2 Blue)", 113, 0, 0, 112, 112, 111, 2, 0, 0, 0);
newPreset("Marisa (PCB)", 114, 0, 11, 113, 113, 99, 3, 0, 0, 0);
newPreset("Sakuya (2)", 115, 0, 0, 114, 114, 89, 90, 0, 0, 0);
newPreset("Yukari (IaMP)", 116, 0, 11, 115, 99, 112, 5, 0, 0, 0);
newPreset("Flandre (2)", 117, 0, 51, 116, 115, 113, 6, 0, 45, 0);
newPreset("Yuyuko (2)", 118, 0, 11, 117, 116, 114, 9, 0, 0, 0);
newPreset("Kaguya (2)", 119, 0, 0, 118, 0, 115, 8, 0, 0, 0);
newPreset("Cirno (2A)", 120, 0, 51, 119, 117, 3, 9, 0, 47, 0);
newPreset("Cirno (2B)", 120, 0, 51, 120, 117, 3, 9, 0, 47, 0);
newPreset("Eirin (2)", 121, 0, 0, 121, 121, 116, 10, 0, 0, 0);
newPreset("Youmu (2)", 122, 0, 0, 122, 123, 117, 3, 0, 0, 0);
newPreset("Patchouli (2)", 123, 0, 0, 123, 124, 118, 12, 0, 0, 0);
newPreset("Alice (2A)", 124, 0, 0, 124, 125, 119, 13, 0, 0, 0);
newPreset("Alice (2B)", 125, 0, 0, 125, 125, 119, 13, 0, 0, 0);
newPreset("Reisen (2)", 126, 0, 0, 126, 126, 120, 14, 0, 51, 0);
newPreset("Mokou (2)", 127, 0, 0, 127, 127, 121, 15, 0, 48, 0);
newPreset("Mystia (2A)", 128, 0, 0, 128, 128, 122, 16, 0, 50, 0);
newPreset("Mystia (2B)", 129, 31, 11, 128, 129, 123, 16, 0, 49, 0);
newPreset("Tewi (2)", 130, 0, 51, 129, 130, 124, 17, 0, 51, 73);
newPreset("Keine (2)", 131, 0, 0, 130, 131, 117, 18, 0, 0, 0);
newPreset("Keine (EX2)", 132, 0, 0, 131, 132, 117, 39, 0, 52, 0);
newPreset("Ran (2)", 133, 0, 0, 132, 133, 125, 19, 0, 53, 0);
newPreset("Letty (2)", 134, 0, 11, 133, 134, 126, 20, 0, 54, 0);
newPreset("Chen (2)", 135, 26, 13, 134, 135, 127, 21, 0, 55, 0);
newPreset("Suika (2)", 136, 23, 8, 135, 136, 128, 22, 0, 0, 0);
newPreset("Murasa", 137, 0, 0, 136, 137, 129, 14, 100, 56, 0);
newPreset("Shou", 138, 0, 11, 137, 138, 130, 14, 101, 57, 0);
newPreset("Byakuren", 139, 0, 0, 138, 0, 131, 14, 0, 62, 0);
newPreset("Nue", 140, 0, 0, 139, 0, 135, 14, 104, 58, 0);
newPreset("Remilia (2)", 141, 0, 0, 140, 139, 136, 23, 0, 59, 0);
newPreset("Lily White (2)", 142, 0, 0, 141, 140, 137, 24, 0, 60, 0);
newPreset("Lily Black (2)", 143, 0, 0, 142, 141, 138, 25, 0, 60, 0);
newPreset("Komachi (2)", 144, 40, 22, 143, 142, 139, 26, 0, 0, 0);
newPreset("Nitori (2)", 145, 0, 0, 144, 143, 140, 27, 0, 61, 0);
newPreset("Reimu (2 Brown)", 113, 0, 0, 145, 112, 111, 2, 0, 0, 0);
newPreset("Sikieiki (2)", 147, 0, 0, 146, 144, 141, 28, 0, 0, 0);
newPreset("Wriggle (2)", 148, 0, 0, 148, 145, 126, 29, 0, 63, 0);
newPreset("Rumia (2)", 149, 31, 13, 149, 146, 143, 30, 0, 0, 33);
newPreset("Aya (2A)", 150, 0, 0, 150, 147, 145, 31, 0, 0, 0);
newPreset("Aya (2B)", 151, 0, 0, 150, 148, 145, 31, 0, 0, 0);
newPreset("Momizi (2)", 152, 0, 0, 151, 149, 146, 32, 108, 65, 0);
newPreset("Koakuma (2)", 153, 0, 0, 152, 150, 147, 33, 0, 66, 0);
newPreset("Marisa (2)", 154, 0, 0, 153, 151, 117, 3, 0, 0, 0);
newPreset("Lunasa (2)", 155, 0, 0, 154, 152, 148, 34, 0, 0, 0);
newPreset("Merlin (2)", 156, 0, 0, 155, 153, 149, 35, 0, 0, 0);
newPreset("Lyrica (2)", 157, 0, 0, 156, 154, 150, 36, 0, 0, 0);
newPreset("Sakuya (Magical)", 158, 0, 0, 114, 114, 151, 111, 0, 0, 0);
newPreset("Sanae (Magical)", 159, 0, 0, 162, 155, 157, 43, 111, 0, 0);
newPreset("Daiyousei (2)", 160, 0, 0, 157, 156, 152, 37, 0, 70, 0);
newPreset("Medicine (2)", 162, 0, 0, 158, 157, 153, 38, 0, 71, 40);
newPreset("Yuka (2)", 163, 0, 0, 159, 0, 142, 40, 0, 0, 0);
newPreset("Suwako (2)", 165, 0, 0, 160, 159, 155, 41, 0, 0, 0);
newPreset("Hina (2A)", 166, 0, 0, 161, 160, 156, 42, 0, 0, 0);
newPreset("Sanae (2)", 167, 0, 0, 162, 161, 157, 43, 0, 0, 0);
newPreset("Kanako (2)", 168, 0, 0, 163, 163, 158, 44, 0, 73, 0);
newPreset("Hina (2B)", 166, 0, 0, 161, 164, 156, 42, 0, 0, 0);
newPreset("Minoriko (2)", 169, 0, 0, 165, 167, 159, 45, 0, 0, 0);
newPreset("Sakuya (Inu)", 115, 0, 0, 114, 168, 89, 90, 0, 0, 0);
newPreset("Shizuha (2)", 170, 0, 0, 166, 169, 160, 46, 0, 0, 0);
newPreset("Shinki (2)", 171, 0, 0, 167, 171, 161, 47, 0, 78, 0);
newPreset("Mima (2)", 172, 0, 0, 168, 174, 163, 98, 0, 0, 0);
newPreset("Rinnosuke (2)", 173, 0, 0, 170, 0, 164, 49, 0, 0, 64);
newPreset("Rengeteki", 176, 0, 0, 172, 181, 166, 68, 0, 82, 0);
newPreset("Tokiko (2)", 179, 0, 0, 173, 188, 169, 50, 0, 83, 0);
newPreset("Sunny Milk (2)", 181, 0, 0, 174, 189, 172, 51, 0, 85, 0);
newPreset("Star Sapphire (2A)", 182, 0, 0, 175, 195, 173, 52, 0, 86, 0);
newPreset("Star Sapphire (2B)", 182, 0, 0, 176, 195, 173, 52, 0, 86, 0);
newPreset("Hatate", 184, 0, 0, 177, 199, 174, 31, 0, 0, 0);
newPreset("Luna Child (2)", 185, 0, 0, 178, 200, 175, 53, 0, 92, 0);
newPreset("Reimu (EoSD)", 186, 0, 0, 169, 112, 111, 2, 0, 0, 0);
newPreset("Reimu (PCB)", 187, 0, 0, 169, 112, 111, 2, 0, 0, 0);
newPreset("Reimu (PoFV)", 188, 0, 0, 145, 112, 111, 2, 0, 0, 0);
newPreset("Reimu (SA)", 189, 0, 0, 169, 112, 111, 2, 0, 0, 0);
newPreset("Akyu (2)", 194, 0, 0, 179, 208, 176, 54, 0, 0, 0);
newPreset("Renko (2)", 196, 0, 0, 181, 210, 175, 55, 0, 0, 0);
newPreset("Maribel (2)", 198, 0, 0, 183, 211, 178, 56, 0, 0, 0);
newPreset("Yamame (2)", 202, 0, 0, 185, 215, 182, 60, 0, 0, 0);
newPreset("Chiyuri (2)", 203, 0, 0, 186, 216, 183, 57, 0, 0, 0);
newPreset("Cirno (Fire)", 213, 0, 51, 189, 223, 3, 6, 0, 100, 0);
newPreset("Yumemi (2)", 205, 0, 0, 187, 0, 184, 58, 0, 96, 0);
newPreset("Reimu (PC-98 2)", 217, 0, 0, 190, 229, 189, 59, 0, 0, 0);
newPreset("Tenshi (2A)", 224, 0, 0, 196, 236, 192, 61, 0, 0, 0);
newPreset("Tenshi (2B)", 224, 0, 0, 202, 236, 192, 61, 0, 0, 0);
newPreset("Mima (HRtP)", 175, 0, 0, 168, 246, 163, 98, 0, 0, 0);
newPreset("Iku (2)", 226, 0, 0, 201, 244, 195, 62, 0, 105, 0);
newPreset("Yuugi (2)", 232, 0, 0, 204, 250, 197, 63, 0, 0, 0);
newPreset("Kisume (2A)", 233, 0, 0, 205, 64, 0, 0, 0, 106, 0);
newPreset("Kisume (2B)", 233, 0, 0, 206, 64, 0, 0, 0, 106, 0);
newPreset("Parsee (2)", 237, 0, 0, 207, 0, 200, 64, 0, 0, 0);
newPreset("Utsuho (2)", 240, 0, 0, 208, 256, 201, 115, 0, 110, 0);
newPreset("Orin (2)", 244, 0, 0, 209, 258, 203, 73, 0, 111, 0);
newPreset("Reimu (PC-98 2 Green)", 264, 0, 0, 190, 268, 213, 39, 0, 0, 0);
newPreset("Satori (2A)", 262, 0, 0, 210, 265, 210, 74, 0, 0, 0);
newPreset("Satori (2B)", 263, 0, 0, 210, 265, 210, 74, 0, 0, 122);
newPreset("Koishi (2A)", 266, 0, 0, 212, 270, 214, 75, 0, 0, 0);
newPreset("Koishi (2B)", 267, 0, 0, 212, 270, 214, 75, 0, 0, 125);
newPreset("Kasen", 272, 0, 0, 214, 273, 215, 58, 0, 0, 0);
newPreset("Mitori", 280, 0, 0, 216, 277, 218, 6, 151, 114, 0);
newPreset("Sasha", 281, 0, 0, 217, 0, 222, 102, 0, 0, 0);
newPreset("Yorihime (2)", 287, 0, 0, 219, 284, 224, 65, 143, 0, 0);
newPreset("Toyohime (2)", 288, 0, 0, 220, 285, 226, 66, 144, 0, 0);
newPreset("Youki (2)", 289, 0, 0, 221, 0, 227, 68, 0, 0, 138);
newPreset("Alice (PC-98)(2)", 290, 0, 0, 222, 286, 228, 69, 0, 0, 0);
newPreset("Kurumi (2)", 291, 0, 0, 223, 287, 229, 70, 0, 118, 0);
newPreset("Marisa (PC-98)(2)", 292, 0, 0, 224, 288, 230, 67, 0, 0, 0);
newPreset("Luize (2A)", 293, 0, 0, 225, 289, 231, 71, 0, 0, 0);
newPreset("Luize (2B)", 294, 0, 0, 225, 289, 231, 71, 0, 0, 0);
newPreset("Yumeko (2)", 295, 0, 0, 226, 290, 232, 76, 0, 0, 0);
newPreset("Ruukoto (2)", 296, 0, 0, 227, 291, 233, 77, 0, 0, 0);
newPreset("Mugetsu (2)", 298, 0, 0, 229, 293, 234, 78, 0, 0, 0);
newPreset("Gengetsu (2)", 299, 0, 0, 230, 294, 235, 80, 0, 119, 0);
newPreset("Sariel (2A)", 300, 0, 0, 231, 0, 236, 81, 82, 120, 0);
newPreset("Sariel (2B)", 300, 0, 0, 232, 0, 236, 81, 82, 120, 0);
newPreset("Konngara (2A)", 301, 0, 0, 233, 295, 130, 82, 83, 0, 0);
newPreset("Konngara (2B)", 301, 0, 0, 234, 295, 130, 82, 83, 0, 0);
newPreset("Kotohime (2)", 303, 0, 0, 236, 0, 237, 83, 0, 0, 0);
newPreset("Orange (2A)", 304, 0, 0, 237, 299, 238, 84, 86, 0, 0);
newPreset("Orange (2B)", 304, 0, 0, 238, 299, 238, 84, 86, 0, 0);
newPreset("Rikako (2A)", 305, 0, 0, 239, 300, 239, 85, 0, 0, 139);
newPreset("Rikako (2B)", 306, 0, 0, 239, 300, 239, 85, 0, 0, 139);
newPreset("Rika (2A)", 307, 0, 0, 241, 302, 226, 86, 0, 0, 0);
newPreset("Rika (2B)", 307, 0, 0, 242, 302, 226, 86, 0, 0, 0);
newPreset("Yuki (2)", 308, 0, 0, 243, 303, 240, 87, 0, 0, 0);
newPreset("VIVIT (2)", 309, 0, 0, 244, 304, 241, 79, 0, 0, 0);
newPreset("Mai (2)", 312, 0, 0, 245, 306, 242, 88, 0, 122, 0);
newPreset("Ellen (2)", 313, 0, 0, 246, 307, 183, 89, 0, 0, 0);
newPreset("Kana (2)", 314, 0, 0, 247, 308, 243, 90, 0, 0, 0);
newPreset("Elly (2)", 315, 0, 0, 248, 309, 245, 91, 0, 123, 0);
newPreset("Sara (2)", 316, 0, 0, 249, 0, 246, 92, 0, 0, 0);
newPreset("Meira (2)", 321, 0, 0, 250, 313, 247, 93, 90, 0, 0);
newPreset("Elis (2)", 322, 0, 0, 251, 314, 248, 94, 91, 41, 144);
newPreset("Shingyoku F (2)", 325, 0, 0, 252, 317, 226, 95, 0, 0, 0);
newPreset("Shingyoku M (2)", 326, 0, 0, 253, 318, 249, 96, 0, 0, 0);
newPreset("Yuka (PJ\'s 2)", 330, 0, 0, 254, 319, 250, 97, 0, 0, 0);
newPreset("Yukari (PCB 2)", 331, 0, 0, 255, 320, 251, 5, 0, 0, 0);
newPreset("Nazrin (2)", 333, 0, 0, 256, 321, 226, 101, 0, 43, 0);
newPreset("Kogasa (2)", 334, 81, 0, 257, 0, 248, 102, 154, 0, 0);
newPreset("Yukari (2)", 116, 0, 0, 258, 320, 112, 5, 0, 0, 0);
newPreset("Ichirin (2)", 337, 0, 0, 259, 324, 255, 103, 95, 0, 0);
newPreset("Shanghai (2)", 341, 0, 0, 260, 326, 256, 106, 0, 0, 0);
newPreset("Kyouko", 343, 0, 0, 261, 329, 258, 25, 0, 0, 0);
newPreset("Yoshika", 344, 0, 0, 262, 331, 0, 53, 0, 0, 152);
newPreset("Seiga", 345, 0, 0, 263, 334, 260, 25, 0, 132, 0);
newPreset("Tojiko", 346, 0, 0, 264, 335, 261, 117, 0, 0, 0);
newPreset("Futo", 347, 0, 0, 265, 336, 262, 118, 0, 0, 0);
newPreset("Miko", 348, 0, 0, 266, 337, 263, 41, 0, 0, 0);
newPreset("Miko (Alt)", 349, 0, 0, 266, 337, 263, 41, 0, 0, 154);
newPreset("Mamizou", 350, 0, 0, 267, 338, 264, 46, 0, 133, 155);
newPreset("Kosuzu", 351, 0, 0, 268, 341, 265, 119, 0, 0, 0);
newPreset("Ichirin (2 Alt)", 352, 0, 0, 259, 324, 255, 103, 95, 0, 0);
newPreset("Wakasagihime", 353, 0, 0, 269, 342, 267, 120, 0, 0, 0);
newPreset("Sekibanki", 354, 0, 0, 270, 343, 268, 121, 0, 0, 156);
newPreset("Kagerou", 355, 0, 0, 271, 344, 269, 122, 0, 0, 0);
newPreset("Kokoro", 356, 0, 0, 272, 345, 270, 123, 0, 0, 0);
newPreset("Benben", 357, 0, 0, 273, 347, 271, 46, 0, 0, 0);
newPreset("Yatsuhashi", 358, 0, 0, 274, 348, 272, 123, 0, 0, 0);
newPreset("Seija", 359, 0, 0, 275, 349, 273, 35, 0, 0, 0);
newPreset("Shinmyoumaru", 360, 0, 0, 277, 350, 274, 45, 156, 135, 0);
newPreset("Raiko", 361, 0, 0, 278, 0, 275, 125, 157, 136, 0);
newPreset("Seiran", 362, 0, 0, 279, 351, 276, 24, 158, 0, 0);
newPreset("Ringo", 363, 0, 0, 280, 353, 277, 102, 0, 0, 0);
newPreset("Doremy", 364, 0, 0, 281, 354, 278, 119, 159, 137, 0);
newPreset("Sumireko", 365, 0, 0, 282, 210, 250, 124, 0, 138, 158);
GameData.Toys = new Object();
GameData.Toys["Grouchy Reimu"] = new Object();
GameData.Toys["Grouchy Reimu"].frame = 1;
GameData.Toys["Gravity Well"] = new Object();
GameData.Toys["Gravity Well"].frame = 2;
GameData.Toys["Gravity Well"].Power = 5;
GameData.Toys["Gravity Well"].ShiftPower = 2;
GameData.Toys["Gravity Well"].CtrlPower = 10;
GameData.Toys["Gravity Well"].Friction = 1;
GameData.Toys["Mysterious Gap"] = new Object();
GameData.Toys["Mysterious Gap"].frame = 3;
GameData.Toys["Clone Capsule"] = new Object();
GameData.Toys["Clone Capsule"].frame = 4;
GameData.Toys["Clone Capsule"].Mode = 1;
GameData.Toys["Clone Capsule"].Delay = 0;
GameData.Toys["Clone Capsule"].Char = new Object();
GameData.Toys["Boxing Chen"] = new Object();
GameData.Toys["Boxing Chen"].frame = 5;
GameData.Toys["Boxing Chen"].Range = 120;
GameData.ObjectList = new Array();
for (a = 0; a < GameData.ObjectArray.length; a++)
{
    GameData.ObjectList.push([GameData.ObjectArray[a][0], a]);
} // end of for
GameData.ObjectList.sort();
GameData.PresetList = new Array();
for (a in GameData.Presets)
{
    GameData.PresetList.push(a);
} // end of for...in
GameData.NewestChar = GameData.PresetList[0];
GameData.PresetList.sort();
LoadSavedData();
CheckOrigin();
_root.attachMovie("BGBox", "ClearClicker", 0);
ClearClicker._width = Stage.width;
ClearClicker._height = Stage.height;
ClearClicker._alpha = 0;
ClearClicker.onPress = function ()
{
    CloseMenus(1);
    Target();
};
ClearClicker.useHandCursor = false;
_root.attachMovie("Background", "bg", 1);
_root.createEmptyMovieClip("stage", 10);
_root.attachMovie("BGBox", "Dimmer", 98);
SwapColor(Dimmer, "Buttons", 4);
Dimmer._width = Stage.width;
Dimmer._height = Stage.height;
Dimmer._alpha = 0;
_root.attachMovie("Manipulator", "Manipulator", 99);
Manipulator._visible = false;
Manipulator.dragbox.onPress = function ()
{
    GameData.DoubleClick = 0;
    clickCheck(GameData.Target, "drag");
};
setActionRelease(Manipulator.dragbox);
Manipulator.attachMovie("ToolNode", "Positioner", 30);
Manipulator.Positioner.gotoAndStop(3);
Manipulator.Positioner.onPress = function ()
{
    GameData.Action = "positionTool";
};
setActionRelease(Manipulator.Positioner);
Manipulator.attachMovie("ToolNode", "RotateTool", 10);
Manipulator.RotateTool.gotoAndStop(2);
Manipulator.RotateTool.onPress = function ()
{
    GameData.Action = "rotateTool";
};
setActionRelease(Manipulator.RotateTool);
Manipulator.attachMovie("ToolNode", "ScaleTool", 20);
Manipulator.ScaleTool.gotoAndStop(1);
Manipulator.ScaleTool.onPress = function ()
{
    GameData.Action = "scaleTool";
};
setActionRelease(Manipulator.ScaleTool);
Manipulator.attachMovie("ToolNode", "BScaleTool", 50);
Manipulator.BScaleTool.gotoAndStop(4);
Manipulator.BScaleTool.onPress = function ()
{
    GameData.Action = "bScaleTool";
};
setActionRelease(Manipulator.BScaleTool);
Manipulator.attachMovie("ToolNode", "BTextTool", 40);
Manipulator.BTextTool.gotoAndStop(5);
Manipulator.BTextTool.onPress = function ()
{
    GameData.Action = "bTextTool";
};
setActionRelease(Manipulator.BTextTool);
_root.createEmptyMovieClip("Interface", 100);
_root.createEmptyMovieClip("SysConsole", 150);
SysConsole._y = Stage.height / 2;
_root.attachMovie("BGBox", "TopDimmer", 300);
SwapColor(TopDimmer, "Buttons", 4);
TopDimmer._width = Stage.width;
TopDimmer._height = Stage.height;
TopDimmer._alpha = 0;
bg.gotoAndStop(1);
bg._visible = false;
MenuMaker = new Array();
MenuMaker.push(["TargetFrame", "ObjMenuItem"]);
MenuMaker.push(["HatMenu", ""]);
MenuMaker.push(["ItemMenu", ""]);
MenuMaker.push(["SceneActMenu", ""]);
MenuMaker.push(["AccMenu", ""]);
MenuMaker.push(["BackMenu", ""]);
MenuMaker.push(["ShoesMenu", ""]);
MenuMaker.push(["ArmsMenu", ""]);
MenuMaker.push(["BodyMenu", ""]);
MenuMaker.push(["HairMenu", ""]);
MenuMaker.push(["EyesMenu", ""]);
MenuMaker.push(["MouthMenu", ""]);
MenuMaker.push(["PresetMenu", ""]);
MenuMaker.push(["SavedCharMenu", ""]);
MenuMaker.push(["SavedSceneMenu", ""]);
MenuMaker.push(["ObjectList", ""]);
MenuMaker.push(["RenameMenu", "RenameMenu"]);
MenuMaker.push(["BGMenu", "BGMenu"]);
MenuMaker.push(["COMenu", "CharOptionsMenu"]);
MenuMaker.push(["BubbleWindow", "BubbleMenu"]);
MenuMaker.push(["GravMenu", "GravityMenu"]);
MenuMaker.push(["DNAMenu", "DNAMenu"]);
MenuMaker.push(["ConfirmBox", "ConfirmBox"]);
MenuMaker.push(["HelpWindow", ""]);
for (i = 0; i < MenuMaker.length; i++)
{
    if (MenuMaker[i][1])
    {
        Interface.attachMovie(MenuMaker[i][1], MenuMaker[i][0], GameData.Menus.DMax++);
    }
    else
    {
        Interface.createEmptyMovieClip(MenuMaker[i][0], GameData.Menus.DMax++);
    } // end else if
    ScaleMenu(Interface[MenuMaker[i][0]]);
    Interface[MenuMaker[i][0]]._visible = false;
} // end of for
_root.attachMovie("BGBox", "ClickBlocker", 102);
ClickBlocker._width = Stage.width;
ClickBlocker._height = Stage.height;
ClickBlocker._alpha = 70;
SwapColor(ClickBlocker, "Buttons", 3);
ClickBlocker.onPress = function ()
{
};
ClickBlocker.useHandCursor = false;
ClickBlocker._visible = false;
for (t in GameData.Toys)
{
    AddProp(t, "Toys", "Toys");
    stage[t].gotoAndStop(GameData.Toys[t].frame);
    stage[t]._x = 200;
    stage[t]._y = 200;
    stage[t]._visible = false;
} // end of for...in
stage["Grouchy Reimu"].onPress = function ()
{
    this.startDrag();
    clickCheck(this, "");
};
stage["Grouchy Reimu"].onRelease = function ()
{
    this.stopDrag();
};
stage["Grouchy Reimu"].onReleaseOutside = function ()
{
    this.stopDrag();
};
stage["Gravity Well"].onPress = function ()
{
    clickCheck(this, "drag");
};
setActionRelease(stage["Gravity Well"]);
stage["Clone Capsule"].char._visible = false;
stage["Clone Capsule"].lights.gotoAndStop(1);
stage["Clone Capsule"].onPress = function ()
{
    clickCheck(this, "drag");
};
setActionRelease(stage["Clone Capsule"]);
stage["Boxing Chen"].onPress = function ()
{
    resetBoxingChen();
    clickCheck(this, "drag");
};
setActionRelease(stage["Boxing Chen"]);
stage["Mysterious Gap"].onPress = function ()
{
    clickCheck(this, "drag");
};
setActionRelease(stage["Mysterious Gap"]);
var myListener = new Object();
myListener.onResize = function ()
{
    fixScales();
};
Stage.addListener(myListener);
Interface.onEnterFrame = function ()
{
    for (S in SysConsole)
    {
        if (SysConsole[S].CD > 0)
        {
            --SysConsole[S].CD;
            continue;
        } // end if
        if (SysConsole[S]._alpha > 0)
        {
            SysConsole[S]._alpha = SysConsole[S]._alpha - 20;
            continue;
        } // end if
        SysConsole[S].removeMovieClip();
    } // end of for...in
    if (!GameData.GameOn)
    {
        GameData.Keys.Functions.Main();
        if (GameData.DoubleClick > 0)
        {
            --GameData.DoubleClick;
        } // end if
        if (GameData.Toys["Clone Capsule"].Delay > 0)
        {
            --GameData.Toys["Clone Capsule"].Delay;
        }
        else if (GameData.Toys["Clone Capsule"].Mode == 4 && stage["Clone Capsule"]._visible && stage["Clone Capsule"].char._visible)
        {
            activateCloneCapsule();
            GameData.Toys["Clone Capsule"].Delay = 30;
        } // end else if
        if (stage["Boxing Chen"].AttackRoll > 0)
        {
            --stage["Boxing Chen"].AttackRoll;
            if (stage["Boxing Chen"].AttackRoll == 55)
            {
                _root.attachMovie("KO", "KO", 6000);
                KO._xscale = GameData.Menus.Size * 0.900000;
                KO._yscale = GameData.Menus.Size * 0.900000;
            }
            else if (stage["Boxing Chen"].AttackRoll == 0)
            {
                KO.removeMovieClip();
            } // end if
        } // end else if
        if (bg.chatW._visible && GameData.Chat.Active)
        {
            if (GameData.Chat.D > 0)
            {
                --GameData.Chat.D;
            }
            else
            {
                if (GameData.Chat.L < 5)
                {
                    var _loc9 = "LOLSpark";
                    ++GameData.Chat.L;
                }
                else
                {
                    _loc9 = GameData.Chat.UserList[random(GameData.Chat.UserList.length)];
                    GameData.Chat.L = 0;
                } // end else if
                playSound("ChatBeep");
                bg.chatW.chat.text = bg.chatW.chat.text + (_loc9 + ": " + GameData.Chat.Users[_loc9][random(GameData.Chat.Users[_loc9].length)] + "\n");
                bg.chatW.chat.scroll = bg.chatW.chat.maxscroll;
                GameData.Chat.D = random(GameData.Chat.Delay) + 3;
            } // end else if
            if (GameData.Chat.Doom > 0)
            {
                --GameData.Chat.Doom;
                if (GameData.Chat.Doom == 0)
                {
                    for (u = 0; u < GameData.Chat.UserList.length; u++)
                    {
                        var _loc6 = GameData.Chat.UserList[u];
                        if (_loc6 != "WakiMiko")
                        {
                            bg.chatW.chat.text = bg.chatW.chat.text + (_loc6 + " has disconnected.\n");
                            bg.chatW.chat.scroll = bg.chatW.chat.maxscroll;
                        } // end if
                    } // end of for
                    GameData.Chat.Active = false;
                } // end if
            } // end if
        } // end if
        for (n in GameData.Rain)
        {
            for (o in stage[n])
            {
                stage[n][o]._rotation = stage[n][o]._rotation + stage[n][o].Rot;
                if (stage[n][o]._x >= Stage.width + 50)
                {
                    stage[n][o]._x = -20;
                } // end if
                if (stage[n][o]._y >= Stage.height + 50)
                {
                    SetDrop(stage[n][o]);
                } // end if
                stage[n][o]._y = stage[n][o]._y + stage[n][o].YMov;
                stage[n][o]._x = stage[n][o]._x + stage[n][o].XMov;
            } // end of for...in
        } // end of for...in
        if (!GameData.Target.Pin)
        {
            if (GameData.Action == "rotateTool")
            {
                Manipulator.RotateTool._x = _root._xmouse - Manipulator._x;
                Manipulator.RotateTool._y = _root._ymouse - Manipulator._y;
                if (GameData.Target._yscale < 0)
                {
                    GameData.Target._rotation = getMouseAngle(Manipulator._x, Manipulator._y) + 180;
                }
                else
                {
                    GameData.Target._rotation = getMouseAngle(Manipulator._x, Manipulator._y);
                } // end else if
            }
            else if (GameData.Action == "positionTool")
            {
                Manipulator.Positioner._x = _root._xmouse - Manipulator._x;
                Manipulator.Positioner._y = _root._ymouse - Manipulator._y;
                if (GameData.TargetType == "Cluster")
                {
                    GameData.Clusters[GameData.Target._name].Px = Manipulator.Positioner._x;
                    GameData.Clusters[GameData.Target._name].Py = Manipulator.Positioner._y;
                    fixClusterShotAngle(GameData.Target, GameData.Clusters[GameData.Target._name].Qt);
                }
                else
                {
                    GameData.Target.Bubble._x = Manipulator.Positioner._x;
                    GameData.Target.Bubble._y = Manipulator.Positioner._y;
                } // end else if
            }
            else if (GameData.Action == "scaleTool")
            {
                Manipulator.ScaleTool._x = _root._xmouse - Manipulator._x;
                Manipulator.ScaleTool._y = _root._ymouse - Manipulator._y;
                if (Manipulator.ScaleTool._x < 0)
                {
                    GameData.Target.XFace = -1;
                }
                else
                {
                    GameData.Target.XFace = 1;
                } // end else if
                if (Manipulator.ScaleTool._y < 0)
                {
                    GameData.Target.YFace = -1;
                }
                else
                {
                    GameData.Target.YFace = 1;
                } // end else if
                var _loc12 = Math.abs(Manipulator.ScaleTool._x) + Math.abs(Manipulator.ScaleTool._y);
                if (_loc12 < GameData.ScaleLimit)
                {
                    _loc12 = GameData.ScaleLimit;
                } // end if
                fixTargetScale(_loc12);
            }
            else if (GameData.Action == "bScaleTool")
            {
                Manipulator.BScaleTool._x = _root._xmouse - Manipulator._x;
                Manipulator.BScaleTool._y = _root._ymouse - Manipulator._y;
                if (Manipulator.BScaleTool._x < 0)
                {
                    GameData.Target.Bubble.XFace = -1;
                }
                else
                {
                    GameData.Target.Bubble.XFace = 1;
                } // end else if
                if (Manipulator.BScaleTool._y < 0)
                {
                    GameData.Target.Bubble.YFace = -1;
                }
                else
                {
                    GameData.Target.Bubble.YFace = 1;
                } // end else if
                GameData.Target.Bubble._xscale = Math.abs(Manipulator.BScaleTool._x) * GameData.Target.Bubble.XFace;
                GameData.Target.Bubble._yscale = Math.abs(Manipulator.BScaleTool._y) * GameData.Target.Bubble.YFace;
                GameData.SpeechBubbles[GameData.Target._name].XScale = Math.abs(GameData.Target.Bubble._xscale);
                GameData.SpeechBubbles[GameData.Target._name].YScale = Math.abs(GameData.Target.Bubble._yscale);
            }
            else if (GameData.Action == "bTextTool")
            {
                Manipulator.BTextTool._x = _root._xmouse - Manipulator._x;
                Manipulator.BTextTool._y = _root._ymouse - Manipulator._y;
                GameData.Target.D._x = Manipulator.BTextTool._x;
                GameData.Target.D._y = Manipulator.BTextTool._y;
            }
            else if (GameData.Action == "rotate")
            {
                if (GameData.TargetType == "Character")
                {
                    GameData.Target.OldR = GameData.Target._rotation;
                    if (GameData.Target._yscale < 0)
                    {
                        GameData.Target._rotation = getMouseAngle(GameData.Target._x, GameData.Target._y) + 180;
                    }
                    else
                    {
                        GameData.Target._rotation = getMouseAngle(GameData.Target._x, GameData.Target._y);
                    } // end else if
                    GameData.Target.Spin = Math.floor(GameData.Target._rotation - GameData.Target.OldR);
                }
                else if (GameData.TargetType == "Object" || GameData.TargetType == "Screenshot" || GameData.TargetType == "Cluster")
                {
                    if (GameData.Target._yscale < 0)
                    {
                        GameData.Target._rotation = getMouseAngle(GameData.Target._x, GameData.Target._y) + 180;
                    }
                    else
                    {
                        GameData.Target._rotation = getMouseAngle(GameData.Target._x, GameData.Target._y);
                    } // end else if
                }
                else if (GameData.TargetType == "SpeechBubble")
                {
                    if (GameData.Target.Bubble._yscale < 0)
                    {
                        GameData.Target.Bubble._rotation = getMouseAngle(GameData.Target._x + GameData.Target.Bubble._x, GameData.Target._y + GameData.Target.Bubble._y) + 10;
                    }
                    else
                    {
                        GameData.Target.Bubble._rotation = getMouseAngle(GameData.Target._x + GameData.Target.Bubble._x, GameData.Target._y + GameData.Target.Bubble._y) + 170;
                    } // end else if
                } // end else if
            }
            else if (GameData.Action == "drag")
            {
                GameData.Target.OldX = GameData.Target._x;
                GameData.Target.OldY = GameData.Target._y;
                GameData.Target._x = _root._xmouse - GameData.Xmod;
                Manipulator._x = GameData.Target._x;
                GameData.Target._y = _root._ymouse - GameData.Ymod;
                Manipulator._y = GameData.Target._y;
                GameData.Target.XMov = Math.floor(GameData.Target._x - GameData.Target.OldX);
                GameData.Target.YMov = Math.floor(GameData.Target._y - GameData.Target.OldY);
            }
            else if (GameData.Action == "scale")
            {
                if (GameData.TargetType == "SpeechBubble")
                {
                    if (Key.isDown(17))
                    {
                        var _loc11 = _root._xmouse - GameData.Xmod;
                        var _loc10 = _root._ymouse - GameData.Ymod;
                        if (GameData.Target.OldXScale + _loc11 < GameData.ScaleLimit)
                        {
                            GameData.SpeechBubbles[GameData.Target._name].XScale = GameData.ScaleLimit;
                        }
                        else
                        {
                            GameData.SpeechBubbles[GameData.Target._name].XScale = GameData.Target.OldXScale + _loc11;
                        } // end else if
                        if (GameData.Target.OldYScale + _loc10 < GameData.ScaleLimit)
                        {
                            GameData.SpeechBubbles[GameData.Target._name].YScale = GameData.ScaleLimit;
                        }
                        else
                        {
                            GameData.SpeechBubbles[GameData.Target._name].YScale = GameData.Target.OldYScale + _loc10;
                        } // end else if
                        GameData.Target.Bubble._xscale = GameData.SpeechBubbles[GameData.Target._name].XScale * GameData.Target.Bubble.XFace;
                        GameData.Target.Bubble._yscale = GameData.SpeechBubbles[GameData.Target._name].YScale * GameData.Target.Bubble.YFace;
                    }
                    else
                    {
                        var S = _root._xmouse - GameData.Xmod + (_root._ymouse - GameData.Ymod);
                        if (GameData.Target.OldScale + S < GameData.ScaleLimit)
                        {
                            _loc12 = GameData.ScaleLimit;
                        }
                        else
                        {
                            _loc12 = GameData.Target.OldScale + S;
                        } // end else if
                        fixTargetScale(_loc12);
                    } // end else if
                }
                else
                {
                    var S = _root._xmouse - GameData.Xmod + (_root._ymouse - GameData.Ymod);
                    if (GameData.Target.OldScale + S < GameData.ScaleLimit)
                    {
                        _loc12 = GameData.ScaleLimit;
                    }
                    else
                    {
                        _loc12 = GameData.Target.OldScale + S;
                    } // end else if
                    fixTargetScale(_loc12);
                } // end else if
            } // end else if
        } // end else if
        for (c in stage)
        {
            if (!stage[c].Pin)
            {
                if (bg.yuyuko._currentframe == 2 && stage[c]._visible && GameData.Characters[stage[c]._name])
                {
                    var _loc4 = 330 * (bg._xscale / 100) + bg._x;
                    var _loc5 = 230 * (bg._yscale / 100) + bg._y;
                    var _loc7 = getDist(stage[c], _loc4, _loc5);
                    var _loc3 = 6 - Math.ceil(_loc7 / 100);
                    if (stage[c].eyes._currentframe != 28)
                    {
                        stage[c].eyes.gotoAndStop(29);
                    } // end if
                    if (stage[c].mouth._currentframe != 14)
                    {
                        stage[c].mouth.gotoAndStop(14);
                    } // end if
                    if (_loc3 < 1)
                    {
                        _loc3 = 1;
                    } // end if
                    Propel(stage[c], getAngle(stage[c]._x, stage[c]._y, _loc4, _loc5), _loc3);
                    if (_loc7 < 20)
                    {
                        playSound("Kyuh");
                        Delete(stage[c]);
                    }
                    else if (_loc7 < GameData.Characters[c].Scale)
                    {
                        stage[c]._xscale = _loc7;
                        stage[c]._yscale = _loc7;
                    } // end else if
                    if (_loc3 > 1)
                    {
                        var _loc8 = 90 - _loc7;
                        if (stage[c].Spin < _loc8)
                        {
                            stage[c].Spin = stage[c].Spin + _loc3 * 3;
                        } // end if
                    } // end if
                } // end if
                if (stage["Gravity Well"]._visible && stage[c]._visible && GameData.Characters[stage[c]._name])
                {
                    var _loc2 = "Power";
                    if (GameData.Target._name == "Gravity Well")
                    {
                        if (Key.isDown(16))
                        {
                            _loc2 = "ShiftPower";
                        }
                        else if (Key.isDown(17))
                        {
                            _loc2 = "CtrlPower";
                        } // end if
                    } // end else if
                    if (stage[c]._x < stage["Gravity Well"]._x)
                    {
                        stage[c].XMov = stage[c].XMov + GameData.Toys["Gravity Well"][_loc2];
                    }
                    else
                    {
                        stage[c].XMov = stage[c].XMov - GameData.Toys["Gravity Well"][_loc2];
                    } // end else if
                    if (stage[c]._y < stage["Gravity Well"]._y)
                    {
                        stage[c].YMov = stage[c].YMov + GameData.Toys["Gravity Well"][_loc2];
                    }
                    else
                    {
                        stage[c].YMov = stage[c].YMov - GameData.Toys["Gravity Well"][_loc2];
                    } // end else if
                    _loc7 = getDist(stage["Gravity Well"], stage[c]._x, stage[c]._y);
                    if (_loc7 < 90)
                    {
                        _loc8 = 90 - _loc7;
                        if (stage[c].Spin < _loc8)
                        {
                            stage[c].Spin = stage[c].Spin + GameData.Toys["Gravity Well"][_loc2];
                        } // end if
                    } // end if
                } // end if
                if (stage[c].Doom > 0)
                {
                    if (stage[c].Doom > 30)
                    {
                        if (stage[c].eyes._currentframe != 28)
                        {
                            stage[c].eyes.gotoAndStop(29);
                        } // end if
                        if (stage[c].mouth._currentframe != 14)
                        {
                            stage[c].mouth.gotoAndStop(14);
                        } // end if
                    }
                    else if (!stage[c].accessory._visible || stage[c].accessory._currentframe != 21)
                    {
                        playSound("Boom");
                        stage[c].accessory._visible = true;
                        stage[c].accessory.gotoAndStop(21);
                    } // end else if
                    --stage[c].Doom;
                    if (stage[c].Doom == 0)
                    {
                        Delete(stage[c]);
                    } // end if
                } // end if
                if (stage[c].Spin != 0 && GameData.Target != stage[c] || stage[c].Spin != 0 && GameData.Action != "rotate")
                {
                    if (stage[c].Spin)
                    {
                        stage[c]._rotation = stage[c]._rotation + stage[c].Spin;
                    } // end if
                    if (stage[c].Spin > 0)
                    {
                        stage[c].Spin = Math.floor(stage[c].Spin * GameData.Friction);
                    }
                    else
                    {
                        stage[c].Spin = Math.ceil(stage[c].Spin * GameData.Friction);
                    } // end if
                } // end else if
                if (stage[c].XMov != 0 && GameData.Target != stage[c] || stage[c].XMov != 0 && GameData.Action != "drag")
                {
                    if (stage[c].XMov)
                    {
                        if (stage[c]._x + stage[c].XMov < 0)
                        {
                            stage[c]._x = 0;
                            stage[c].XMov = stage[c].XMov * -1;
                        }
                        else if (stage[c]._x + stage[c].XMov > Stage.width)
                        {
                            stage[c]._x = Stage.width;
                            stage[c].XMov = stage[c].XMov * -1;
                        }
                        else
                        {
                            stage[c]._x = stage[c]._x + stage[c].XMov;
                            if (stage[c] == GameData.Target)
                            {
                                Manipulator._x = stage[c]._x;
                            } // end if
                        } // end else if
                    } // end else if
                    if (stage[c]._name == "Gravity Well")
                    {
                        if (stage[c].XMov > 0)
                        {
                            stage[c].XMov = Math.floor(stage[c].XMov * GameData.Toys["Gravity Well"].Friction);
                        }
                        else
                        {
                            stage[c].XMov = Math.ceil(stage[c].XMov * GameData.Toys["Gravity Well"].Friction);
                        } // end else if
                    }
                    else if (stage[c].XMov > 0)
                    {
                        stage[c].XMov = Math.floor(stage[c].XMov * GameData.Friction);
                    }
                    else
                    {
                        stage[c].XMov = Math.ceil(stage[c].XMov * GameData.Friction);
                    } // end else if
                } // end else if
                if (stage[c].YMov != 0 && GameData.Target != stage[c] || stage[c].YMov != 0 && GameData.Action != "drag")
                {
                    if (stage[c].YMov)
                    {
                        if (stage[c]._y + stage[c].YMov < 0)
                        {
                            stage[c]._y = 0;
                            stage[c].YMov = stage[c].YMov * -1;
                        }
                        else if (stage[c]._y + stage[c].YMov > Stage.height)
                        {
                            stage[c]._y = Stage.height;
                            stage[c].YMov = stage[c].YMov * -1;
                        }
                        else
                        {
                            stage[c]._y = stage[c]._y + stage[c].YMov;
                            if (stage[c] == GameData.Target)
                            {
                                Manipulator._y = stage[c]._y;
                            } // end if
                        } // end else if
                    } // end else if
                    if (stage[c]._name == "Gravity Well")
                    {
                        if (stage[c].YMov > 0)
                        {
                            stage[c].YMov = Math.floor(stage[c].YMov * GameData.Toys["Gravity Well"].Friction);
                        }
                        else
                        {
                            stage[c].YMov = Math.ceil(stage[c].YMov * GameData.Toys["Gravity Well"].Friction);
                        } // end else if
                        continue;
                    } // end if
                    if (stage[c].YMov > 0)
                    {
                        stage[c].YMov = Math.floor(stage[c].YMov * GameData.Friction);
                        continue;
                    } // end if
                    stage[c].YMov = Math.ceil(stage[c].YMov * GameData.Friction);
                } // end if
            } // end if
        } // end of for...in
    } // end if
};
GameData.Frames = new Object();
addWindow("GeneralOptions", 100, 300, "Options");
addTextInput("GeneralOptions", "x", 15, 45, "X:", "isXLoc", 18, 20, 50);
addTextInput("GeneralOptions", "y", 95, 45, "Y:", "isYLoc", 18, 20, 50);
addTextInput("GeneralOptions", "s", 175, 45, "Scale:", "isScale", 18, 55, 50);
addTextInput("GeneralOptions", "r", 15, 70, "Rotation:", "isRotation", 18, 75, 50);
addButton("GeneralOptions", "CloseB", 160, 70, "Close", "CloseWindow");
addWindow("BlurSettings", 125, 300, "Blur Settings");
addTextInput("BlurSettings", "x", 15, 45, "X:", "isBlurX", 18, 20, 50);
addTextInput("BlurSettings", "y", 95, 45, "Y:", "isBlurY", 18, 20, 50);
addTextInput("BlurSettings", "q", 175, 45, "Quality:", "isBlurQ", 18, 65, 45);
addButton("BlurSettings", "ApplyB", 15, 70, "Apply", "SetFilter-Blur");
addButton("BlurSettings", "ClearB", 160, 70, "Clear", "ClearFilter-Blur");
addButton("BlurSettings", "CloseB", 10, 95, "Close", "CloseWindow");
addWindow("SceneSettings", 150, 300, "Scene Info");
addTextInput("SceneSettings", "sN", 15, 45, "Scene Name:", "isSceneName", 18, 100, 150);
addTextInput("SceneSettings", "Ps", 15, 65, "Prev Scene:", "isPrevScene", 18, 100, 150);
addTextInput("SceneSettings", "Ns", 15, 85, "Next Scene:", "isNextScene", 18, 100, 150);
addButton("SceneSettings", "CloseSS", 15, 125, "Close", "CloseWindow");
addWindow("SnapshotOptions", 125, 300, "Snapshot Options");
addTextInput("SnapshotOptions", "x", 15, 45, "X:", "isXLoc", 18, 20, 50);
addTextInput("SnapshotOptions", "y", 95, 45, "Y:", "isYLoc", 18, 20, 50);
addTextInput("SnapshotOptions", "s", 175, 45, "Scale:", "isScale", 18, 55, 50);
addTextInput("SnapshotOptions", "r", 15, 70, "Rotation:", "isRotation", 18, 75, 50);
addTextInput("SnapshotOptions", "o", 160, 70, "Opacity:", "isAlpha", 18, 75, 50);
addButton("SnapshotOptions", "CloseB", 100, 95, "Close", "CloseWindow");
addWindow("RainOptions", 180, 300, "Rain Options");
addTextInput("RainOptions", "x", 15, 45, "X:", "isXLoc", 18, 20, 50);
addTextInput("RainOptions", "y", 95, 45, "Y:", "isYLoc", 18, 20, 50);
addTextInput("RainOptions", "s", 175, 45, "Scale:", "isScale", 18, 55, 50);
addTextInput("RainOptions", "r", 15, 70, "Rotation:", "isRotation", 18, 75, 50);
addTextInput("RainOptions", "d", 160, 70, "Density:", "isRDensity", 18, 65, 50);
addTextInput("RainOptions", "xmin", 15, 95, "X:", "isRXMin", 18, 15, 40);
addTextInput("RainOptions", "xmax", 75, 95, "-", "isRXMax", 18, 15, 40);
addTextInput("RainOptions", "ymin", 150, 95, "Y:", "isRYMin", 18, 15, 40);
addTextInput("RainOptions", "ymax", 210, 95, "-", "isRYMax", 18, 15, 40);
addTextInput("RainOptions", "tmin", 50, 120, "Twirl:", "isRTwirlMin", 18, 55, 40);
addTextInput("RainOptions", "tmax", 150, 120, "-", "isRTwirlMax", 18, 15, 40);
addButton("RainOptions", "CloseB", 100, 145, "Close", "CloseWindow");
addWindow("ClusterOptions", 190, 300, "Cluster Options");
addTextInput("ClusterOptions", "x", 15, 45, "X:", "isXLoc", 18, 20, 50);
addTextInput("ClusterOptions", "y", 95, 45, "Y:", "isYLoc", 18, 20, 50);
addTextInput("ClusterOptions", "s", 175, 45, "Scale:", "isScale", 18, 55, 50);
addTextInput("ClusterOptions", "r", 15, 70, "Rotation:", "isRotation", 18, 75, 50);
addTextInput("ClusterOptions", "dist", 155, 70, "Distance:", "isClusterDist", 18, 75, 50);
addTextInput("ClusterOptions", "sprl", 15, 93, "Spiral:", "isClusterSpiral", 18, 65, 50);
addTextInput("ClusterOptions", "rmod", 140, 93, "RMod:", "isClusterRMod", 18, 50, 50);
addTextInput("ClusterOptions", "rows", 15, 120, "Rows:", "isClusterRows", 18, 50, 30);
addTextInput("ClusterOptions", "cols", 100, 120, "Cols:", "isClusterCols", 18, 48, 30);
addButton("ClusterOptions", "CloseB", 185, 120, "Close", "CloseWindow");
addTextInput("ClusterOptions", "sd", 25, 146, "Start D.:", "isClusterSD", 18, 75, 40);
addTextInput("ClusterOptions", "sp", 150, 146, "Spread:", "isClusterSpread", 18, 70, 40);
addText("ClusterOptions", "dir", 25, 168, "Shot Direction:", 18, 150);
addButton("ClusterOptions", "cdir", 155, 168, "isClusterDir", "ClusterDir");
addWindow("ColorizeMenu", 175, 350, "Colorize Menu");
addTextInput("ColorizeMenu", "rgbc", 25, 120, "RGB Code:", "isRGB", 18, 85, 80);
addButton("ColorizeMenu", "RandomC", 10, 146, "Randomize", "SetRandomColor");
addButton("ColorizeMenu", "DefaultC", 120, 146, "Default", "SetDefaultColor");
addButton("ColorizeMenu", "CloseB", 230, 146, "Close", "CloseWindow");
for (i in GameData.Frames)
{
    makeFrame(i);
} // end of for...in
Interface.ClusterOptions.rowsI.maxChars = 2;
Interface.ClusterOptions.colsI.maxChars = 2;
Interface.ColorizeMenu.createEmptyMovieClip("palette", 50);
Interface.ColorizeMenu.palette._x = 75;
Interface.ColorizeMenu.palette._y = 55;
Interface.ColorizeMenu.palette.attachMovie("ColorBar", "Rb", 1);
Interface.ColorizeMenu.palette.Rb.gotoAndStop(1);
Interface.ColorizeMenu.palette.attachMovie("Slider", "Rs", 2);
Interface.ColorizeMenu.palette.Rb._y = 5;
Interface.ColorizeMenu.palette.Rs._y = 5;
Interface.ColorizeMenu.palette.attachMovie("ColorBar", "Gb", 3);
Interface.ColorizeMenu.palette.attachMovie("Slider", "Gs", 4);
Interface.ColorizeMenu.palette.Gb.gotoAndStop(2);
Interface.ColorizeMenu.palette.Gb._y = 25;
Interface.ColorizeMenu.palette.Gs._y = 25;
Interface.ColorizeMenu.palette.attachMovie("ColorBar", "Bb", 5);
Interface.ColorizeMenu.palette.attachMovie("Slider", "Bs", 6);
Interface.ColorizeMenu.palette.Bb.gotoAndStop(3);
Interface.ColorizeMenu.palette.Bb._y = 45;
Interface.ColorizeMenu.palette.Bs._y = 45;
Interface.ColorizeMenu.palette.attachMovie("ColorPatch", "Cp", 7);
Interface.ColorizeMenu.palette.Cp._x = -60;
Interface.ColorizeMenu.palette.Rs.onPress = function ()
{
    this.startDrag(false, 0, this._y, 255, this._y);
    this.onEnterFrame = function ()
    {
        SwapPalette(this._parent);
    };
};
setColorSliderRelease(Interface.ColorizeMenu.palette.Rs);
Interface.ColorizeMenu.palette.Gs.onPress = function ()
{
    this.startDrag(false, 0, this._y, 255, this._y);
    this.onEnterFrame = function ()
    {
        SwapPalette(this._parent);
    };
};
setColorSliderRelease(Interface.ColorizeMenu.palette.Gs);
Interface.ColorizeMenu.palette.Bs.onPress = function ()
{
    this.startDrag(false, 0, this._y, 255, this._y);
    this.onEnterFrame = function ()
    {
        SwapPalette(this._parent);
    };
};
setColorSliderRelease(Interface.ColorizeMenu.palette.Bs);
var newCharCheck = GameData.Settings.DefaultChar.Value.toLowerCase();
if (newCharCheck == "newest")
{
    makeChar(GameData.NewestChar);
}
else
{
    makeChar(GameData.Settings.DefaultChar.Value);
} // end else if
makeNewMenu(Interface, "Level1Menu", 10);
makeNewMenu(Interface, "Level2Menu", 10);
makeNewMenu(Interface, "Level3Menu", 10);
Interface.HelpWindow.attachMovie("SpeechBubble", "EirinTalk", 1);
makePresetChar(Interface.HelpWindow, "Eirin (2)", "Eirin", 2);
Interface.HelpWindow.Eirin.mouth._visible = true;
Interface.HelpWindow.Eirin.mouth.gotoAndStop(51);
makeMenu(Interface.HelpWindow, "BasicHelpMenu", 3, ["Nevermind", "The Basics", "Latest Updates", "User Manual", "Got Any Rumors?", "About This Program"], 0, 0);
Interface.HelpWindow.Eirin._xscale = -50;
Interface.HelpWindow.Eirin._yscale = 50;
Interface.HelpWindow.Eirin._x = 320;
Interface.HelpWindow.Eirin._y = 200;
Interface.HelpWindow.Eirin.onPress = function ()
{
    this._parent.startDrag();
};
Interface.HelpWindow.Eirin.onRelease = function ()
{
    this._parent.stopDrag();
};
Interface.HelpWindow.Eirin.onReleaseOutside = function ()
{
    this._parent.stopDrag();
};
Interface.HelpWindow.EirinTalk.Bubble.gotoAndStop(1);
Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Intro;
Interface.HelpWindow.EirinTalk.D._y = -25;
Interface.HelpWindow.EirinTalk.D._x = -225;
Interface.HelpWindow.EirinTalk.D._height = 300;
Interface.HelpWindow.EirinTalk.Bubble._rotation = 270;
Interface.HelpWindow.EirinTalk.Bubble._xscale = 120;
Interface.HelpWindow.EirinTalk.Bubble._yscale = 130;
Interface.HelpWindow.EirinTalk.Bubble._x = -110;
Interface.HelpWindow.EirinTalk.Bubble._y = 80;
Interface.HelpWindow.EirinTalk._x = 170;
PositionMenu(Interface.HelpWindow, "L", "T", 130, 100, null, null);
Interface.HelpWindow.attachMovie("Arrow", "Next", 4);
Interface.HelpWindow.Next._xscale = -50;
Interface.HelpWindow.Next._yscale = 50;
Interface.HelpWindow.Next._x = 75;
Interface.HelpWindow.Next._y = 190;
Interface.HelpWindow.Next._visible = false;
Interface.HelpWindow.attachMovie("WalfasLink", "WalfasLink", 5);
Interface.HelpWindow.WalfasLink._x = GameData.Help.WalfasLinkX;
Interface.HelpWindow.WalfasLink._y = GameData.Help.WalfasLinkY;
Interface.HelpWindow.WalfasLink._visible = false;
Interface.HelpWindow.attachMovie("MenuItem", "TellMore", 6);
Interface.HelpWindow.TellMore.bName.text = "Tell me more";
Interface.HelpWindow.TellMore.BG._width = 112;
Interface.HelpWindow.TellMore.bName._width = 112;
Interface.HelpWindow.TellMore._x = 0;
Interface.HelpWindow.TellMore._y = 160;
Interface.HelpWindow.TellMore._visible = false;
setButtonStyle(Interface.HelpWindow.TellMore);
Interface.HelpWindow.TellMore.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Rumors[random(GameData.Help.Rumors.length)];
    playSound("Pop");
};
Interface.HelpWindow.BasicHelpMenu._y = 160;
Interface.HelpWindow.BasicHelpMenu._x = -28;
Interface.HelpWindow.BasicHelpMenu._visible = true;
for (b in Interface.HelpWindow.BasicHelpMenu)
{
    Interface.HelpWindow.BasicHelpMenu[b].BG._width = 200;
    Interface.HelpWindow.BasicHelpMenu[b].bName._width = 200;
} // end of for...in
Interface.HelpWindow.BasicHelpMenu.ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    CloseMenus(2);
};
Interface.HelpWindow.BasicHelpMenu.ID1.onRelease = function ()
{
    this._parent._visible = false;
    playSound("Pop");
    Interface.HelpWindow.Next._visible = true;
    SwapColor(this.BG, "Buttons", 1);
    Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Basics;
    Interface.HelpWindow.Next.onRelease = function ()
    {
        resetHelp();
    };
};
Interface.HelpWindow.BasicHelpMenu.ID2.onRelease = function ()
{
    this._parent._visible = false;
    playSound("Pop");
    Interface.HelpWindow.Next._visible = true;
    SwapColor(this.BG, "Buttons", 1);
    Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Updates;
    Interface.HelpWindow.Next.onRelease = function ()
    {
        resetHelp();
    };
};
Interface.HelpWindow.BasicHelpMenu.ID3.onRelease = function ()
{
    getURL("http://www.heavenlypandemonium.com/?page_id=29", "_blank");
};
Interface.HelpWindow.BasicHelpMenu.ID4.onRelease = function ()
{
    this._parent._visible = false;
    playSound("Pop");
    Interface.HelpWindow.Next._visible = true;
    Interface.HelpWindow.TellMore._visible = true;
    SwapColor(this.BG, "Buttons", 1);
    Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Rumors[random(GameData.Help.Rumors.length)];
    Interface.HelpWindow.Next.onRelease = function ()
    {
        resetHelp();
    };
};
Interface.HelpWindow.BasicHelpMenu.ID5.onRelease = function ()
{
    this._parent._visible = false;
    playSound("Pop");
    Interface.HelpWindow.Next._visible = true;
    Interface.HelpWindow.WalfasLink._visible = true;
    SwapColor(this.BG, "Buttons", 1);
    Interface.HelpWindow.EirinTalk.D.text = GameData.Help.About;
    Interface.HelpWindow.Next.onRelease = function ()
    {
        resetHelp();
    };
};
makeButton(Interface, "MainMenu", "Menu", GameData.Menus.DMax++);
makeMenu(Interface, "StageMenu", GameData.Menus.DMax++, ["Shrink All", "Scramble!", "Randomize All"], 0, 0);
makeMenu(Interface, "GlobalLockMenu", GameData.Menus.DMax++, ["Unlock All", "Lock All", "Hats", "Items", "Accessory", "Back", "Shoes", "Arms", "Body", "Hair", "Eyes", "Mouth"], 30, 0);
makeMenu(Interface, "InsertMenu", GameData.Menus.DMax++, ["Speech Bubble", "Object"], 0, 0);
Interface.attachMovie("MenuItem", "SceneFrame", GameData.Menus.DMax++);
Interface.SceneFrame.bName.text = GameData.CurrentScene.Name + " : Part " + (GameData.CurrentScene.CurrentAct + 1);
setButtonStyle(Interface.SceneFrame);
PositionMenu(Interface.SceneFrame, "L", "T", 0, 3, null, null);
PositionMenu(Interface.MainMenu, "L", "B", 0, 3, null, null);
makeThumbMenu(Interface.PresetMenu, "PresetList", "HeadPreview", 20, 15, 20, 100, 100, "char");
PositionMenu(Interface.PresetMenu, "C", "C", 117, -238, Interface.MainMenu, Interface.MainMenu);
makeListMenu(Interface.SavedCharMenu, "SavedChars", 100, 100);
PositionMenu(Interface.SavedCharMenu, "C", "C", 117, -238, Interface.MainMenu, Interface.MainMenu);
makeListMenu(Interface.SavedSceneMenu, "SavedScenes", 100, 100);
PositionMenu(Interface.SavedSceneMenu, "C", "C", 117, -238, Interface.MainMenu, Interface.MainMenu);
RefreshActList();
PositionMenu(Interface.GlobalLockMenu, "C", "C", 147, -20, Interface.MainMenu, Interface.MainMenu);
for (b = 0; b < 12; b++)
{
    Interface.GlobalLockMenu["ID" + b].BG._width = 120;
    Interface.GlobalLockMenu["ID" + b].bName._width = 120;
    if (b > 1)
    {
        Interface.GlobalLockMenu["ID" + b].attachMovie("checkbox", "checkbox", 10);
        Interface.GlobalLockMenu["ID" + b].checkbox.gotoAndStop(1);
        Interface.GlobalLockMenu["ID" + b].checkbox._xscale = 75;
        Interface.GlobalLockMenu["ID" + b].checkbox._yscale = 75;
        Interface.GlobalLockMenu["ID" + b].checkbox._y = 10;
        Interface.GlobalLockMenu["ID" + b].checkbox._x = 110;
        Interface.GlobalLockMenu["ID" + b].onRelease = function ()
        {
            if (GameData.Locks[this.bName.text])
            {
                GameData.Locks[this.bName.text] = false;
                this.checkbox.gotoAndStop(1);
            }
            else
            {
                GameData.Locks[this.bName.text] = true;
                this.checkbox.gotoAndStop(2);
            } // end else if
        };
    } // end if
} // end of for
Interface.GlobalLockMenu.ID0.onRelease = function ()
{
    for (l = 2; l < 12; l++)
    {
        Interface.GlobalLockMenu["ID" + l].checkbox.gotoAndStop(1);
        GameData.Locks[Interface.GlobalLockMenu["ID" + l].bName.text] = false;
        if (GameData.Settings.MassLocking.Check)
        {
            for (i in GameData.Characters)
            {
                GameData.Characters[i].Locks[Interface.GlobalLockMenu["ID" + l].bName.text] = false;
            } // end of for...in
        } // end if
    } // end of for
    SwapColor(this.BG, "Buttons", 1);
};
Interface.GlobalLockMenu.ID1.onRelease = function ()
{
    for (l = 2; l < 12; l++)
    {
        Interface.GlobalLockMenu["ID" + l].checkbox.gotoAndStop(2);
        GameData.Locks[Interface.GlobalLockMenu["ID" + l].bName.text] = true;
        if (GameData.Settings.MassLocking.Check)
        {
            for (i in GameData.Characters)
            {
                GameData.Characters[i].Locks[Interface.GlobalLockMenu["ID" + l].bName.text] = true;
            } // end of for...in
        } // end if
    } // end of for
    SwapColor(this.BG, "Buttons", 1);
};
makeMenu(Interface, "Grouchy ReimuMenu", GameData.Menus.DMax++, ["Pay Money", "Hey Reimu!"], 0, Stage.height - 20);
makeMenu(Interface, "Gravity WellMenu", GameData.Menus.DMax++, ["Dismiss", "Settings"], 0, Stage.height - 20);
makeMenu(Interface, "Clone CapsuleMenu", GameData.Menus.DMax++, ["Disassemble", "Activate!", "Eject", "Tinker", "DNA Data"], 0, Stage.height - 20);
makeMenu(Interface, "Clone CapsuleEmptyMenu", GameData.Menus.DMax++, ["Disassemble", "Input DNA", "Tinker"], 0, Stage.height - 20);
makeMenu(Interface, "Boxing ChenMenu", GameData.Menus.DMax++, ["Send Home"], 0, Stage.height - 20);
makeMenu(Interface, "Mysterious GapMenu", GameData.Menus.DMax++, ["Dismiss"], 0, Stage.height - 20);
makeMenu(Interface, "BubbleMenu", GameData.Menus.DMax++, ["Delete", "Edit Text", "Bring to Front", "Bring Forward", "Send Backwards", "Send to Back", "Vertical Flip", "Horizontal Flip", "Settings"], 0, Stage.height - 20);
PositionMenu(Interface.BubbleMenu, "C", "C", 30, -20, Interface.TargetFrame, Interface.TargetFrame);
Interface.BubbleMenu.ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    CloseMenus(1);
    delete GameData.SpeechBubbles[GameData.Target];
    GameData.Target.removeMovieClip();
    Target();
};
Interface.BubbleMenu.ID1.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    CloseMenus(1);
    editBubble(GameData.Target);
};
Interface.BubbleMenu.ID2.onRelease = function ()
{
    BringToFront(GameData.Target);
    SwapColor(this.BG, "Buttons", 1);
};
Interface.BubbleMenu.ID3.onRelease = function ()
{
    BringForward(GameData.Target);
    SwapColor(this.BG, "Buttons", 1);
};
Interface.BubbleMenu.ID4.onRelease = function ()
{
    SendBackward(GameData.Target);
    SwapColor(this.BG, "Buttons", 1);
};
Interface.BubbleMenu.ID5.onRelease = function ()
{
    SendToBack(GameData.Target);
    SwapColor(this.BG, "Buttons", 1);
};
Interface.BubbleMenu.ID6.onRelease = function ()
{
    GameData.Target.Bubble.YFace = GameData.Target.Bubble.YFace * -1;
    GameData.Target.Bubble._yscale = GameData.Target.Bubble._yscale * -1;
    SwapColor(this.BG, "Buttons", 1);
};
Interface.BubbleMenu.ID7.onRelease = function ()
{
    GameData.Target.Bubble.XFace = GameData.Target.Bubble.XFace * -1;
    GameData.Target.Bubble._xscale = GameData.Target.Bubble._xscale * -1;
    SwapColor(this.BG, "Buttons", 1);
};
Interface.BubbleMenu.ID8.onRelease = function ()
{
    OpenMenu(1, Interface.BubbleWindow, this.BG);
    Interface.BubbleWindow.gX.text = GameData.Target._x;
    Interface.BubbleWindow.gY.text = GameData.Target._y;
    Interface.BubbleWindow.gXs.text = GameData.Target._xscale;
    Interface.BubbleWindow.gYs.text = GameData.Target._yscale;
    Interface.BubbleWindow.gR.text = GameData.Target._rotation;
    Interface.BubbleWindow.bX.text = GameData.Target.Bubble._x;
    Interface.BubbleWindow.bY.text = GameData.Target.Bubble._y;
    Interface.BubbleWindow.bXs.text = GameData.Target.Bubble._xscale;
    Interface.BubbleWindow.bYs.text = GameData.Target.Bubble._yscale;
    Interface.BubbleWindow.bR.text = GameData.Target.Bubble._rotation;
    Interface.BubbleWindow.tX.text = GameData.Target.D._x;
    Interface.BubbleWindow.tY.text = GameData.Target.D._y;
    Interface.BubbleWindow.tR.text = GameData.Target.D._rotation;
};
PositionMenu(Interface.BubbleWindow, "C", "C", -50, -300, Interface.TargetFrame, Interface.TargetFrame);
Interface.BubbleWindow.BG._alpha = GameData.Buttons.Opacity;
setBGDrag(Interface.BubbleWindow.BG);
makeButton(Interface.BubbleWindow, "Set", "set", 151);
Interface.BubbleWindow.Set._x = 340;
Interface.BubbleWindow.Set._y = 220;
setButtonStyle(Interface.BubbleWindow.Set);
Interface.BubbleWindow.Set.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    GameData.Target._x = Number(Interface.BubbleWindow.gX.text);
    GameData.Target._y = Number(Interface.BubbleWindow.gY.text);
    GameData.Target._xscale = Number(Interface.BubbleWindow.gXs.text);
    GameData.Target._yscale = Number(Interface.BubbleWindow.gYs.text);
    GameData.Target._rotation = Number(Interface.BubbleWindow.gR.text);
    GameData.Target.Bubble._x = Number(Interface.BubbleWindow.bX.text);
    GameData.Target.Bubble._y = Number(Interface.BubbleWindow.bY.text);
    GameData.Target.Bubble._xscale = Number(Interface.BubbleWindow.bXs.text);
    GameData.Target.Bubble._yscale = Number(Interface.BubbleWindow.bYs.text);
    GameData.Target.Bubble._rotation = Number(Interface.BubbleWindow.bR.text);
    GameData.Target.D._x = Number(Interface.BubbleWindow.tX.text);
    GameData.Target.D._y = Number(Interface.BubbleWindow.tY.text);
    GameData.Target.D._rotation = Number(Interface.BubbleWindow.tR.text);
    GameData.SpeechBubbles[GameData.Target._name].XScale = Math.abs(GameData.Target.Bubble._xscale);
    if (GameData.Target.Bubble._xscale < 0)
    {
        GameData.Target.Bubble.XFace = -1;
    }
    else
    {
        GameData.Target.Bubble.XFace = 1;
    } // end else if
    GameData.SpeechBubbles[GameData.Target._name].YScale = Math.abs(GameData.Target.Bubble._yscale);
    if (GameData.Target.Bubble._yscale < 0)
    {
        GameData.Target.Bubble.YFace = -1;
    }
    else
    {
        GameData.Target.Bubble.YFace = 1;
    } // end else if
    GameData.SpeechBubbles[GameData.Target._name].Scale = Math.abs(GameData.Target._xscale);
};
makeButton(Interface.BubbleWindow, "Close", "close", 152);
Interface.BubbleWindow.Close._x = 340;
Interface.BubbleWindow.Close._y = 240;
setButtonStyle(Interface.BubbleWindow.Close);
Interface.BubbleWindow.Close.onRelease = function ()
{
    CloseMenus(1);
};
PositionMenu(Interface["Grouchy ReimuMenu"], "C", "C", 30, -20, Interface.TargetFrame, Interface.TargetFrame);
Interface["Grouchy ReimuMenu"].ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    playSound("Cash");
    stage["Grouchy Reimu"]._visible = false;
    CloseMenus(1);
    Target();
};
Interface["Grouchy ReimuMenu"].ID1.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    HaxSignBE();
    CloseMenus(1);
};
PositionMenu(Interface["Gravity WellMenu"], "C", "C", 30, -20, Interface.TargetFrame, Interface.TargetFrame);
Interface["Gravity WellMenu"].ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    stage["Gravity Well"]._visible = false;
    CloseMenus(1);
    Target();
};
Interface["Gravity WellMenu"].ID1.onRelease = function ()
{
    Interface.GravMenu.Fr.text = 0;
    Interface.GravMenu.P.text = GameData.Toys["Gravity Well"].Power;
    Interface.GravMenu.sP.text = GameData.Toys["Gravity Well"].ShiftPower;
    Interface.GravMenu.cP.text = GameData.Toys["Gravity Well"].CtrlPower;
    OpenMenu(1, Interface.GravMenu, this.BG);
};
PositionMenu(Interface["Boxing ChenMenu"], "C", "C", 30, -20, Interface.TargetFrame, Interface.TargetFrame);
Interface["Boxing ChenMenu"].ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    stage["Boxing Chen"]._visible = false;
    resetBoxingChen();
    CloseMenus(1);
    Target();
};
PositionMenu(Interface["Mysterious GapMenu"], "C", "C", 30, -20, Interface.TargetFrame, Interface.TargetFrame);
Interface["Mysterious GapMenu"].ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    stage["Mysterious Gap"]._visible = false;
    CloseMenus(1);
    Target();
};
PositionMenu(Interface["Clone CapsuleMenu"], "C", "C", 30, -20, Interface.TargetFrame, Interface.TargetFrame);
PositionMenu(Interface["Clone CapsuleEmptyMenu"], "C", "C", 30, -20, Interface.TargetFrame, Interface.TargetFrame);
Interface["Clone CapsuleMenu"].ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    stage["Clone Capsule"]._visible = false;
    CloseMenus(1);
    Target();
};
Interface["Clone CapsuleEmptyMenu"].ID0.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    stage["Clone Capsule"]._visible = false;
    CloseMenus(1);
    Target();
};
Interface["Clone CapsuleMenu"].ID1.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    activateCloneCapsule();
};
Interface["Clone CapsuleMenu"].ID2.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    ejectCloneCapsule();
    CloseMenus(1);
};
Interface["Clone CapsuleMenu"].ID3.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    tinkerCloneCapsule();
};
Interface["Clone CapsuleMenu"].ID4.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    showDNAstrand(GameData.Toys["Clone Capsule"].Char);
};
Interface["Clone CapsuleEmptyMenu"].ID1.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    openDNAInput();
};
Interface["Clone CapsuleEmptyMenu"].ID2.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    tinkerCloneCapsule();
};
makeMenu(Interface, "LockMenu", GameData.Menus.DMax++, ["Hats", "Items", "Accessory", "Back", "Shoes", "Arms", "Body", "Hair", "Eyes", "Mouth"], 85, Stage.height - 60);
PositionMenu(Interface.TargetFrame, "C", "C", 200, -5, Interface.MainMenu, Interface.MainMenu);
addPinPreview(Interface.TargetFrame);
Interface.TargetFrame._visible = false;
setButtonStyle(Interface.TargetFrame);
PositionMenu(Interface.LockMenu, "C", "C", 90, -20, Interface.TargetFrame, Interface.TargetFrame);
for (b = 0; b < 10; b++)
{
    Interface.LockMenu["ID" + b].BG._width = 120;
    Interface.LockMenu["ID" + b].bName._width = 120;
    Interface.LockMenu["ID" + b].attachMovie("checkbox", "checkbox", 10);
    Interface.LockMenu["ID" + b].checkbox.gotoAndStop(1);
    Interface.LockMenu["ID" + b].checkbox._xscale = 75;
    Interface.LockMenu["ID" + b].checkbox._yscale = 75;
    Interface.LockMenu["ID" + b].checkbox._y = 10;
    Interface.LockMenu["ID" + b].checkbox._x = 110;
    Interface.LockMenu["ID" + b].onRelease = function ()
    {
        if (GameData.Characters[GameData.Target._name].Locks[this.bName.text])
        {
            GameData.Characters[GameData.Target._name].Locks[this.bName.text] = false;
            this.checkbox.gotoAndStop(1);
        }
        else
        {
            GameData.Characters[GameData.Target._name].Locks[this.bName.text] = true;
            this.checkbox.gotoAndStop(2);
        } // end else if
    };
} // end of for
PositionMenu(Interface.DNAMenu, "C", "C", -140, -230, Interface.TargetFrame, Interface.TargetFrame);
Interface.DNAMenu.BG._alpha = GameData.Buttons.Opacity;
makeButton(Interface.DNAMenu, "OK", "test", 50);
setButtonStyle(Interface.DNAMenu.OK);
Interface.DNAMenu.OK._x = 140;
Interface.DNAMenu.OK._y = 53;
Interface.DNAMenu.DNAdata.onSetFocus = function ()
{
    GameData.KeyLock = true;
};
Interface.DNAMenu.DNAdata.onKillFocus = function ()
{
    GameData.KeyLock = false;
};
makeThumbMenu(Interface.HatMenu, "Hats", "Hats", 10, 70, 20, 146, -238, "hat");
makeThumbMenu(Interface.ItemMenu, "Items", "Items", 10, 0, 20, 146, -238, "item");
makeThumbMenu(Interface.AccMenu, "Acc", "Acc", 5, 0, 20, 146, -238, "accessory");
makeThumbMenu(Interface.BackMenu, "Back", "Wings", -5, -20, 14, 146, -238, "wings");
makeThumbMenu(Interface.ShoesMenu, "Shoes", "Shoes", 20, 10, 30, 146, -238, "legs");
makeThumbMenu(Interface.ArmsMenu, "Arms", "Arms", 20, 26, 20, 146, -238, "arms");
makeThumbMenu(Interface.BodyMenu, "Body", "Body", 20, 20, 14, 146, -238, "body");
makeThumbMenu(Interface.HairMenu, "Hair", "Hair", 20, 30, 8, 146, -238, "head");
makeThumbMenu(Interface.EyesMenu, "Eyes", "Eyes", 20, 35, 15, 146, -238, "eyes");
makeThumbMenu(Interface.MouthMenu, "Mouth", "Mouth", 20, 35, 15, 146, -238, "mouth");
makeThumbMenu(Interface.ObjectList, "ObjectList", "Objects", 10, 10, 10, 64, -253, "object");
SwapColor(Interface.BGMenu.BG, "Buttons", 0);
Interface.BGMenu.BG._alpha = GameData.Buttons.Opacity;
makeThumbMenu(Interface.BGMenu, "BGs", "Background", 0, 0, 5, 100, -370, "");
Interface.BGMenu.SMod = 50;
Interface.BGMenu.Ops._x = -20;
Interface.BGMenu.DaMask._x = -20;
Interface.BGMenu.Ops._y = 50;
Interface.BGMenu.DaMask._y = 50;
Interface.BGMenu.sX.text = 100;
Interface.BGMenu.sY.text = 100;
Interface.BGMenu.Fr.text = (1 - GameData.Friction) * 100;
Interface.BGMenu.Br.text = 100;
if (GameData.BGAutoScale)
{
    Interface.BGMenu.AScheck.gotoAndStop(2);
}
else
{
    Interface.BGMenu.AScheck.gotoAndStop(1);
} // end else if
Interface.BGMenu.AScheck.onRelease = function ()
{
    if (GameData.BGAutoScale)
    {
        GameData.BGAutoScale = false;
        Interface.BGMenu.AScheck.gotoAndStop(1);
    }
    else
    {
        GameData.BGAutoScale = true;
        Interface.BGMenu.AScheck.gotoAndStop(2);
    } // end else if
};
makeButton(Interface.BGMenu, "BGSetButton", "Set", 50);
Interface.BGMenu.BGSetButton._x = 280;
Interface.BGMenu.BGSetButton._y = 270;
Interface.BGMenu.BGSetButton.onRelease = function ()
{
    setBGProperties();
    SwapColor(this.BG, "Buttons", 1);
};
makeButton(Interface.BGMenu, "BGDefButton", "Default", 51);
Interface.BGMenu.BGDefButton._x = 280;
Interface.BGMenu.BGDefButton._y = 250;
Interface.BGMenu.BGDefButton.onRelease = function ()
{
    this._parent.lX.text = 0;
    this._parent.lY.text = 0;
    this._parent.sX.text = 100;
    this._parent.sY.text = 100;
    this._parent.rD.text = 0;
    this._parent.Fr.text = 10;
    this._parent.Br.text = 100;
    setBGProperties();
    SwapColor(this.BG, "Buttons", 1);
};
Interface.BGMenu.Prev.onRelease = function ()
{
    if (GameData.BG - 1 < 0)
    {
        SwapBG(GameData.BGs.length - 2);
    }
    else
    {
        SwapBG(GameData.BG - 1);
    } // end else if
};
Interface.BGMenu.Next.onRelease = function ()
{
    if (GameData.BG + 1 > GameData.BGs.length - 2)
    {
        SwapBG(0);
    }
    else
    {
        SwapBG(GameData.BG + 1);
    } // end else if
};
PositionMenu(Interface.GravMenu, "C", "C", 140, -280, Interface.MainMenu, Interface.MainMenu);
Interface.GravMenu.BG._alpha = GameData.Buttons.Opacity;
setBGDrag(Interface.GravMenu.BG);
makeButton(Interface.GravMenu, "Close", "set", 151);
Interface.GravMenu.Close._x = 20;
Interface.GravMenu.Close._y = 110;
setButtonStyle(Interface.GravMenu.Close);
Interface.GravMenu.Close.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    GameData.Toys["Gravity Well"].Friction = getFriction(Number(this._parent.Fr.text));
    GameData.Toys["Gravity Well"].Power = Number(this._parent.P.text);
    GameData.Toys["Gravity Well"].ShiftPower = Number(this._parent.sP.text);
    GameData.Toys["Gravity Well"].CtrlPower = Number(this._parent.cP.text);
    CloseMenus(1);
};
PositionMenu(Interface.COMenu, "C", "C", -100, -350, Interface.TargetFrame, Interface.TargetFrame);
Interface.COMenu.BG._alpha = GameData.Buttons.Opacity;
Interface.COMenu.BG.onPress = function ()
{
    this._parent.startDrag();
};
Interface.COMenu.BG.onRelease = function ()
{
    this._parent.stopDrag();
};
Interface.COMenu.BG.onReleaseOutside = function ()
{
    this._parent.stopDrag();
};
Interface.COMenu.cName.onSetFocus = function ()
{
    GameData.KeyLock = true;
};
Interface.COMenu.cName.onKillFocus = function ()
{
    GameData.KeyLock = false;
};
Interface.COMenu.Prev.onRelease = function ()
{
    QuickSwap(GameData.Target, -1, "All");
    setCharLook(this._parent.char, GameData.Characters[GameData.Target._name]);
};
Interface.COMenu.Next.onRelease = function ()
{
    QuickSwap(GameData.Target, 1, "All");
    setCharLook(this._parent.char, GameData.Characters[GameData.Target._name]);
};
GameData.PartsArray = new Array("Hats", "Eyes", "Mouth", "Hair", "Body", "Arms", "Shoes", "Back", "Accessory", "Items");
for (i = 0; i < GameData.PartsArray.length; i++)
{
    Interface.COMenu.attachMovie("Arrow", "Prev" + i, i * 3);
    Interface.COMenu["Prev" + i]._xscale = 35;
    Interface.COMenu["Prev" + i]._yscale = 35;
    Interface.COMenu["Prev" + i]._y = i * 21 + 9;
    Interface.COMenu["Prev" + i]._x = 250;
    Interface.COMenu["Prev" + i].ID = GameData.PartsArray[i];
    Interface.COMenu["Prev" + i].onRelease = function ()
    {
        QuickSwap(GameData.Target, -1, this.ID);
        setCharLook(this._parent.char, GameData.Characters[GameData.Target._name]);
    };
    Interface.COMenu.attachMovie("Arrow", "Next" + i, i * 3 + 2);
    Interface.COMenu["Next" + i]._xscale = -35;
    Interface.COMenu["Next" + i]._yscale = 35;
    Interface.COMenu["Next" + i]._y = i * 21 + 9;
    Interface.COMenu["Next" + i]._x = 385;
    Interface.COMenu["Next" + i].ID = GameData.PartsArray[i];
    Interface.COMenu["Next" + i].onRelease = function ()
    {
        QuickSwap(GameData.Target, 1, this.ID);
        setCharLook(this._parent.char, GameData.Characters[GameData.Target._name]);
    };
    Interface.COMenu.attachMovie("checkbox", "Lock" + i, i * 3 + 1);
    Interface.COMenu["Lock" + i]._xscale = 75;
    Interface.COMenu["Lock" + i]._yscale = 75;
    Interface.COMenu["Lock" + i]._y = i * 21 + 17;
    Interface.COMenu["Lock" + i]._x = 363;
    Interface.COMenu["Lock" + i].ID = GameData.PartsArray[i];
    Interface.COMenu["Lock" + i].IDnum = i;
    Interface.COMenu["Lock" + i].onRelease = function ()
    {
        if (GameData.Characters[GameData.Target._name].Locks[this.ID])
        {
            GameData.Characters[GameData.Target._name].Locks[this.ID] = false;
            this._parent["Prev" + this.IDnum]._visible = true;
            this._parent["Next" + this.IDnum]._visible = true;
            this.gotoAndStop(1);
        }
        else
        {
            GameData.Characters[GameData.Target._name].Locks[this.ID] = true;
            this._parent["Prev" + this.IDnum]._visible = false;
            this._parent["Next" + this.IDnum]._visible = false;
            this.gotoAndStop(2);
        } // end else if
    };
} // end of for
makeButton(Interface.COMenu, "Set", "set", 150);
Interface.COMenu.Set._x = 140;
Interface.COMenu.Set._y = 250;
setButtonStyle(Interface.COMenu.Set);
Interface.COMenu.Set.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    GameData.Characters[GameData.Target._name].Name = Interface.COMenu.cName.text;
    Interface.TargetFrame.bName.text = Interface.COMenu.cName.text;
    if (Interface.COMenu.cScale.text < GameData.ScaleLimit)
    {
        Interface.COMenu.cScale.text = GameData.ScaleLimit;
    } // end if
    GameData.Characters[GameData.Target._name].Scale = Number(Interface.COMenu.cScale.text);
    GameData.Target._xscale = GameData.Characters[GameData.Target._name].Scale * GameData.Target.XFace;
    GameData.Target._yscale = GameData.Characters[GameData.Target._name].Scale * GameData.Target.YFace;
    GameData.Target._rotation = Interface.COMenu.cRot.text;
    GameData.Target._x = Interface.COMenu.cX.text;
    GameData.Target._y = Interface.COMenu.cY.text;
};
makeButton(Interface.COMenu, "Close", "close", 151);
Interface.COMenu.Close._x = -20;
Interface.COMenu.Close._y = 250;
setButtonStyle(Interface.COMenu.Close);
Interface.COMenu.Close.onRelease = function ()
{
    SwapColor(this.BG, "Buttons", 1);
    CloseMenus(1);
};
makeMenu(Interface.COMenu, "SideOps", 152, ["Bring Forward", "Send Backwards", "Vertical Flip", "Horizontal Flip", "Unlock All", "Lock All", "Randomize"], 0, 0);
Interface.COMenu.SideOps._x = -20;
Interface.COMenu.SideOps._y = 170;
Interface.COMenu.SideOps._visible = true;
Interface.COMenu.SideOps.ID0.onRelease = function ()
{
    BringForward(GameData.Target);
    SwapColor(this.BG, "Buttons", 1);
};
Interface.COMenu.SideOps.ID1.onRelease = function ()
{
    SendBackward(GameData.Target);
    SwapColor(this.BG, "Buttons", 1);
};
Interface.COMenu.SideOps.ID2.onRelease = function ()
{
    GameData.Target._yscale = GameData.Target._yscale * -1;
    GameData.Target.YFace = GameData.Target.YFace * -1;
    SwapColor(this.BG, "Buttons", 1);
};
Interface.COMenu.SideOps.ID3.onRelease = function ()
{
    GameData.Target._xscale = GameData.Target._xscale * -1;
    GameData.Target.XFace = GameData.Target.XFace * -1;
    SwapColor(this.BG, "Buttons", 1);
};
Interface.COMenu.SideOps.ID4.onRelease = function ()
{
    for (i = 0; i < GameData.PartsArray.length; i++)
    {
        GameData.Characters[GameData.Target._name].Locks[GameData.PartsArray[i]] = false;
        Interface.COMenu["Prev" + i]._visible = true;
        Interface.COMenu["Next" + i]._visible = true;
        Interface.COMenu["Lock" + i].gotoAndStop(1);
    } // end of for
};
Interface.COMenu.SideOps.ID5.onRelease = function ()
{
    for (i = 0; i < GameData.PartsArray.length; i++)
    {
        GameData.Characters[GameData.Target._name].Locks[GameData.PartsArray[i]] = true;
        Interface.COMenu["Prev" + i]._visible = false;
        Interface.COMenu["Next" + i]._visible = false;
        Interface.COMenu["Lock" + i].gotoAndStop(2);
    } // end of for
};
Interface.COMenu.SideOps.ID6.onRelease = function ()
{
    RandomizeAll(GameData.Target);
    setCharLook(Interface.COMenu.char, GameData.Characters[GameData.Target._name]);
};
setKeyLocks(Interface.COMenu.cName);
setKeyLocks(Interface.COMenu.cScale);
setKeyLocks(Interface.COMenu.cRot);
setKeyLocks(Interface.COMenu.cX);
setKeyLocks(Interface.COMenu.cY);
PositionMenu(Interface.RenameMenu, "C", "C", 0, -200, Interface.TargetFrame, Interface.TargetFrame);
Interface.RenameMenu.BG._alpha = GameData.Buttons.Opacity;
makeButton(Interface.RenameMenu, "OK", "OK", 10);
Interface.RenameMenu.OK._x = 50;
Interface.RenameMenu.OK._y = 35;
Interface.RenameMenu.iName.onSetFocus = function ()
{
    GameData.KeyLock = true;
};
Interface.RenameMenu.iName.onKillFocus = function ()
{
    GameData.KeyLock = false;
};
makeButton(Interface.ConfirmBox, "OK", "OK", 10);
Interface.ConfirmBox.OK._x = 30;
Interface.ConfirmBox.OK._y = 35;
makeButton(Interface.ConfirmBox, "Cancel", "Cancel", 11);
Interface.ConfirmBox.Cancel._x = 170;
Interface.ConfirmBox.Cancel._y = 35;
fixScales();
setMenuPositions();
GameData.Menus.baseH = Interface._height;
GameData.Menus.baseW = Interface._width;
Interface.MainMenu.onRelease = function ()
{
    SetMenu(1, "MainMenu", this, 0, 0);
};
Interface.SceneFrame.onRelease = function ()
{
    SetMenu(1, "SceneMenu", this, 0, 0);
};
fixMenuDepths(["BGMenu", "HatMenu", "EyesMenu", "BodyMenu", "ShoesMenu", "ArmsMenu", "AccMenu", "ItemMenu", "HairMenu", "BackMenu", "MouthMenu", "ObjectList", "RenameMenu", "HelpWindow", "BubbleWindow"]);
Interface.TargetFrame.BG._width = 170;
Interface.TargetFrame.bName._width = 170 - Interface.TargetFrame.bName._x;
Interface.TargetFrame.attachMovie("TargetFramePreview", "preview", 10);
Interface.TargetFrame.preview._x = 10;
Interface.TargetFrame.preview._y = 10;
Interface.TargetFrame.preview._xscale = 40;
Interface.TargetFrame.preview._yscale = 40;
if (my_so.data.Version < GameData.Version || my_so.data.Version == undefined)
{
    GameData.Menus.Functions.OpenHelp();
    Interface.HelpWindow.BasicHelpMenu._visible = false;
    playSound("Pop");
    Interface.HelpWindow.Next._visible = true;
    SwapColor(this.BG, "Buttons", 1);
    Interface.HelpWindow.EirinTalk.D.text = GameData.Help.Updates;
    Interface.HelpWindow.Next.onRelease = function ()
    {
        resetHelp();
    };
    my_so.data.Version = GameData.Version;
    my_so.flush();
} // end if
GameData.Windows.New();
GameData.Pong.Top = 50;
GameData.Pong.Bottom = 360;
